<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20210313 17:06:25.479" generator="Robot 3.0.3.dev20170213 (Python 2.7.5 on linux2)">
<suite source="/root/Sree/Automation_Regression/TMO/Digits/testcases_sanity/AllSuits/pm_deposit_oem_mt.robot" id="s1" name="Pm Deposit Oem Mt">
<kw type="setup" name="prepare_suitebed">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${SUITE NAME.rsplit('.')[-1]}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:26.480" starttime="20210313 17:06:26.479"></status>
</kw>
<kw name="login_to_mstore" library="mStore_Generic_resources">
<doc>"Login to mstore testbed server"</doc>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${mstore_ip}</arg>
<arg>port=${mstore_ssh_port}</arg>
<arg>timeout=1 minute</arg>
<arg>alias=${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:26.483" starttime="20210313 17:06:26.482"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${mstore_username}</arg>
<arg>${mstore_password}</arg>
</arguments>
<msg timestamp="20210313 17:06:26.484" level="INFO">Logging into '10.10.219.141:22' as 'root'.</msg>
<msg timestamp="20210313 17:06:27.770" level="INFO">Read output: =============================================
welcome!
This setup upgraded for TMO Release of C_4_4_20_4b 
=============================================
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:27.771" starttime="20210313 17:06:26.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mstore_username}" != "root"</arg>
<arg>Run Keywords</arg>
<arg>write</arg>
<arg>sudo bash</arg>
<arg>AND</arg>
<arg>read until</arg>
<arg>${mstore_username}:</arg>
<arg>AND</arg>
<arg>Write</arg>
<arg>${mstore_password}</arg>
<arg>AND</arg>
<arg>Read Until</arg>
<arg>\#</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:27.773" starttime="20210313 17:06:27.772"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:27.774" starttime="20210313 17:06:26.480"></status>
</kw>
<kw name="login_to_mstore_dbm" library="mStore_Generic_resources">
<doc>"login to mysql db in mstore"</doc>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${mstore_ip}</arg>
<arg>port=${mstore_ssh_port}</arg>
<arg>timeout=1 minute</arg>
<arg>alias=${mStore_dbm_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:27.777" starttime="20210313 17:06:27.776"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${mstore_username}</arg>
<arg>${mstore_password}</arg>
</arguments>
<msg timestamp="20210313 17:06:27.779" level="INFO">Logging into '10.10.219.141:22' as 'root'.</msg>
<msg timestamp="20210313 17:06:29.018" level="INFO">Read output: =============================================
welcome!
This setup upgraded for TMO Release of C_4_4_20_4b 
=============================================
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:29.018" starttime="20210313 17:06:27.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mstore_username}" != "root"</arg>
<arg>Run Keywords</arg>
<arg>write</arg>
<arg>sudo bash</arg>
<arg>AND</arg>
<arg>read until</arg>
<arg>${mstore_username}:</arg>
<arg>AND</arg>
<arg>Write</arg>
<arg>${mstore_password}</arg>
<arg>AND</arg>
<arg>Read Until</arg>
<arg>\#</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:29.020" starttime="20210313 17:06:29.019"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>dbm -A --prompt="mysql&gt; "</arg>
</arguments>
<msg timestamp="20210313 17:06:29.026" level="INFO">dbm -A --prompt="mysql&gt; "</msg>
<status status="PASS" endtime="20210313 17:06:29.026" starttime="20210313 17:06:29.020"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<msg timestamp="20210313 17:06:29.063" level="INFO">[0;10;1mWelcome to the MariaDB monitor.  Commands end with ; or \g.
[0;10m[0;10;1mYour MariaDB connection id is 164
Server version: 10.1.16-MariaDB-enterprise MariaDB Enterprise Certified Binary

[0;10m[0;10;1mCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.

[0;10m[0;10;1mType 'help;' or '\h' for help. Type '\c' to clear the current input statement.

[0;10mmysql&gt;</msg>
<status status="PASS" endtime="20210313 17:06:29.063" starttime="20210313 17:06:29.026"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:29.064" starttime="20210313 17:06:27.774"></status>
</kw>
<kw name="login_to_cassandra_db" library="mStore_Generic_resources">
<doc>"login to cassandra"</doc>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${cass_srvr_ip}</arg>
<arg>port=${cass_srvr_sshport}</arg>
<arg>timeout=1 minute</arg>
<arg>alias=cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:29.068" starttime="20210313 17:06:29.066"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${cass_srvr_username}</arg>
<arg>${cass_srvr_password}</arg>
</arguments>
<msg timestamp="20210313 17:06:29.069" level="INFO">Logging into '10.69.15.193:22' as 'root'.</msg>
<msg timestamp="20210313 17:06:33.417" level="INFO">Read output: Last login: Sat Mar 13 17:05:01 UTC 2021 from 10.10.224.173 on pts/0
Last login: Sat Mar 13 17:06:35 2021 from 10.10.224.173
#################################################################
##                                                              #
           ========      SCYLLA DB NODE      =========           
           CLUSTERNAME = Scylla DB Cluster                            
           DCNAME      = DC1                                 
           RACKNAME    = RAC1                               
           OAMIP       = 10.69.15.193                                  
           DBACCESSIP  = 172.16.47.193                             
           DBREPIP     = 172.16.45.193                                
##                                                              #
#################################################################
]0;root@scylla_1:~[root@scylla_1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:33.417" starttime="20210313 17:06:29.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${cass_srvr_username}" != "root"</arg>
<arg>Run Keywords</arg>
<arg>write</arg>
<arg>sudo bash</arg>
<arg>AND</arg>
<arg>read until</arg>
<arg>${cass_srvr_username}:</arg>
<arg>AND</arg>
<arg>Write</arg>
<arg>${cass_srvr_password}</arg>
<arg>AND</arg>
<arg>Read Until</arg>
<arg>\#</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:33.419" starttime="20210313 17:06:33.418"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cqlsh --no-color</arg>
</arguments>
<msg timestamp="20210313 17:06:33.673" level="INFO">cqlsh --no-color</msg>
<status status="PASS" endtime="20210313 17:06:33.674" starttime="20210313 17:06:33.419"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Read Until</arg>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${status1}</var>
<var>${output}</var>
</assign>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<msg timestamp="20210313 17:06:34.662" level="INFO">Connected to Scylla DB Cluster at 10.69.15.193:9042.
[cqlsh 5.0.1 | Cassandra 3.0.8 | CQL spec 3.3.1 | Native protocol v4]
Use HELP for help.
cqlsh&gt;</msg>
<status status="PASS" endtime="20210313 17:06:34.662" starttime="20210313 17:06:33.676"></status>
</kw>
<msg timestamp="20210313 17:06:34.662" level="INFO">${status1} = PASS</msg>
<msg timestamp="20210313 17:06:34.662" level="INFO">${output} = Connected to Scylla DB Cluster at 10.69.15.193:9042.
[cqlsh 5.0.1 | Cassandra 3.0.8 | CQL spec 3.3.1 | Native protocol v4]
Use HELP for help.
cqlsh&gt;</msg>
<status status="PASS" endtime="20210313 17:06:34.663" starttime="20210313 17:06:33.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''FAIL''' in '''${status1}'''</arg>
<arg>try_login_cqlsh</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>PASS</arg>
<arg>None</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${out1}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>PASS</arg>
<arg>None</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:34.665" starttime="20210313 17:06:34.665"></status>
</kw>
<msg timestamp="20210313 17:06:34.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20210313 17:06:34.665" level="INFO">${out1} = None</msg>
<status status="PASS" endtime="20210313 17:06:34.666" starttime="20210313 17:06:34.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>"Failed to login to Cassandra cqlsh ${out1}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:34.667" starttime="20210313 17:06:34.666"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>use ${cass_keyspace};</arg>
</arguments>
<msg timestamp="20210313 17:06:34.928" level="INFO">use rcs_hosted_saurav;</msg>
<status status="PASS" endtime="20210313 17:06:34.929" starttime="20210313 17:06:34.667"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<msg timestamp="20210313 17:06:34.939" level="INFO">cqlsh:rcs_hosted_saurav&gt;</msg>
<status status="PASS" endtime="20210313 17:06:34.939" starttime="20210313 17:06:34.929"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:34.940" starttime="20210313 17:06:29.064"></status>
</kw>
<kw name="CreatemStoreSubscriberSession" library="mStore_Generic_resources">
<arguments>
<arg>mstore_service_port=80</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>url=http://${mStore_ip}:${mstore_service_port}</arg>
</arguments>
<msg timestamp="20210313 17:06:34.943" level="INFO">Creating Session using : alias=mStoreService, url=http://10.10.219.141:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20210313 17:06:34.957" starttime="20210313 17:06:34.942"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:34.958" starttime="20210313 17:06:34.940"></status>
</kw>
<kw name="startPNSserver">
<kw name="StartHttpServer" library="mStore_Generic_resources">
<arguments>
<arg>host=${PNS_SERVER}</arg>
<arg>port=${PNS_SERVICE_PORT}</arg>
</arguments>
<assign>
<var>${PNS_SOCKET_SERVICE}</var>
</assign>
<kw name="Open Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${host}</arg>
<arg>${port}</arg>
</arguments>
<assign>
<var>${socket_server}</var>
</assign>
<msg timestamp="20210313 17:06:34.963" level="INFO">${socket_server} = &lt;socket._socketobject object at 0x7fa45c2862f0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:34.963" starttime="20210313 17:06:34.962"></status>
</kw>
<msg timestamp="20210313 17:06:34.964" level="INFO">${PNS_SOCKET_SERVICE} = &lt;socket._socketobject object at 0x7fa45c2862f0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:34.964" starttime="20210313 17:06:34.959"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:06:34.966" level="INFO">${PNS_SOCKET_SERVICE} = &lt;socket._socketobject object at 0x7fa45c2862f0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:34.966" starttime="20210313 17:06:34.965"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:34.967" starttime="20210313 17:06:34.958"></status>
</kw>
<kw name="get_mStore_NodeID" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_dbm_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:34.970" starttime="20210313 17:06:34.969"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select * from platform;</arg>
</arguments>
<msg timestamp="20210313 17:06:34.976" level="INFO">select * from platform;</msg>
<status status="PASS" endtime="20210313 17:06:34.976" starttime="20210313 17:06:34.970"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<msg timestamp="20210313 17:06:34.989" level="INFO">+-----------+---------+----------+-----------+
| oid_index | name    | fksvcpkg | fkproduct |
+-----------+---------+----------+-----------+
|         0 | Mavenir |        0 |         0 |
+-----------+---------+----------+-----------+
[0;10;1m1 row in set (0.00 sec)
[0;10m[0;10;1m
[0;10mmysql&gt;</msg>
<status status="PASS" endtime="20210313 17:06:34.989" starttime="20210313 17:06:34.977"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select name from platform;</arg>
</arguments>
<msg timestamp="20210313 17:06:34.995" level="INFO">select name from platform;</msg>
<status status="PASS" endtime="20210313 17:06:34.996" starttime="20210313 17:06:34.990"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${name1}</var>
</assign>
<msg timestamp="20210313 17:06:35.002" level="INFO">+---------+
| name    |
+---------+
| Mavenir |
+---------+
[0;10;1m1 row in set (0.00 sec)
[0;10m[0;10;1m
[0;10mmysql&gt;</msg>
<msg timestamp="20210313 17:06:35.003" level="INFO">${name1} = +---------+
| name    |
+---------+
| Mavenir |
+---------+
[0;10;1m1 row in set (0.00 sec)
[0;10m[0;10;1m
[0;10mmysql&gt;</msg>
<status status="PASS" endtime="20210313 17:06:35.003" starttime="20210313 17:06:34.996"></status>
</kw>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${name1}</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${name2}</var>
</assign>
<msg timestamp="20210313 17:06:35.004" level="INFO">${name2} = | Mavenir |</msg>
<status status="PASS" endtime="20210313 17:06:35.005" starttime="20210313 17:06:35.003"></status>
</kw>
<kw name="Strip String" library="String">
<doc>Remove leading and/or trailing whitespaces from the given string.</doc>
<arguments>
<arg>${name2}</arg>
<arg>characters=|${SPACE}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20210313 17:06:35.007" level="INFO">${name} = Mavenir</msg>
<status status="PASS" endtime="20210313 17:06:35.007" starttime="20210313 17:06:35.005"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${MSTORE_NODE_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.024" level="INFO">${MSTORE_NODE_NAME} = Mavenir</msg>
<status status="PASS" endtime="20210313 17:06:35.024" starttime="20210313 17:06:35.007"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:35.025" starttime="20210313 17:06:34.967"></status>
</kw>
<kw name="GenerateUniqueIMDNMsgId" library="Provision">
<assign>
<var>${IMDN_MESSAGE_ID}</var>
</assign>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>8</arg>
<arg>[NUMBERS]abcdef</arg>
</arguments>
<assign>
<var>${str1}</var>
</assign>
<msg timestamp="20210313 17:06:35.028" level="INFO">${str1} = 37857c02</msg>
<status status="PASS" endtime="20210313 17:06:35.029" starttime="20210313 17:06:35.027"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]abcdef</arg>
</arguments>
<assign>
<var>${str2}</var>
</assign>
<msg timestamp="20210313 17:06:35.031" level="INFO">${str2} = 005f</msg>
<status status="PASS" endtime="20210313 17:06:35.031" starttime="20210313 17:06:35.030"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]abcdef</arg>
</arguments>
<assign>
<var>${str3}</var>
</assign>
<msg timestamp="20210313 17:06:35.032" level="INFO">${str3} = 9b17</msg>
<status status="PASS" endtime="20210313 17:06:35.033" starttime="20210313 17:06:35.031"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>4</arg>
<arg>[NUMBERS]abcdef</arg>
</arguments>
<assign>
<var>${str4}</var>
</assign>
<msg timestamp="20210313 17:06:35.034" level="INFO">${str4} = 9322</msg>
<status status="PASS" endtime="20210313 17:06:35.034" starttime="20210313 17:06:35.033"></status>
</kw>
<kw name="Generate Random String" library="String">
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<arguments>
<arg>12</arg>
<arg>[NUMBERS]abcdef</arg>
</arguments>
<assign>
<var>${str5}</var>
</assign>
<msg timestamp="20210313 17:06:35.036" level="INFO">${str5} = b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.036" starttime="20210313 17:06:35.035"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${str1}-${str2}-${str3}-${str4}-${str5}</arg>
</arguments>
<assign>
<var>${imdnMsId}</var>
</assign>
<msg timestamp="20210313 17:06:35.038" level="INFO">${imdnMsId} = 37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.038" starttime="20210313 17:06:35.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${imdnMsId}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.040" level="INFO">37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.040" starttime="20210313 17:06:35.039"></status>
</kw>
<msg timestamp="20210313 17:06:35.041" level="INFO">${IMDN_MESSAGE_ID} = 37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.041" starttime="20210313 17:06:35.026"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.043" level="INFO">${IMDN_MESSAGE_ID} = 37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.043" starttime="20210313 17:06:35.042"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${SUBSCRIBER_ID}_${IMDN_MESSAGE_ID}</arg>
</arguments>
<assign>
<var>${X_IMDN_CORRELATOR}</var>
</assign>
<msg timestamp="20210313 17:06:35.045" level="INFO">${X_IMDN_CORRELATOR} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.045" starttime="20210313 17:06:35.044"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${X_IMDN_CORRELATOR}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.046" level="INFO">${X_IMDN_CORRELATOR} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.047" starttime="20210313 17:06:35.045"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORRELATION_ID}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.048" level="INFO">${CORRELATION_ID} = 37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:35.048" starttime="20210313 17:06:35.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>1=${IMDN_MESSAGE_ID}</arg>
</arguments>
<assign>
<var>${IMDN_MESSAGE_IDS}</var>
</assign>
<msg timestamp="20210313 17:06:35.056" level="INFO">${IMDN_MESSAGE_IDS} = {u'1': u'37857c02-005f-9b17-9322-b8423992923a'}</msg>
<status status="PASS" endtime="20210313 17:06:35.056" starttime="20210313 17:06:35.049"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${IMDN_MESSAGE_IDS}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.058" level="INFO">${IMDN_MESSAGE_IDS} = {u'1': u'37857c02-005f-9b17-9322-b8423992923a'}</msg>
<status status="PASS" endtime="20210313 17:06:35.058" starttime="20210313 17:06:35.057"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:35.059" starttime="20210313 17:06:26.477"></status>
</kw>
<test id="s1-t1" name="DeleteSubscriberAlreadyExists">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:35.065" starttime="20210313 17:06:35.064"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:35.066" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:35.125" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:35.126" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:35.126" starttime="20210313 17:06:35.066"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:35.167" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:06:35.167" starttime="20210313 17:06:35.126"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:35.184" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:35.184" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:35.185" starttime="20210313 17:06:35.168"></status>
</kw>
<msg timestamp="20210313 17:06:35.185" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:35.185" starttime="20210313 17:06:35.063"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.187" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:35.187" starttime="20210313 17:06:35.186"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:35.189" starttime="20210313 17:06:35.188"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:06:35.190" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:06:35.246" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:35.247" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:35.247" starttime="20210313 17:06:35.190"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:06:35.249" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:06:35.370" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:35.370" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:35.370" starttime="20210313 17:06:35.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.372" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:35.372" starttime="20210313 17:06:35.371"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.374" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:35.374" starttime="20210313 17:06:35.373"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:35.376" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:06:35.376" starttime="20210313 17:06:35.375"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:35.377" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:06:35.378" starttime="20210313 17:06:35.376"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:35.414" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:06:35.414" starttime="20210313 17:06:35.378"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:35.430" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:35.430" starttime="20210313 17:06:35.415"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:35.444" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:06:35.444" starttime="20210313 17:06:35.431"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:35.453" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:35.453" starttime="20210313 17:06:35.445"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:35.454" starttime="20210313 17:06:35.187"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:35.458" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:35.458" starttime="20210313 17:06:35.457"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:35.460" starttime="20210313 17:06:35.459"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:35.461" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:35.532" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:35.532" starttime="20210313 17:06:35.461"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:35.579" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"DeleteS ubscriberAlreadyExists"</msg>
<status status="PASS" endtime="20210313 17:06:35.580" starttime="20210313 17:06:35.533"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:35.596" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:35.597" starttime="20210313 17:06:35.580"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:35.611" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"DeleteSubscriberAlreadyExists"/"DeleteSubscriberAlready Exists".log &amp;</msg>
<status status="PASS" endtime="20210313 17:06:35.611" starttime="20210313 17:06:35.597"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:35.623" level="INFO">[1] 3283
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:35.623" starttime="20210313 17:06:35.611"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:35.623" starttime="20210313 17:06:35.454"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:35.627" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:35.627" starttime="20210313 17:06:35.626"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:35.628" starttime="20210313 17:06:35.627"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:35.629" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:35.718" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:35.718" starttime="20210313 17:06:35.628"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:35.761" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"DeleteS ubscriberAlreadyExists"</msg>
<status status="PASS" endtime="20210313 17:06:35.762" starttime="20210313 17:06:35.719"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:35.777" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:35.777" starttime="20210313 17:06:35.762"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:35.795" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"DeleteSubscriberAlreadyExists"/"DeleteSubscriberAlreadyExists".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:06:35.795" starttime="20210313 17:06:35.778"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:35.803" level="INFO">[2] 3310
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:35.803" starttime="20210313 17:06:35.796"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:35.804" starttime="20210313 17:06:35.624"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:35.804" starttime="20210313 17:06:35.062"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>DeleteSubscriber_SOAP</arg>
<arg>${SUBSCRIBER_ID}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${delete_response}</var>
</assign>
<kw name="DeleteSubscriber_SOAP" library="Provision">
<arguments>
<arg>${SUBSCRIBER_ID}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${userid}</arg>
</arguments>
<assign>
<var>${USER_TO_DELETE}</var>
</assign>
<msg timestamp="20210313 17:06:35.808" level="INFO">${USER_TO_DELETE} = 8888888880</msg>
<status status="PASS" endtime="20210313 17:06:35.809" starttime="20210313 17:06:35.807"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${Obj_File}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:35.810" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/DeleteSubscriber.xml"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/DeleteSubscriber.xml&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:06:35.811" level="INFO">${data} = &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sub="http://www.mavenir.com/mStore/services/subscriber" xmlns:shar="http://www.mavenir.com/mStore/services/shareddatat...</msg>
<status status="PASS" endtime="20210313 17:06:35.811" starttime="20210313 17:06:35.809"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:35.812" level="INFO">${data} = &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sub="http://www.mavenir.com/mStore/services/subscriber" xmlns:shar="http://www.mavenir.com/mStore/services/shareddatat...</msg>
<status status="PASS" endtime="20210313 17:06:35.812" starttime="20210313 17:06:35.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:06:35.814" level="INFO">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sub="http://www.mavenir.com/mStore/services/subscriber" xmlns:shar="http://www.mavenir.com/mStore/services/shareddatatypes"&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
      &lt;sub:DeleteSubscriber&gt;
         &lt;UserInfo&gt;
&lt;shar:UserId&gt;mstoreuser&lt;/shar:UserId&gt;
           &lt;shar:Password&gt;mstorepassword&lt;/shar:Password&gt;
         &lt;/UserInfo&gt;
         &lt;SubscriberDetails&gt;
 &lt;Identifier&gt;8888888880&lt;/Identifier&gt;
 &lt;IdentifierType&gt;MSISDN&lt;/IdentifierType&gt;
         &lt;/SubscriberDetails&gt;
         &lt;SourceSystem&gt;SC&lt;/SourceSystem&gt; 
      &lt;/sub:DeleteSubscriber&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;

</msg>
<status status="PASS" endtime="20210313 17:06:35.814" starttime="20210313 17:06:35.813"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${provision_uri}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:06:35.837" level="INFO">Starting new HTTP connection (1): 10.10.219.141</msg>
<msg timestamp="20210313 17:06:36.978" level="INFO">Post Request using : alias=mStoreService, uri=/SubscriberProvisioningService/MStoreProvisionServlet, data=&lt;text/xml;charset=UTF-8&gt;, headers={'Content-Type': 'text/xml;charset=UTF-8', 'Expect': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:06:36.979" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:36.979" starttime="20210313 17:06:35.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:06:36.980" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:06:36.981" starttime="20210313 17:06:36.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:06:36.982" level="INFO">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://www.mavenir.com/mStore/services/shareddatatypes" xmlns:ns1="http://www.mavenir.com/mStore/services/subscriber" xmlns:ns3="urn:3gpp:gba:GBAService:2010-02"&gt;&lt;SOAP-ENV:Header&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;ns1:DeleteSubscriberResponse&gt;&lt;Status&gt;SUCCESS&lt;/Status&gt;&lt;/ns1:DeleteSubscriberResponse&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;
</msg>
<status status="PASS" endtime="20210313 17:06:36.982" starttime="20210313 17:06:36.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:36.983" level="INFO">{'date': 'Sun, 14 Mar 2021 00:00:35 GMT', 'content-length': '621', 'content-type': 'text/xml', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:06:36.984" starttime="20210313 17:06:36.983"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:36.984" starttime="20210313 17:06:35.805"></status>
</kw>
<msg timestamp="20210313 17:06:36.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20210313 17:06:36.985" level="INFO">${delete_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:36.985" starttime="20210313 17:06:35.805"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateDeleteSubscriberResponse</arg>
<arg>${delete_response}</arg>
</arguments>
<kw name="ValidateDeleteSubscriberResponse" library="Provision">
<arguments>
<arg>${delete_response}</arg>
</arguments>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${response_code}</arg>
</arguments>
<assign>
<var>${response_code}</var>
</assign>
<msg timestamp="20210313 17:06:36.988" level="INFO">${response_code} = 200</msg>
<status status="PASS" endtime="20210313 17:06:36.988" starttime="20210313 17:06:36.987"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>${response_code}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:36.990" starttime="20210313 17:06:36.989"></status>
</kw>
<kw name="Parse Xml" library="XML">
<doc>Parses the given XML file or string into an element structure.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:36.991" level="INFO">${data} = &lt;Element 'Envelope' at 0x7fa45c2a2780&gt;</msg>
<status status="PASS" endtime="20210313 17:06:36.992" starttime="20210313 17:06:36.990"></status>
</kw>
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${data}</arg>
<arg>Body</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210313 17:06:36.993" level="INFO">${body} = &lt;Element 'Body' at 0x7fa45c2a2180&gt;</msg>
<status status="PASS" endtime="20210313 17:06:36.993" starttime="20210313 17:06:36.992"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${data}</arg>
<arg>Body</arg>
</arguments>
<assign>
<var>${statusText}</var>
</assign>
<msg timestamp="20210313 17:06:36.994" level="INFO">${statusText} = SUCCESS</msg>
<status status="PASS" endtime="20210313 17:06:36.994" starttime="20210313 17:06:36.993"></status>
</kw>
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${body}</arg>
<arg>DeleteSubscriberResponse</arg>
</arguments>
<assign>
<var>${child1}</var>
</assign>
<msg timestamp="20210313 17:06:36.995" level="INFO">${child1} = &lt;Element 'DeleteSubscriberResponse' at 0x7fa45c2a27e0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:36.996" starttime="20210313 17:06:36.995"></status>
</kw>
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${child1}</arg>
<arg>Status</arg>
</arguments>
<assign>
<var>${child3}</var>
</assign>
<msg timestamp="20210313 17:06:36.997" level="INFO">${child3} = &lt;Element 'Status' at 0x7fa45c2a2870&gt;</msg>
<status status="PASS" endtime="20210313 17:06:36.997" starttime="20210313 17:06:36.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${child3.text}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:36.998" starttime="20210313 17:06:36.997"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:36.999" starttime="20210313 17:06:36.986"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:36.999" starttime="20210313 17:06:36.985"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateSoapResponseHeaders</arg>
<arg>response=${delete_response}</arg>
</arguments>
<kw name="ValidateSoapResponseHeaders" library="Provision">
<arguments>
<arg>response=${delete_response}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:37.002" level="INFO">{'date': 'Sun, 14 Mar 2021 00:00:35 GMT', 'content-length': '621', 'content-type': 'text/xml', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:06:37.002" starttime="20210313 17:06:37.001"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<assign>
<var>${content_length}</var>
</assign>
<msg timestamp="20210313 17:06:37.006" level="INFO">Length is 621</msg>
<msg timestamp="20210313 17:06:37.006" level="INFO">${content_length} = 621</msg>
<status status="PASS" endtime="20210313 17:06:37.006" starttime="20210313 17:06:37.003"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${response.headers['date']}</arg>
<arg>[a-zA-Z0-9 :,]+</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${response.headers['date']}</arg>
<arg>[a-zA-Z0-9 :,]+</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:37.010" starttime="20210313 17:06:37.008"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:37.010" starttime="20210313 17:06:37.007"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${response.headers['content-length']}</arg>
<arg>${content_length}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.headers['content-length']}</arg>
<arg>${content_length}</arg>
</arguments>
<msg timestamp="20210313 17:06:37.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:37.013" starttime="20210313 17:06:37.011"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:37.013" starttime="20210313 17:06:37.010"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${response.headers['content-type']}</arg>
<arg>${content_type}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.headers['content-type']}</arg>
<arg>${content_type}</arg>
</arguments>
<msg timestamp="20210313 17:06:37.015" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:37.016" starttime="20210313 17:06:37.014"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:37.016" starttime="20210313 17:06:37.013"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${response.headers['server']}</arg>
<arg>${RESPONSE_HEADER_SERVER_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.headers['server']}</arg>
<arg>${RESPONSE_HEADER_SERVER_NAME}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:37.018" starttime="20210313 17:06:37.017"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:37.019" starttime="20210313 17:06:37.016"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:37.019" starttime="20210313 17:06:37.000"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:37.019" starttime="20210313 17:06:36.999"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateSubscriberCassandraUsersTableAfterDelete</arg>
</arguments>
<kw name="ValidateSubscriberCassandraUsersTableAfterDelete" library="Provision">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:37.022" starttime="20210313 17:06:37.021"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON * FROM users WHERE userid='${userId}';</arg>
</arguments>
<msg timestamp="20210313 17:06:37.533" level="INFO">SELECT JSON * FROM users WHERE userid='8888888880';</msg>
<status status="PASS" endtime="20210313 17:06:37.534" starttime="20210313 17:06:37.022"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${users_out}</var>
</assign>
<msg timestamp="20210313 17:06:37.538" level="INFO">[json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:37.538" level="INFO">${users_out} = 
 [json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<status status="PASS" endtime="20210313 17:06:37.538" starttime="20210313 17:06:37.535"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${users_out}</arg>
<arg>(0 rows)</arg>
<arg>msg="${userId} not deleted Successfully"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:37.539" starttime="20210313 17:06:37.538"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON * FROM userfolderkeymap WHERE userid='${userId}';</arg>
</arguments>
<msg timestamp="20210313 17:06:38.058" level="INFO">SELECT JSON * FROM userfolderkeymap WHERE userid='88888 88880';</msg>
<status status="PASS" endtime="20210313 17:06:38.058" starttime="20210313 17:06:37.540"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${users_out}</var>
</assign>
<msg timestamp="20210313 17:06:38.062" level="INFO">[json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:38.062" level="INFO">${users_out} = 
 [json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<status status="PASS" endtime="20210313 17:06:38.063" starttime="20210313 17:06:38.059"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${users_out}</arg>
<arg>(0 rows)</arg>
<arg>msg="${userId} not deleted Successfully"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:38.064" starttime="20210313 17:06:38.063"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON * FROM folder WHERE userid='${userId}';</arg>
</arguments>
<msg timestamp="20210313 17:06:38.579" level="INFO">SELECT JSON * FROM folder WHERE userid='8888888880';</msg>
<status status="PASS" endtime="20210313 17:06:38.580" starttime="20210313 17:06:38.065"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${users_out}</var>
</assign>
<msg timestamp="20210313 17:06:38.585" level="INFO">[json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:38.586" level="INFO">${users_out} = 
 [json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<status status="PASS" endtime="20210313 17:06:38.586" starttime="20210313 17:06:38.581"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${users_out}</arg>
<arg>(0 rows)</arg>
<arg>msg="${userId} not deleted Successfully"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:38.588" starttime="20210313 17:06:38.586"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON * FROM messages WHERE userid='${userId}';</arg>
</arguments>
<msg timestamp="20210313 17:06:38.870" level="INFO">SELECT JSON * FROM messages WHERE userid='8888888880';</msg>
<status status="PASS" endtime="20210313 17:06:38.871" starttime="20210313 17:06:38.588"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${users_out}</var>
</assign>
<msg timestamp="20210313 17:06:38.878" level="INFO">[json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:38.878" level="INFO">${users_out} = 
 [json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<status status="PASS" endtime="20210313 17:06:38.878" starttime="20210313 17:06:38.871"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${users_out}</arg>
<arg>(0 rows)</arg>
<arg>msg="${userId} not deleted Successfully"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:38.880" starttime="20210313 17:06:38.879"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON * FROM nms_subscriptions_mapping WHERE userid='${userId}';</arg>
</arguments>
<msg timestamp="20210313 17:06:39.200" level="INFO">SELECT JSON * FROM nms_subscriptions_mapping WHERE user id='8888888880';</msg>
<status status="PASS" endtime="20210313 17:06:39.201" starttime="20210313 17:06:38.881"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${users_out}</var>
</assign>
<msg timestamp="20210313 17:06:39.210" level="INFO">[json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:39.210" level="INFO">${users_out} = 
 [json]
--------

(0 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<status status="PASS" endtime="20210313 17:06:39.211" starttime="20210313 17:06:39.202"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${users_out}</arg>
<arg>(0 rows)</arg>
<arg>msg="${userId} not deleted Successfully"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.213" starttime="20210313 17:06:39.211"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:39.213" starttime="20210313 17:06:37.020"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:39.213" starttime="20210313 17:06:37.020"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.217" starttime="20210313 17:06:39.217"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:39.218" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:39.287" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:39.287" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:39.287" starttime="20210313 17:06:39.218"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:39.291" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:06:39.291" starttime="20210313 17:06:39.288"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:39.350" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:39.351" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:39.351" starttime="20210313 17:06:39.292"></status>
</kw>
<msg timestamp="20210313 17:06:39.351" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:39.351" starttime="20210313 17:06:39.215"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.354" starttime="20210313 17:06:39.353"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:39.355" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:39.433" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:39.433" starttime="20210313 17:06:39.354"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:39.434" starttime="20210313 17:06:39.352"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.437" starttime="20210313 17:06:39.436"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:39.438" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:39.581" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:39.581" starttime="20210313 17:06:39.437"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:06:39.584" level="INFO">10472 packets captured</msg>
<status status="PASS" endtime="20210313 17:06:39.584" starttime="20210313 17:06:39.582"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:39.641" level="INFO">21136 packets received by filter
392 packets dropped by kernel
date
Sun Mar 14 00:00:38 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"DeleteSubscriberAlreadyExists"/"DeleteSubscriberAlreadyExists".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"DeleteSubscriberAlreadyExists"/"DeleteSubscriberAlreadyExists".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:39.641" starttime="20210313 17:06:39.585"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:39.642" starttime="20210313 17:06:39.434"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.644" starttime="20210313 17:06:39.643"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:39.645" starttime="20210313 17:06:39.642"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:06:39.668" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:06:39.668" starttime="20210313 17:06:39.646"></status>
</kw>
<msg timestamp="20210313 17:06:39.669" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:06:39.669" starttime="20210313 17:06:39.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.670" starttime="20210313 17:06:39.669"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:39.671" starttime="20210313 17:06:39.214"></status>
</kw>
<doc>"Delete Subscriber If already Exists"</doc>
<tags>
<tag>Critical</tag>
<tag>Provision</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:06:39.671" critical="yes" starttime="20210313 17:06:35.059"></status>
</test>
<test id="s1-t2" name="AddSubscriber_ValidateResponse">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.677" starttime="20210313 17:06:39.676"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:39.678" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:39.745" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:39.745" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:39.746" starttime="20210313 17:06:39.677"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:39.783" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:06:39.783" starttime="20210313 17:06:39.746"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:39.803" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:39.804" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:39.804" starttime="20210313 17:06:39.784"></status>
</kw>
<msg timestamp="20210313 17:06:39.804" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:39.805" starttime="20210313 17:06:39.675"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:06:39.806" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:39.806" starttime="20210313 17:06:39.805"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:39.809" starttime="20210313 17:06:39.808"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:06:39.810" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:06:39.868" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:39.869" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:39.869" starttime="20210313 17:06:39.809"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:06:39.871" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:06:40.001" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:40.001" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:40.001" starttime="20210313 17:06:39.870"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:40.003" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:40.003" starttime="20210313 17:06:40.002"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:40.004" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:40.005" starttime="20210313 17:06:40.004"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:40.006" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:06:40.006" starttime="20210313 17:06:40.005"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:40.008" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:06:40.009" starttime="20210313 17:06:40.007"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:40.037" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:06:40.037" starttime="20210313 17:06:40.009"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:40.058" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:40.059" starttime="20210313 17:06:40.038"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:40.065" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:06:40.065" starttime="20210313 17:06:40.059"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:40.081" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:40.082" starttime="20210313 17:06:40.066"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:40.082" starttime="20210313 17:06:39.806"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:40.087" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:40.087" starttime="20210313 17:06:40.084"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:40.089" starttime="20210313 17:06:40.088"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:40.090" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:40.168" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:40.168" starttime="20210313 17:06:40.089"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:40.210" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"AddSubs criber_ValidateResponse"</msg>
<status status="PASS" endtime="20210313 17:06:40.210" starttime="20210313 17:06:40.169"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:40.226" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:40.227" starttime="20210313 17:06:40.211"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:40.244" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"AddSubscriber_ValidateResponse"/"AddSubscriber_Validate Response".log &amp;</msg>
<status status="PASS" endtime="20210313 17:06:40.245" starttime="20210313 17:06:40.227"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:40.251" level="INFO">[1] 3473
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:40.252" starttime="20210313 17:06:40.246"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:40.252" starttime="20210313 17:06:40.082"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:40.257" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:40.257" starttime="20210313 17:06:40.255"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:40.259" starttime="20210313 17:06:40.257"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:40.260" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:40.348" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:40.349" starttime="20210313 17:06:40.259"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:40.385" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"AddSubs criber_ValidateResponse"</msg>
<status status="PASS" endtime="20210313 17:06:40.386" starttime="20210313 17:06:40.350"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:40.409" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:40.409" starttime="20210313 17:06:40.386"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:40.422" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"AddSubscriber_ValidateResponse"/"AddSubscriber_ValidateResponse".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:06:40.423" starttime="20210313 17:06:40.410"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:40.435" level="INFO">[2] 3500
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:40.435" starttime="20210313 17:06:40.423"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:40.435" starttime="20210313 17:06:40.253"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:40.436" starttime="20210313 17:06:39.674"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>AddSubscrber_SOAP</arg>
</arguments>
<assign>
<var>${add_response}</var>
</assign>
<kw name="AddSubscrber_SOAP" library="Provision">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${userid}</arg>
</arguments>
<assign>
<var>${USER_TO_PROVISION}</var>
</assign>
<msg timestamp="20210313 17:06:40.441" level="INFO">${USER_TO_PROVISION} = 8888888880</msg>
<status status="PASS" endtime="20210313 17:06:40.441" starttime="20210313 17:06:40.439"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cosid}</arg>
</arguments>
<assign>
<var>${COSID_TO_PROVISION}</var>
</assign>
<msg timestamp="20210313 17:06:40.442" level="INFO">${COSID_TO_PROVISION} = 10</msg>
<status status="PASS" endtime="20210313 17:06:40.442" starttime="20210313 17:06:40.441"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${Obj_File}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:40.443" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/AddSubscriber.xml"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/AddSubscriber.xml&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:06:40.444" level="INFO">${data} = &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:shar="http://www.mavenir.com/mStore/services/shareddatatypes" xmlns:sub="http:/...</msg>
<status status="PASS" endtime="20210313 17:06:40.445" starttime="20210313 17:06:40.443"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:40.446" level="INFO">${data} = &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:shar="http://www.mavenir.com/mStore/services/shareddatatypes" xmlns:sub="http:/...</msg>
<status status="PASS" endtime="20210313 17:06:40.447" starttime="20210313 17:06:40.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:06:40.448" level="INFO">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:shar="http://www.mavenir.com/mStore/services/shareddatatypes" xmlns:sub="http://www.mavenir.com/mStore/services/subscriber"&gt;
   &lt;soapenv:Header /&gt;
   &lt;soapenv:Body&gt;
      &lt;sub:AddSubscriber&gt;
         &lt;UserInfo&gt;
            &lt;shar:UserId&gt;mstoreuser&lt;/shar:UserId&gt;
            &lt;shar:Password&gt;mstorepassword&lt;/shar:Password&gt;
         &lt;/UserInfo&gt;
         &lt;SubscriberDetails&gt;
            &lt;Identifier&gt;8888888880&lt;/Identifier&gt;
            &lt;IdentifierType&gt;MSISDN&lt;/IdentifierType&gt;
            &lt;!--Optional:--&gt;
            &lt;SubscriberMSTRData&gt;
               &lt;!--Optional:--&gt;
               &lt;COSID&gt;10&lt;/COSID&gt;
               &lt;!--Optional:--&gt;
               &lt;DeletedMsgAction&gt;Automatic&lt;/DeletedMsgAction&gt;
            &lt;/SubscriberMSTRData&gt;
         &lt;/SubscriberDetails&gt;
         &lt;SourceSystem&gt;SC&lt;/SourceSystem&gt;
      &lt;/sub:AddSubscriber&gt;
   &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;

</msg>
<status status="PASS" endtime="20210313 17:06:40.448" starttime="20210313 17:06:40.447"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${provision_uri}</arg>
<arg>headers=${headers}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:06:41.116" level="INFO">Post Request using : alias=mStoreService, uri=/SubscriberProvisioningService/MStoreProvisionServlet, data=&lt;text/xml;charset=UTF-8&gt;, headers={'Content-Type': 'text/xml;charset=UTF-8', 'Expect': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:06:41.116" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.117" starttime="20210313 17:06:40.449"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.118" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:06:41.118" starttime="20210313 17:06:41.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.120" level="INFO">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://www.mavenir.com/mStore/services/shareddatatypes" xmlns:ns1="http://www.mavenir.com/mStore/services/subscriber" xmlns:ns3="urn:3gpp:gba:GBAService:2010-02"&gt;&lt;SOAP-ENV:Header&gt;&lt;/SOAP-ENV:Header&gt;&lt;SOAP-ENV:Body&gt;&lt;ns1:AddSubscriberResponse&gt;&lt;AddStatus&gt;&lt;Status&gt;SUCCESS&lt;/Status&gt;&lt;/AddStatus&gt;&lt;/ns1:AddSubscriberResponse&gt;&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;
</msg>
<status status="PASS" endtime="20210313 17:06:41.120" starttime="20210313 17:06:41.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.121" level="INFO">{'date': 'Sun, 14 Mar 2021 00:00:39 GMT', 'content-length': '638', 'content-type': 'text/xml', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:06:41.121" starttime="20210313 17:06:41.120"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.122" starttime="20210313 17:06:40.437"></status>
</kw>
<msg timestamp="20210313 17:06:41.122" level="INFO">${add_response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.122" starttime="20210313 17:06:40.437"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateAddSubscriberResponse</arg>
<arg>response=${add_response}</arg>
</arguments>
<kw name="ValidateAddSubscriberResponse" library="Provision">
<arguments>
<arg>response=${add_response}</arg>
</arguments>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${response_code}</arg>
</arguments>
<assign>
<var>${response_code}</var>
</assign>
<msg timestamp="20210313 17:06:41.126" level="INFO">${response_code} = 200</msg>
<status status="PASS" endtime="20210313 17:06:41.126" starttime="20210313 17:06:41.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>${response_code}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.127" starttime="20210313 17:06:41.126"></status>
</kw>
<kw name="Parse Xml" library="XML">
<doc>Parses the given XML file or string into an element structure.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:41.129" level="INFO">${data} = &lt;Element 'Envelope' at 0x7fa45c2a26c0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.129" starttime="20210313 17:06:41.128"></status>
</kw>
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${data}</arg>
<arg>Body</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210313 17:06:41.130" level="INFO">${body} = &lt;Element 'Body' at 0x7fa45c2a2ea0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.130" starttime="20210313 17:06:41.129"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${data}</arg>
<arg>Body</arg>
</arguments>
<assign>
<var>${statusText}</var>
</assign>
<msg timestamp="20210313 17:06:41.132" level="INFO">${statusText} = SUCCESS</msg>
<status status="PASS" endtime="20210313 17:06:41.132" starttime="20210313 17:06:41.131"></status>
</kw>
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${body}</arg>
<arg>AddSubscriberResponse</arg>
</arguments>
<assign>
<var>${child1}</var>
</assign>
<msg timestamp="20210313 17:06:41.133" level="INFO">${child1} = &lt;Element 'AddSubscriberResponse' at 0x7fa45c2a2e70&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.133" starttime="20210313 17:06:41.132"></status>
</kw>
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${child1}</arg>
<arg>AddStatus</arg>
</arguments>
<assign>
<var>${child2}</var>
</assign>
<msg timestamp="20210313 17:06:41.134" level="INFO">${child2} = &lt;Element 'AddStatus' at 0x7fa45c2a2f00&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.134" starttime="20210313 17:06:41.133"></status>
</kw>
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${child2}</arg>
<arg>Status</arg>
</arguments>
<assign>
<var>${child3}</var>
</assign>
<msg timestamp="20210313 17:06:41.136" level="INFO">${child3} = &lt;Element 'Status' at 0x7fa45c2a2fc0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.136" starttime="20210313 17:06:41.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${child3.text}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.137" starttime="20210313 17:06:41.136"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.138" starttime="20210313 17:06:41.123"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.138" starttime="20210313 17:06:41.123"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateSoapResponseHeaders</arg>
<arg>response=${add_response}</arg>
</arguments>
<kw name="ValidateSoapResponseHeaders" library="Provision">
<arguments>
<arg>response=${add_response}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.142" level="INFO">{'date': 'Sun, 14 Mar 2021 00:00:39 GMT', 'content-length': '638', 'content-type': 'text/xml', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:06:41.142" starttime="20210313 17:06:41.141"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<assign>
<var>${content_length}</var>
</assign>
<msg timestamp="20210313 17:06:41.143" level="INFO">Length is 638</msg>
<msg timestamp="20210313 17:06:41.144" level="INFO">${content_length} = 638</msg>
<status status="PASS" endtime="20210313 17:06:41.144" starttime="20210313 17:06:41.142"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${response.headers['date']}</arg>
<arg>[a-zA-Z0-9 :,]+</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${response.headers['date']}</arg>
<arg>[a-zA-Z0-9 :,]+</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.146" starttime="20210313 17:06:41.145"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.146" starttime="20210313 17:06:41.144"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${response.headers['content-length']}</arg>
<arg>${content_length}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.headers['content-length']}</arg>
<arg>${content_length}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.148" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.149" starttime="20210313 17:06:41.147"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.149" starttime="20210313 17:06:41.147"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${response.headers['content-type']}</arg>
<arg>${content_type}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.headers['content-type']}</arg>
<arg>${content_type}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.151" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.151" starttime="20210313 17:06:41.150"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.151" starttime="20210313 17:06:41.149"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${response.headers['server']}</arg>
<arg>${RESPONSE_HEADER_SERVER_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.headers['server']}</arg>
<arg>${RESPONSE_HEADER_SERVER_NAME}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.154" starttime="20210313 17:06:41.153"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.154" starttime="20210313 17:06:41.152"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.155" starttime="20210313 17:06:41.139"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.155" starttime="20210313 17:06:41.138"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>GetNumberFolderPathfromClassofService</arg>
</arguments>
<assign>
<var>${listOfFolders}</var>
</assign>
<kw name="GetNumberFolderPathfromClassofService" library="Provision">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_dbm_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.158" starttime="20210313 17:06:41.158"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select profileXml from ClassOfService where profileXml like '%&lt;COSId&gt;${CosId}&lt;/COSId&gt;%' \\G;</arg>
</arguments>
<msg timestamp="20210313 17:06:41.167" level="INFO">select profileXml from ClassOfService where profileXml like '%&lt;COSId&gt;10&lt;/ COSId&gt;%' \G;</msg>
<status status="PASS" endtime="20210313 17:06:41.167" starttime="20210313 17:06:41.159"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>mysql\&gt;</arg>
</arguments>
<assign>
<var>${profileXml}</var>
</assign>
<msg timestamp="20210313 17:06:41.364" level="INFO">*************************** 1. row ***************************
profileXml: &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;cos version="1.0"&gt;
	&lt;PublicIdentifiers&gt;
		&lt;ProfileName&gt;Cos&lt;/ProfileName&gt;
	&lt;/PublicIdentifiers&gt;
	&lt;RepositoryData&gt;
		&lt;ServiceIndication&gt;GLOBALPROFILE&lt;/ServiceIndication&gt;
		&lt;SequenceNumber&gt;0&lt;/SequenceNumber&gt;
		&lt;ServiceData&gt;
			&lt;COSId&gt;10&lt;/COSId&gt;
			&lt;COSProfile&gt;
				&lt;defaultMailboxQuota&gt;2147462143&lt;/defaultMailboxQuota&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;x-rcs&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore&lt;/path&gt;
							&lt;id&gt;fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;pager-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-Chat&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-PM&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-Chat-Session&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-Chat-GSO&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;multimedia-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-LM&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-FT&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-FT-Session&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-FT-GSO&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;80&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;voice-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;30&lt;/newMsgTTL&gt;
							&lt;savedMsgTTL&gt;30&lt;/savedMsgTTL&gt;
							&lt;path&gt;VV-Mail/Inbox&lt;/path&gt;
							&lt;id&gt;27a29814-dd8f-43ee-b768-19af98bf1d07&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;8&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;x-voice-grtng&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;0&lt;/newMsgTTL&gt;
							&lt;path&gt;VV-Mail/Greetings&lt;/path&gt;
							&lt;id&gt;c1a7c823-fdd1-4857-8d44-b315444d2a83&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;2&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;path&gt;Deleted&lt;/path&gt;
							&lt;id&gt;712e8f97-cd3a-434f-b98f-1c4f7241a571&lt;/id&gt;
							&lt;delMsgTTL&gt;30&lt;/delMsgTTL&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;1&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;fax-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;30&lt;/newMsgTTL&gt;
						        &lt;savedMsgTTL&gt;30&lt;/savedMsgTTL&gt;
							&lt;path&gt;Media/Fax&lt;/path&gt;
							&lt;id&gt;338b8af7-cb27-4ca9-aa94-99f480feceda&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-IVR-Greeting&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;0&lt;/newMsgTTL&gt;
							&lt;path&gt;Media/IVR&lt;/path&gt;
							&lt;id&gt;1deac365-0528-47f5-bea3-bfb3391cedec&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;6&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-Call-History&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;CallHistory&lt;/path&gt;
							&lt;id&gt;c65f2cff-67eb-4ca1-a5e0-68f2066b20af&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;3&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;isVmSub&gt;false&lt;/isVmSub&gt;
				&lt;phone2Sub&gt;true&lt;/phone2Sub&gt;
				&lt;VVMEnabled&gt;true&lt;/VVMEnabled&gt;
				&lt;v2tEnabled&gt;false&lt;/v2tEnabled&gt;
			&lt;/COSProfile&gt;
		&lt;/ServiceData&gt;
	&lt;/RepositoryData&gt;
&lt;/cos&gt;
[0;10;1m1 row in set (0.00 sec)
[0;10m[0;10;1m
ERROR: No query specified

[0;10m[0;10;7m[0;10mmysql&gt;</msg>
<msg timestamp="20210313 17:06:41.366" level="INFO">${profileXml} = *************************** 1. row ***************************
profileXml: &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;cos version="1.0"&gt;
	&lt;PublicIdentifiers&gt;
		&lt;ProfileName&gt;Cos&lt;/ProfileName&gt;
	&lt;/Publ...</msg>
<status status="PASS" endtime="20210313 17:06:41.366" starttime="20210313 17:06:41.169"></status>
</kw>
<kw name="Fetch From Right" library="String">
<doc>Returns contents of the ``string`` after the last occurrence of ``marker``.</doc>
<arguments>
<arg>${profileXml}</arg>
<arg>profileXml:</arg>
</arguments>
<assign>
<var>${profileXml}</var>
</assign>
<msg timestamp="20210313 17:06:41.367" level="INFO">${profileXml} =  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;cos version="1.0"&gt;
	&lt;PublicIdentifiers&gt;
		&lt;ProfileName&gt;Cos&lt;/ProfileName&gt;
	&lt;/PublicIdentifiers&gt;
	&lt;RepositoryData&gt;
		&lt;ServiceIndication&gt;GLOBALPROFILE&lt;/Serv...</msg>
<status status="PASS" endtime="20210313 17:06:41.367" starttime="20210313 17:06:41.366"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${profileXml}</arg>
<arg>&lt;/cos&gt;</arg>
</arguments>
<assign>
<var>${profileXml}</var>
</assign>
<msg timestamp="20210313 17:06:41.369" level="INFO">${profileXml} =  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;cos version="1.0"&gt;
	&lt;PublicIdentifiers&gt;
		&lt;ProfileName&gt;Cos&lt;/ProfileName&gt;
	&lt;/PublicIdentifiers&gt;
	&lt;RepositoryData&gt;
		&lt;ServiceIndication&gt;GLOBALPROFILE&lt;/Serv...</msg>
<status status="PASS" endtime="20210313 17:06:41.369" starttime="20210313 17:06:41.368"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${profileXml}&lt;/cos&gt;</arg>
</arguments>
<assign>
<var>${profileXml}</var>
</assign>
<msg timestamp="20210313 17:06:41.371" level="INFO">${profileXml} =  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;cos version="1.0"&gt;
	&lt;PublicIdentifiers&gt;
		&lt;ProfileName&gt;Cos&lt;/ProfileName&gt;
	&lt;/PublicIdentifiers&gt;
	&lt;RepositoryData&gt;
		&lt;ServiceIndication&gt;GLOBALPROFILE&lt;/Serv...</msg>
<status status="PASS" endtime="20210313 17:06:41.371" starttime="20210313 17:06:41.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${profileXml}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.372" level="INFO"> &lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;cos version="1.0"&gt;
	&lt;PublicIdentifiers&gt;
		&lt;ProfileName&gt;Cos&lt;/ProfileName&gt;
	&lt;/PublicIdentifiers&gt;
	&lt;RepositoryData&gt;
		&lt;ServiceIndication&gt;GLOBALPROFILE&lt;/ServiceIndication&gt;
		&lt;SequenceNumber&gt;0&lt;/SequenceNumber&gt;
		&lt;ServiceData&gt;
			&lt;COSId&gt;10&lt;/COSId&gt;
			&lt;COSProfile&gt;
				&lt;defaultMailboxQuota&gt;2147462143&lt;/defaultMailboxQuota&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;x-rcs&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore&lt;/path&gt;
							&lt;id&gt;fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;pager-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-Chat&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-PM&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-Chat-Session&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-Chat-GSO&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/Chat&lt;/path&gt;
							&lt;id&gt;97d38f52-bed0-4046-8784-bb110e3b0ea3&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;multimedia-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-LM&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-FT&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-FT-Session&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-RCS-FT-GSO&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;3&lt;/newMsgTTL&gt;
							&lt;path&gt;RCSMessageStore/FT&lt;/path&gt;
							&lt;id&gt;4b6ff8a1-df89-4c59-9ebf-4d73f95540d4&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;80&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;voice-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;30&lt;/newMsgTTL&gt;
							&lt;savedMsgTTL&gt;30&lt;/savedMsgTTL&gt;
							&lt;path&gt;VV-Mail/Inbox&lt;/path&gt;
							&lt;id&gt;27a29814-dd8f-43ee-b768-19af98bf1d07&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;8&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;x-voice-grtng&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;0&lt;/newMsgTTL&gt;
							&lt;path&gt;VV-Mail/Greetings&lt;/path&gt;
							&lt;id&gt;c1a7c823-fdd1-4857-8d44-b315444d2a83&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;2&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;path&gt;Deleted&lt;/path&gt;
							&lt;id&gt;712e8f97-cd3a-434f-b98f-1c4f7241a571&lt;/id&gt;
							&lt;delMsgTTL&gt;30&lt;/delMsgTTL&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;1&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;fax-message&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;30&lt;/newMsgTTL&gt;
						        &lt;savedMsgTTL&gt;30&lt;/savedMsgTTL&gt;
							&lt;path&gt;Media/Fax&lt;/path&gt;
							&lt;id&gt;338b8af7-cb27-4ca9-aa94-99f480feceda&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-IVR-Greeting&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;0&lt;/newMsgTTL&gt;
							&lt;path&gt;Media/IVR&lt;/path&gt;
							&lt;id&gt;1deac365-0528-47f5-bea3-bfb3391cedec&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;6&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;mailbox&gt;
					&lt;folder&gt;
						&lt;type&gt;
							&lt;msgContext&gt;X-Call-History&lt;/msgContext&gt;
							&lt;newMsgTTL&gt;7&lt;/newMsgTTL&gt;
							&lt;path&gt;CallHistory&lt;/path&gt;
							&lt;id&gt;c65f2cff-67eb-4ca1-a5e0-68f2066b20af&lt;/id&gt;
							&lt;maxMsgSizeLimit&gt;20971520&lt;/maxMsgSizeLimit&gt;
						&lt;/type&gt;
					&lt;/folder&gt;
					&lt;quota&gt;
						&lt;pctOfTotalStorage&gt;3&lt;/pctOfTotalStorage&gt;
					&lt;/quota&gt;
				&lt;/mailbox&gt;
				&lt;isVmSub&gt;false&lt;/isVmSub&gt;
				&lt;phone2Sub&gt;true&lt;/phone2Sub&gt;
				&lt;VVMEnabled&gt;true&lt;/VVMEnabled&gt;
				&lt;v2tEnabled&gt;false&lt;/v2tEnabled&gt;
			&lt;/COSProfile&gt;
		&lt;/ServiceData&gt;
	&lt;/RepositoryData&gt;
&lt;/cos&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.373" starttime="20210313 17:06:41.371"></status>
</kw>
<kw name="Parse Xml" library="XML">
<doc>Parses the given XML file or string into an element structure.</doc>
<arguments>
<arg>${profileXml.strip()}</arg>
</arguments>
<assign>
<var>${parsed_xml}</var>
</assign>
<msg timestamp="20210313 17:06:41.377" level="INFO">${parsed_xml} = &lt;Element 'cos' at 0x7fa45c29cf30&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.377" starttime="20210313 17:06:41.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${parsed_xml}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.378" level="INFO">&lt;Element 'cos' at 0x7fa45c29cf30&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.378" starttime="20210313 17:06:41.377"></status>
</kw>
<kw name="Get Elements" library="XML">
<doc>Returns a list of elements in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${parsed_xml}</arg>
<arg>RepositoryData/ServiceData/COSProfile/mailbox</arg>
</arguments>
<assign>
<var>${mailbox}</var>
</assign>
<msg timestamp="20210313 17:06:41.385" level="INFO">${mailbox} = [&lt;Element 'mailbox' at 0x3084750&gt;, &lt;Element 'mailbox' at 0x31cf9c0&gt;, &lt;Element 'mailbox' at 0x31cff00&gt;, &lt;Element 'mailbox' at 0x31d43f0&gt;, &lt;Element 'mailbox' at 0x31d48a0&gt;, &lt;Element 'mailbox' at 0x31d60...</msg>
<status status="PASS" endtime="20210313 17:06:41.385" starttime="20210313 17:06:41.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mailbox}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.387" level="INFO">[&lt;Element 'mailbox' at 0x3084750&gt;, &lt;Element 'mailbox' at 0x31cf9c0&gt;, &lt;Element 'mailbox' at 0x31cff00&gt;, &lt;Element 'mailbox' at 0x31d43f0&gt;, &lt;Element 'mailbox' at 0x31d48a0&gt;, &lt;Element 'mailbox' at 0x31d60f0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.387" starttime="20210313 17:06:41.386"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${parsed_xml}</arg>
<arg>RepositoryData/ServiceData/COSProfile/defaultMailboxQuota</arg>
</arguments>
<assign>
<var>${defaultMailboxQuota}</var>
</assign>
<msg timestamp="20210313 17:06:41.389" level="INFO">${defaultMailboxQuota} = 2147462143</msg>
<status status="PASS" endtime="20210313 17:06:41.390" starttime="20210313 17:06:41.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${defaultMailboxQuota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.391" level="INFO">2147462143</msg>
<status status="PASS" endtime="20210313 17:06:41.392" starttime="20210313 17:06:41.390"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${MailBoxQuota}</arg>
<arg>${defaultMailboxQuota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.405" level="INFO">${MailBoxQuota} = 2147462143</msg>
<status status="PASS" endtime="20210313 17:06:41.406" starttime="20210313 17:06:41.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>&amp;{Generic_Cos_Path_Ids}</var>
</assign>
<msg timestamp="20210313 17:06:41.408" level="INFO">&amp;{Generic_Cos_Path_Ids} = { }</msg>
<status status="PASS" endtime="20210313 17:06:41.408" starttime="20210313 17:06:41.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>&amp;{ProfileXmlData}</var>
</assign>
<msg timestamp="20210313 17:06:41.409" level="INFO">&amp;{ProfileXmlData} = { }</msg>
<status status="PASS" endtime="20210313 17:06:41.409" starttime="20210313 17:06:41.408"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.411" level="INFO">${Generic_Cos_Path_Ids} = {}</msg>
<status status="PASS" endtime="20210313 17:06:41.411" starttime="20210313 17:06:41.410"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.413" level="INFO">${ProfileXmlData} = {}</msg>
<status status="PASS" endtime="20210313 17:06:41.413" starttime="20210313 17:06:41.412"></status>
</kw>
<kw type="for" name="${mailbox_ele} IN [ @{mailbox} ]">
<kw type="foritem" name="${mailbox_ele} = &lt;Element 'mailbox' at 0x3084750&gt;">
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>folder</arg>
</arguments>
<assign>
<var>${folder}</var>
</assign>
<msg timestamp="20210313 17:06:41.415" level="INFO">${folder} = &lt;Element 'folder' at 0x30847e0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.415" starttime="20210313 17:06:41.414"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>quota/pctOfTotalStorage</arg>
</arguments>
<assign>
<var>${quota}</var>
</assign>
<msg timestamp="20210313 17:06:41.417" level="INFO">${quota} = 80</msg>
<status status="PASS" endtime="20210313 17:06:41.417" starttime="20210313 17:06:41.416"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${quota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.418" level="INFO">80</msg>
<status status="PASS" endtime="20210313 17:06:41.419" starttime="20210313 17:06:41.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${folder}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.420" level="INFO">&lt;Element 'folder' at 0x30847e0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.420" starttime="20210313 17:06:41.419"></status>
</kw>
<kw name="Get Elements" library="XML">
<doc>Returns a list of elements in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${folder}</arg>
<arg>type</arg>
</arguments>
<assign>
<var>${type}</var>
</assign>
<msg timestamp="20210313 17:06:41.422" level="INFO">${type} = [&lt;Element 'type' at 0x7fa45c2a9d20&gt;, &lt;Element 'type' at 0x7fa45c2a9f60&gt;, &lt;Element 'type' at 0x31c5150&gt;, &lt;Element 'type' at 0x31c5990&gt;, &lt;Element 'type' at 0x7fa45c299480&gt;, &lt;Element 'type' at 0x7fa45c29...</msg>
<status status="PASS" endtime="20210313 17:06:41.422" starttime="20210313 17:06:41.420"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.423" level="INFO">[&lt;Element 'type' at 0x7fa45c2a9d20&gt;, &lt;Element 'type' at 0x7fa45c2a9f60&gt;, &lt;Element 'type' at 0x31c5150&gt;, &lt;Element 'type' at 0x31c5990&gt;, &lt;Element 'type' at 0x7fa45c299480&gt;, &lt;Element 'type' at 0x7fa45c299990&gt;, &lt;Element 'type' at 0x7fa45c2a2360&gt;, &lt;Element 'type' at 0x7fa45c2a2900&gt;, &lt;Element 'type' at 0x7fa45c2a2810&gt;, &lt;Element 'type' at 0x7fa45c2a2d50&gt;, &lt;Element 'type' at 0x31cf4b0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.424" starttime="20210313 17:06:41.422"></status>
</kw>
<kw name="GetAllTypesofCosProfiles" library="Provision">
<arguments>
<arg>${folder}</arg>
<arg>${type}</arg>
<arg>${quota}</arg>
</arguments>
<kw type="for" name="${e_type} IN [ @{type} ]">
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c2a9d20&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.429" level="INFO">${path} = RCSMessageStore</msg>
<status status="PASS" endtime="20210313 17:06:41.430" starttime="20210313 17:06:41.428"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.431" level="INFO">${id} = fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:06:41.431" starttime="20210313 17:06:41.430"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.434" starttime="20210313 17:06:41.433"></status>
</kw>
<msg timestamp="20210313 17:06:41.434" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.434" starttime="20210313 17:06:41.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.435" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.435" starttime="20210313 17:06:41.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.438" level="INFO">&amp;{val} = { folder_key=fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.438" starttime="20210313 17:06:41.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.440" starttime="20210313 17:06:41.439"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.441" starttime="20210313 17:06:41.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.444" starttime="20210313 17:06:41.443"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.444" starttime="20210313 17:06:41.441"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.444" starttime="20210313 17:06:41.427"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c2a9f60&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.446" level="INFO">${path} = RCSMessageStore/Chat</msg>
<status status="PASS" endtime="20210313 17:06:41.446" starttime="20210313 17:06:41.445"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.448" level="INFO">${id} = 97d38f52-bed0-4046-8784-bb110e3b0ea3</msg>
<status status="PASS" endtime="20210313 17:06:41.448" starttime="20210313 17:06:41.447"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.450" starttime="20210313 17:06:41.449"></status>
</kw>
<msg timestamp="20210313 17:06:41.450" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.451" starttime="20210313 17:06:41.448"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.451" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.452" starttime="20210313 17:06:41.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.455" level="INFO">&amp;{val} = { folder_key=97d38f52-bed0-4046-8784-bb110e3b0ea3 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.456" starttime="20210313 17:06:41.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.460" starttime="20210313 17:06:41.459"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.461" starttime="20210313 17:06:41.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.464" starttime="20210313 17:06:41.463"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.464" starttime="20210313 17:06:41.461"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.465" starttime="20210313 17:06:41.444"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31c5150&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.467" level="INFO">${path} = RCSMessageStore/Chat</msg>
<status status="PASS" endtime="20210313 17:06:41.467" starttime="20210313 17:06:41.465"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.469" level="INFO">${id} = 97d38f52-bed0-4046-8784-bb110e3b0ea3</msg>
<status status="PASS" endtime="20210313 17:06:41.470" starttime="20210313 17:06:41.468"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.473" level="FAIL">Dictionary contains key 'RCSMessageStore/Chat'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.473" starttime="20210313 17:06:41.471"></status>
</kw>
<msg timestamp="20210313 17:06:41.473" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.473" starttime="20210313 17:06:41.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.475" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.476" starttime="20210313 17:06:41.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.479" level="INFO">&amp;{val} = { folder_key=97d38f52-bed0-4046-8784-bb110e3b0ea3 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.479" starttime="20210313 17:06:41.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.481" starttime="20210313 17:06:41.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.482" starttime="20210313 17:06:41.481"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.482" starttime="20210313 17:06:41.465"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31c5990&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.485" level="INFO">${path} = RCSMessageStore/Chat</msg>
<status status="PASS" endtime="20210313 17:06:41.486" starttime="20210313 17:06:41.483"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.487" level="INFO">${id} = 97d38f52-bed0-4046-8784-bb110e3b0ea3</msg>
<status status="PASS" endtime="20210313 17:06:41.487" starttime="20210313 17:06:41.486"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.490" level="FAIL">Dictionary contains key 'RCSMessageStore/Chat'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.490" starttime="20210313 17:06:41.489"></status>
</kw>
<msg timestamp="20210313 17:06:41.490" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.491" starttime="20210313 17:06:41.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.492" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.492" starttime="20210313 17:06:41.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.494" level="INFO">&amp;{val} = { folder_key=97d38f52-bed0-4046-8784-bb110e3b0ea3 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.494" starttime="20210313 17:06:41.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.495" starttime="20210313 17:06:41.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.497" starttime="20210313 17:06:41.496"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.497" starttime="20210313 17:06:41.483"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c299480&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.498" level="INFO">${path} = RCSMessageStore/Chat</msg>
<status status="PASS" endtime="20210313 17:06:41.499" starttime="20210313 17:06:41.497"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.500" level="INFO">${id} = 97d38f52-bed0-4046-8784-bb110e3b0ea3</msg>
<status status="PASS" endtime="20210313 17:06:41.500" starttime="20210313 17:06:41.499"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.502" level="FAIL">Dictionary contains key 'RCSMessageStore/Chat'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.503" starttime="20210313 17:06:41.501"></status>
</kw>
<msg timestamp="20210313 17:06:41.503" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.503" starttime="20210313 17:06:41.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.504" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.505" starttime="20210313 17:06:41.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.507" level="INFO">&amp;{val} = { folder_key=97d38f52-bed0-4046-8784-bb110e3b0ea3 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.507" starttime="20210313 17:06:41.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.508" starttime="20210313 17:06:41.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.509" starttime="20210313 17:06:41.509"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.510" starttime="20210313 17:06:41.497"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c299990&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.511" level="INFO">${path} = RCSMessageStore/Chat</msg>
<status status="PASS" endtime="20210313 17:06:41.511" starttime="20210313 17:06:41.510"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.513" level="INFO">${id} = 97d38f52-bed0-4046-8784-bb110e3b0ea3</msg>
<status status="PASS" endtime="20210313 17:06:41.513" starttime="20210313 17:06:41.512"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.516" level="FAIL">Dictionary contains key 'RCSMessageStore/Chat'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.516" starttime="20210313 17:06:41.514"></status>
</kw>
<msg timestamp="20210313 17:06:41.516" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.517" starttime="20210313 17:06:41.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.518" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.518" starttime="20210313 17:06:41.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.521" level="INFO">&amp;{val} = { folder_key=97d38f52-bed0-4046-8784-bb110e3b0ea3 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.521" starttime="20210313 17:06:41.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.522" starttime="20210313 17:06:41.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.523" starttime="20210313 17:06:41.523"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.523" starttime="20210313 17:06:41.510"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c2a2360&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.526" level="INFO">${path} = RCSMessageStore/FT</msg>
<status status="PASS" endtime="20210313 17:06:41.526" starttime="20210313 17:06:41.524"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.527" level="INFO">${id} = 4b6ff8a1-df89-4c59-9ebf-4d73f95540d4</msg>
<status status="PASS" endtime="20210313 17:06:41.527" starttime="20210313 17:06:41.526"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.530" starttime="20210313 17:06:41.529"></status>
</kw>
<msg timestamp="20210313 17:06:41.530" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.530" starttime="20210313 17:06:41.528"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.531" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.531" starttime="20210313 17:06:41.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.533" level="INFO">&amp;{val} = { folder_key=4b6ff8a1-df89-4c59-9ebf-4d73f95540d4 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.533" starttime="20210313 17:06:41.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.536" starttime="20210313 17:06:41.535"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.536" starttime="20210313 17:06:41.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.539" starttime="20210313 17:06:41.538"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.539" starttime="20210313 17:06:41.537"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.539" starttime="20210313 17:06:41.524"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c2a2900&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.541" level="INFO">${path} = RCSMessageStore/FT</msg>
<status status="PASS" endtime="20210313 17:06:41.541" starttime="20210313 17:06:41.540"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.543" level="INFO">${id} = 4b6ff8a1-df89-4c59-9ebf-4d73f95540d4</msg>
<status status="PASS" endtime="20210313 17:06:41.543" starttime="20210313 17:06:41.542"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.547" level="FAIL">Dictionary contains key 'RCSMessageStore/FT'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.547" starttime="20210313 17:06:41.546"></status>
</kw>
<msg timestamp="20210313 17:06:41.547" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.547" starttime="20210313 17:06:41.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.548" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.549" starttime="20210313 17:06:41.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.551" level="INFO">&amp;{val} = { folder_key=4b6ff8a1-df89-4c59-9ebf-4d73f95540d4 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.551" starttime="20210313 17:06:41.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.552" starttime="20210313 17:06:41.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.553" starttime="20210313 17:06:41.552"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.553" starttime="20210313 17:06:41.539"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c2a2810&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.555" level="INFO">${path} = RCSMessageStore/FT</msg>
<status status="PASS" endtime="20210313 17:06:41.555" starttime="20210313 17:06:41.554"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.556" level="INFO">${id} = 4b6ff8a1-df89-4c59-9ebf-4d73f95540d4</msg>
<status status="PASS" endtime="20210313 17:06:41.556" starttime="20210313 17:06:41.555"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.559" level="FAIL">Dictionary contains key 'RCSMessageStore/FT'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.559" starttime="20210313 17:06:41.558"></status>
</kw>
<msg timestamp="20210313 17:06:41.560" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.560" starttime="20210313 17:06:41.557"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.561" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.562" starttime="20210313 17:06:41.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.564" level="INFO">&amp;{val} = { folder_key=4b6ff8a1-df89-4c59-9ebf-4d73f95540d4 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.564" starttime="20210313 17:06:41.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.565" starttime="20210313 17:06:41.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.566" starttime="20210313 17:06:41.566"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.567" starttime="20210313 17:06:41.553"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x7fa45c2a2d50&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.568" level="INFO">${path} = RCSMessageStore/FT</msg>
<status status="PASS" endtime="20210313 17:06:41.569" starttime="20210313 17:06:41.567"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.570" level="INFO">${id} = 4b6ff8a1-df89-4c59-9ebf-4d73f95540d4</msg>
<status status="PASS" endtime="20210313 17:06:41.570" starttime="20210313 17:06:41.569"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.572" level="FAIL">Dictionary contains key 'RCSMessageStore/FT'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.572" starttime="20210313 17:06:41.571"></status>
</kw>
<msg timestamp="20210313 17:06:41.573" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.573" starttime="20210313 17:06:41.570"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.574" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.574" starttime="20210313 17:06:41.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.576" level="INFO">&amp;{val} = { folder_key=4b6ff8a1-df89-4c59-9ebf-4d73f95540d4 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.576" starttime="20210313 17:06:41.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.577" starttime="20210313 17:06:41.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.579" starttime="20210313 17:06:41.578"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.579" starttime="20210313 17:06:41.567"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31cf4b0&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.581" level="INFO">${path} = RCSMessageStore/FT</msg>
<status status="PASS" endtime="20210313 17:06:41.581" starttime="20210313 17:06:41.580"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.583" level="INFO">${id} = 4b6ff8a1-df89-4c59-9ebf-4d73f95540d4</msg>
<status status="PASS" endtime="20210313 17:06:41.583" starttime="20210313 17:06:41.582"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.586" level="FAIL">Dictionary contains key 'RCSMessageStore/FT'.</msg>
<status status="FAIL" endtime="20210313 17:06:41.586" starttime="20210313 17:06:41.585"></status>
</kw>
<msg timestamp="20210313 17:06:41.587" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20210313 17:06:41.587" starttime="20210313 17:06:41.584"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.588" level="INFO">False</msg>
<status status="PASS" endtime="20210313 17:06:41.588" starttime="20210313 17:06:41.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.590" level="INFO">&amp;{val} = { folder_key=4b6ff8a1-df89-4c59-9ebf-4d73f95540d4 | quota=80 }</msg>
<status status="PASS" endtime="20210313 17:06:41.590" starttime="20210313 17:06:41.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.592" starttime="20210313 17:06:41.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.593" starttime="20210313 17:06:41.592"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.593" starttime="20210313 17:06:41.579"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.593" starttime="20210313 17:06:41.426"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.594" starttime="20210313 17:06:41.424"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.594" starttime="20210313 17:06:41.414"></status>
</kw>
<kw type="foritem" name="${mailbox_ele} = &lt;Element 'mailbox' at 0x31cf9c0&gt;">
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>folder</arg>
</arguments>
<assign>
<var>${folder}</var>
</assign>
<msg timestamp="20210313 17:06:41.595" level="INFO">${folder} = &lt;Element 'folder' at 0x31cfa20&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.596" starttime="20210313 17:06:41.594"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>quota/pctOfTotalStorage</arg>
</arguments>
<assign>
<var>${quota}</var>
</assign>
<msg timestamp="20210313 17:06:41.597" level="INFO">${quota} = 8</msg>
<status status="PASS" endtime="20210313 17:06:41.597" starttime="20210313 17:06:41.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${quota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.598" level="INFO">8</msg>
<status status="PASS" endtime="20210313 17:06:41.599" starttime="20210313 17:06:41.598"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${folder}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.600" level="INFO">&lt;Element 'folder' at 0x31cfa20&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.600" starttime="20210313 17:06:41.599"></status>
</kw>
<kw name="Get Elements" library="XML">
<doc>Returns a list of elements in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${folder}</arg>
<arg>type</arg>
</arguments>
<assign>
<var>${type}</var>
</assign>
<msg timestamp="20210313 17:06:41.602" level="INFO">${type} = [&lt;Element 'type' at 0x31cfa80&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.602" starttime="20210313 17:06:41.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.603" level="INFO">[&lt;Element 'type' at 0x31cfa80&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.603" starttime="20210313 17:06:41.602"></status>
</kw>
<kw name="GetAllTypesofCosProfiles" library="Provision">
<arguments>
<arg>${folder}</arg>
<arg>${type}</arg>
<arg>${quota}</arg>
</arguments>
<kw type="for" name="${e_type} IN [ @{type} ]">
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31cfa80&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.611" level="INFO">${path} = VV-Mail/Inbox</msg>
<status status="PASS" endtime="20210313 17:06:41.611" starttime="20210313 17:06:41.610"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.612" level="INFO">${id} = 27a29814-dd8f-43ee-b768-19af98bf1d07</msg>
<status status="PASS" endtime="20210313 17:06:41.613" starttime="20210313 17:06:41.611"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.615" starttime="20210313 17:06:41.614"></status>
</kw>
<msg timestamp="20210313 17:06:41.615" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.615" starttime="20210313 17:06:41.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.616" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.617" starttime="20210313 17:06:41.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.618" level="INFO">&amp;{val} = { folder_key=27a29814-dd8f-43ee-b768-19af98bf1d07 | quota=8 }</msg>
<status status="PASS" endtime="20210313 17:06:41.618" starttime="20210313 17:06:41.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.621" starttime="20210313 17:06:41.620"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.622" starttime="20210313 17:06:41.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.625" starttime="20210313 17:06:41.624"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.625" starttime="20210313 17:06:41.622"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.625" starttime="20210313 17:06:41.609"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.625" starttime="20210313 17:06:41.608"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.626" starttime="20210313 17:06:41.603"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.626" starttime="20210313 17:06:41.594"></status>
</kw>
<kw type="foritem" name="${mailbox_ele} = &lt;Element 'mailbox' at 0x31cff00&gt;">
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>folder</arg>
</arguments>
<assign>
<var>${folder}</var>
</assign>
<msg timestamp="20210313 17:06:41.628" level="INFO">${folder} = &lt;Element 'folder' at 0x31cff60&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.628" starttime="20210313 17:06:41.627"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>quota/pctOfTotalStorage</arg>
</arguments>
<assign>
<var>${quota}</var>
</assign>
<msg timestamp="20210313 17:06:41.630" level="INFO">${quota} = 2</msg>
<status status="PASS" endtime="20210313 17:06:41.630" starttime="20210313 17:06:41.629"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${quota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.631" level="INFO">2</msg>
<status status="PASS" endtime="20210313 17:06:41.631" starttime="20210313 17:06:41.631"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${folder}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.633" level="INFO">&lt;Element 'folder' at 0x31cff60&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.633" starttime="20210313 17:06:41.632"></status>
</kw>
<kw name="Get Elements" library="XML">
<doc>Returns a list of elements in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${folder}</arg>
<arg>type</arg>
</arguments>
<assign>
<var>${type}</var>
</assign>
<msg timestamp="20210313 17:06:41.635" level="INFO">${type} = [&lt;Element 'type' at 0x31cffc0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.635" starttime="20210313 17:06:41.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.636" level="INFO">[&lt;Element 'type' at 0x31cffc0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.637" starttime="20210313 17:06:41.635"></status>
</kw>
<kw name="GetAllTypesofCosProfiles" library="Provision">
<arguments>
<arg>${folder}</arg>
<arg>${type}</arg>
<arg>${quota}</arg>
</arguments>
<kw type="for" name="${e_type} IN [ @{type} ]">
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31cffc0&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.641" level="INFO">${path} = VV-Mail/Greetings</msg>
<status status="PASS" endtime="20210313 17:06:41.641" starttime="20210313 17:06:41.640"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.643" level="INFO">${id} = c1a7c823-fdd1-4857-8d44-b315444d2a83</msg>
<status status="PASS" endtime="20210313 17:06:41.643" starttime="20210313 17:06:41.642"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.646" starttime="20210313 17:06:41.645"></status>
</kw>
<msg timestamp="20210313 17:06:41.646" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.646" starttime="20210313 17:06:41.644"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.647" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.647" starttime="20210313 17:06:41.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.650" level="INFO">&amp;{val} = { folder_key=c1a7c823-fdd1-4857-8d44-b315444d2a83 | quota=2 }</msg>
<status status="PASS" endtime="20210313 17:06:41.650" starttime="20210313 17:06:41.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.656" starttime="20210313 17:06:41.654"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.656" starttime="20210313 17:06:41.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.660" starttime="20210313 17:06:41.658"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.660" starttime="20210313 17:06:41.657"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.660" starttime="20210313 17:06:41.639"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.660" starttime="20210313 17:06:41.639"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.661" starttime="20210313 17:06:41.638"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.661" starttime="20210313 17:06:41.626"></status>
</kw>
<kw type="foritem" name="${mailbox_ele} = &lt;Element 'mailbox' at 0x31d43f0&gt;">
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>folder</arg>
</arguments>
<assign>
<var>${folder}</var>
</assign>
<msg timestamp="20210313 17:06:41.662" level="INFO">${folder} = &lt;Element 'folder' at 0x31d4450&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.663" starttime="20210313 17:06:41.661"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>quota/pctOfTotalStorage</arg>
</arguments>
<assign>
<var>${quota}</var>
</assign>
<msg timestamp="20210313 17:06:41.665" level="INFO">${quota} = 1</msg>
<status status="PASS" endtime="20210313 17:06:41.665" starttime="20210313 17:06:41.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${quota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.666" level="INFO">1</msg>
<status status="PASS" endtime="20210313 17:06:41.667" starttime="20210313 17:06:41.666"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${folder}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.670" level="INFO">&lt;Element 'folder' at 0x31d4450&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.671" starttime="20210313 17:06:41.667"></status>
</kw>
<kw name="Get Elements" library="XML">
<doc>Returns a list of elements in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${folder}</arg>
<arg>type</arg>
</arguments>
<assign>
<var>${type}</var>
</assign>
<msg timestamp="20210313 17:06:41.672" level="INFO">${type} = [&lt;Element 'type' at 0x31d44b0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.672" starttime="20210313 17:06:41.671"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.674" level="INFO">[&lt;Element 'type' at 0x31d44b0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.674" starttime="20210313 17:06:41.673"></status>
</kw>
<kw name="GetAllTypesofCosProfiles" library="Provision">
<arguments>
<arg>${folder}</arg>
<arg>${type}</arg>
<arg>${quota}</arg>
</arguments>
<kw type="for" name="${e_type} IN [ @{type} ]">
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31d44b0&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.678" level="INFO">${path} = Deleted</msg>
<status status="PASS" endtime="20210313 17:06:41.678" starttime="20210313 17:06:41.677"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.680" level="INFO">${id} = 712e8f97-cd3a-434f-b98f-1c4f7241a571</msg>
<status status="PASS" endtime="20210313 17:06:41.680" starttime="20210313 17:06:41.679"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.682" starttime="20210313 17:06:41.681"></status>
</kw>
<msg timestamp="20210313 17:06:41.683" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.683" starttime="20210313 17:06:41.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.684" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.684" starttime="20210313 17:06:41.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.687" level="INFO">&amp;{val} = { folder_key=712e8f97-cd3a-434f-b98f-1c4f7241a571 | quota=1 }</msg>
<status status="PASS" endtime="20210313 17:06:41.687" starttime="20210313 17:06:41.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.690" starttime="20210313 17:06:41.689"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.690" starttime="20210313 17:06:41.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.693" starttime="20210313 17:06:41.692"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.693" starttime="20210313 17:06:41.691"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.693" starttime="20210313 17:06:41.676"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.693" starttime="20210313 17:06:41.676"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.694" starttime="20210313 17:06:41.674"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.694" starttime="20210313 17:06:41.661"></status>
</kw>
<kw type="foritem" name="${mailbox_ele} = &lt;Element 'mailbox' at 0x31d48a0&gt;">
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>folder</arg>
</arguments>
<assign>
<var>${folder}</var>
</assign>
<msg timestamp="20210313 17:06:41.696" level="INFO">${folder} = &lt;Element 'folder' at 0x31d4900&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.696" starttime="20210313 17:06:41.695"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>quota/pctOfTotalStorage</arg>
</arguments>
<assign>
<var>${quota}</var>
</assign>
<msg timestamp="20210313 17:06:41.697" level="INFO">${quota} = 6</msg>
<status status="PASS" endtime="20210313 17:06:41.697" starttime="20210313 17:06:41.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${quota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.698" level="INFO">6</msg>
<status status="PASS" endtime="20210313 17:06:41.699" starttime="20210313 17:06:41.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${folder}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.700" level="INFO">&lt;Element 'folder' at 0x31d4900&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.700" starttime="20210313 17:06:41.699"></status>
</kw>
<kw name="Get Elements" library="XML">
<doc>Returns a list of elements in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${folder}</arg>
<arg>type</arg>
</arguments>
<assign>
<var>${type}</var>
</assign>
<msg timestamp="20210313 17:06:41.702" level="INFO">${type} = [&lt;Element 'type' at 0x31d4960&gt;, &lt;Element 'type' at 0x31d4c90&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.702" starttime="20210313 17:06:41.701"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.703" level="INFO">[&lt;Element 'type' at 0x31d4960&gt;, &lt;Element 'type' at 0x31d4c90&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.703" starttime="20210313 17:06:41.702"></status>
</kw>
<kw name="GetAllTypesofCosProfiles" library="Provision">
<arguments>
<arg>${folder}</arg>
<arg>${type}</arg>
<arg>${quota}</arg>
</arguments>
<kw type="for" name="${e_type} IN [ @{type} ]">
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31d4960&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.707" level="INFO">${path} = Media/Fax</msg>
<status status="PASS" endtime="20210313 17:06:41.707" starttime="20210313 17:06:41.706"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.708" level="INFO">${id} = 338b8af7-cb27-4ca9-aa94-99f480feceda</msg>
<status status="PASS" endtime="20210313 17:06:41.708" starttime="20210313 17:06:41.707"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.711" starttime="20210313 17:06:41.710"></status>
</kw>
<msg timestamp="20210313 17:06:41.711" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.711" starttime="20210313 17:06:41.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.712" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.712" starttime="20210313 17:06:41.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.715" level="INFO">&amp;{val} = { folder_key=338b8af7-cb27-4ca9-aa94-99f480feceda | quota=6 }</msg>
<status status="PASS" endtime="20210313 17:06:41.715" starttime="20210313 17:06:41.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.719" starttime="20210313 17:06:41.717"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.719" starttime="20210313 17:06:41.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.722" starttime="20210313 17:06:41.721"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.722" starttime="20210313 17:06:41.719"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.723" starttime="20210313 17:06:41.705"></status>
</kw>
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31d4c90&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.724" level="INFO">${path} = Media/IVR</msg>
<status status="PASS" endtime="20210313 17:06:41.724" starttime="20210313 17:06:41.723"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.726" level="INFO">${id} = 1deac365-0528-47f5-bea3-bfb3391cedec</msg>
<status status="PASS" endtime="20210313 17:06:41.726" starttime="20210313 17:06:41.725"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.729" starttime="20210313 17:06:41.728"></status>
</kw>
<msg timestamp="20210313 17:06:41.729" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.729" starttime="20210313 17:06:41.727"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.730" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.730" starttime="20210313 17:06:41.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.732" level="INFO">&amp;{val} = { folder_key=1deac365-0528-47f5-bea3-bfb3391cedec | quota=6 }</msg>
<status status="PASS" endtime="20210313 17:06:41.732" starttime="20210313 17:06:41.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.735" starttime="20210313 17:06:41.734"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.735" starttime="20210313 17:06:41.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.738" starttime="20210313 17:06:41.737"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.739" starttime="20210313 17:06:41.736"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.739" starttime="20210313 17:06:41.723"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.739" starttime="20210313 17:06:41.705"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.739" starttime="20210313 17:06:41.703"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.739" starttime="20210313 17:06:41.694"></status>
</kw>
<kw type="foritem" name="${mailbox_ele} = &lt;Element 'mailbox' at 0x31d60f0&gt;">
<kw name="Get Element" library="XML">
<doc>Returns an element in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>folder</arg>
</arguments>
<assign>
<var>${folder}</var>
</assign>
<msg timestamp="20210313 17:06:41.741" level="INFO">${folder} = &lt;Element 'folder' at 0x31d6150&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.741" starttime="20210313 17:06:41.740"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${mailbox_ele}</arg>
<arg>quota/pctOfTotalStorage</arg>
</arguments>
<assign>
<var>${quota}</var>
</assign>
<msg timestamp="20210313 17:06:41.742" level="INFO">${quota} = 3</msg>
<status status="PASS" endtime="20210313 17:06:41.742" starttime="20210313 17:06:41.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${quota}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.743" level="INFO">3</msg>
<status status="PASS" endtime="20210313 17:06:41.744" starttime="20210313 17:06:41.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${folder}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.745" level="INFO">&lt;Element 'folder' at 0x31d6150&gt;</msg>
<status status="PASS" endtime="20210313 17:06:41.745" starttime="20210313 17:06:41.744"></status>
</kw>
<kw name="Get Elements" library="XML">
<doc>Returns a list of elements in the ``source`` matching the ``xpath``.</doc>
<arguments>
<arg>${folder}</arg>
<arg>type</arg>
</arguments>
<assign>
<var>${type}</var>
</assign>
<msg timestamp="20210313 17:06:41.746" level="INFO">${type} = [&lt;Element 'type' at 0x31d61b0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.746" starttime="20210313 17:06:41.745"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.747" level="INFO">[&lt;Element 'type' at 0x31d61b0&gt;]</msg>
<status status="PASS" endtime="20210313 17:06:41.748" starttime="20210313 17:06:41.747"></status>
</kw>
<kw name="GetAllTypesofCosProfiles" library="Provision">
<arguments>
<arg>${folder}</arg>
<arg>${type}</arg>
<arg>${quota}</arg>
</arguments>
<kw type="for" name="${e_type} IN [ @{type} ]">
<kw type="foritem" name="${e_type} = &lt;Element 'type' at 0x31d61b0&gt;">
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>path</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20210313 17:06:41.751" level="INFO">${path} = CallHistory</msg>
<status status="PASS" endtime="20210313 17:06:41.751" starttime="20210313 17:06:41.750"></status>
</kw>
<kw name="Get Element Text" library="XML">
<doc>Returns all text of the element, possibly whitespace normalized.</doc>
<arguments>
<arg>${e_type}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${id}</var>
</assign>
<msg timestamp="20210313 17:06:41.752" level="INFO">${id} = c65f2cff-67eb-4ca1-a5e0-68f2066b20af</msg>
<status status="PASS" endtime="20210313 17:06:41.753" starttime="20210313 17:06:41.751"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.755" starttime="20210313 17:06:41.754"></status>
</kw>
<msg timestamp="20210313 17:06:41.755" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20210313 17:06:41.755" starttime="20210313 17:06:41.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.756" level="INFO">True</msg>
<status status="PASS" endtime="20210313 17:06:41.757" starttime="20210313 17:06:41.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>folder_key=${id}</arg>
<arg>quota=${quota}</arg>
</arguments>
<assign>
<var>&amp;{val}</var>
</assign>
<msg timestamp="20210313 17:06:41.759" level="INFO">&amp;{val} = { folder_key=c65f2cff-67eb-4ca1-a5e0-68f2066b20af | quota=3 }</msg>
<status status="PASS" endtime="20210313 17:06:41.759" starttime="20210313 17:06:41.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
<arg>${path}</arg>
<arg>${id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.762" starttime="20210313 17:06:41.761"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.763" starttime="20210313 17:06:41.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${status}"=="True"</arg>
<arg>Set To Dictionary</arg>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
<arg>${path}</arg>
<arg>${val}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.767" starttime="20210313 17:06:41.764"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.767" starttime="20210313 17:06:41.763"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.767" starttime="20210313 17:06:41.750"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.767" starttime="20210313 17:06:41.749"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.768" starttime="20210313 17:06:41.748"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.768" starttime="20210313 17:06:41.739"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.768" starttime="20210313 17:06:41.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.770" level="INFO">{'RCSMessageStore': 'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', 'RCSMessageStore/Chat': '97d38f52-bed0-4046-8784-bb110e3b0ea3', 'RCSMessageStore/FT': '4b6ff8a1-df89-4c59-9ebf-4d73f95540d4', 'VV-Mail/Inbox': '27a29814-dd8f-43ee-b768-19af98bf1d07', 'VV-Mail/Greetings': 'c1a7c823-fdd1-4857-8d44-b315444d2a83', 'Deleted': '712e8f97-cd3a-434f-b98f-1c4f7241a571', 'Media/Fax': '338b8af7-cb27-4ca9-aa94-99f480feceda', 'Media/IVR': '1deac365-0528-47f5-bea3-bfb3391cedec', 'CallHistory': 'c65f2cff-67eb-4ca1-a5e0-68f2066b20af'}</msg>
<status status="PASS" endtime="20210313 17:06:41.771" starttime="20210313 17:06:41.769"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${Generic_Cos_Path_Ids}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.773" level="INFO">${Generic_Cos_Path_Ids} = {'RCSMessageStore': 'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', 'RCSMessageStore/Chat': '97d38f52-bed0-4046-8784-bb110e3b0ea3', 'RCSMessageStore/FT': '4b6ff8a1-df89-4c59-9ebf-4d73f95540d4', 'VV-Mail/Inbox...</msg>
<status status="PASS" endtime="20210313 17:06:41.773" starttime="20210313 17:06:41.771"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.775" level="INFO">${ProfileXmlData} = {'RCSMessageStore': {u'folder_key': 'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'quota': '80'}, 'RCSMessageStore/Chat': {u'folder_key': '97d38f52-bed0-4046-8784-bb110e3b0ea3', u'quota': '80'}, 'RCSMessag...</msg>
<status status="PASS" endtime="20210313 17:06:41.775" starttime="20210313 17:06:41.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ProfileXmlData}</arg>
</arguments>
<msg timestamp="20210313 17:06:41.777" level="INFO">{'RCSMessageStore': {u'folder_key': 'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'quota': '80'}, 'RCSMessageStore/Chat': {u'folder_key': '97d38f52-bed0-4046-8784-bb110e3b0ea3', u'quota': '80'}, 'RCSMessageStore/FT': {u'folder_key': '4b6ff8a1-df89-4c59-9ebf-4d73f95540d4', u'quota': '80'}, 'VV-Mail/Inbox': {u'folder_key': '27a29814-dd8f-43ee-b768-19af98bf1d07', u'quota': '8'}, 'VV-Mail/Greetings': {u'folder_key': 'c1a7c823-fdd1-4857-8d44-b315444d2a83', u'quota': '2'}, 'Deleted': {u'folder_key': '712e8f97-cd3a-434f-b98f-1c4f7241a571', u'quota': '1'}, 'Media/Fax': {u'folder_key': '338b8af7-cb27-4ca9-aa94-99f480feceda', u'quota': '6'}, 'Media/IVR': {u'folder_key': '1deac365-0528-47f5-bea3-bfb3391cedec', u'quota': '6'}, 'CallHistory': {u'folder_key': 'c65f2cff-67eb-4ca1-a5e0-68f2066b20af', u'quota': '3'}}</msg>
<status status="PASS" endtime="20210313 17:06:41.777" starttime="20210313 17:06:41.776"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:41.778" starttime="20210313 17:06:41.156"></status>
</kw>
<msg timestamp="20210313 17:06:41.778" level="INFO">${listOfFolders} = {'RCSMessageStore': 'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', 'RCSMessageStore/Chat': '97d38f52-bed0-4046-8784-bb110e3b0ea3', 'RCSMessageStore/FT': '4b6ff8a1-df89-4c59-9ebf-4d73f95540d4', 'VV-Mail/Inbox...</msg>
<status status="PASS" endtime="20210313 17:06:41.778" starttime="20210313 17:06:41.155"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateSubscriberCassandraUsersTable</arg>
<arg>imappwd=${EMPTY}</arg>
<arg>pinpwd=${EMPTY}</arg>
<arg>nut=0</arg>
<arg>pin_encrypted=0</arg>
<arg>vvmon=0</arg>
</arguments>
<kw name="ValidateSubscriberCassandraUsersTable" library="Provision">
<arguments>
<arg>imappwd=${EMPTY}</arg>
<arg>pinpwd=${EMPTY}</arg>
<arg>nut=0</arg>
<arg>pin_encrypted=0</arg>
<arg>vvmon=0</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:41.782" starttime="20210313 17:06:41.781"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON * FROM users WHERE userid='${userId}';</arg>
</arguments>
<msg timestamp="20210313 17:06:42.324" level="INFO">SELECT JSON * FROM users WHERE userid='8888888880';</msg>
<status status="PASS" endtime="20210313 17:06:42.325" starttime="20210313 17:06:41.783"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${users_out}</var>
</assign>
<msg timestamp="20210313 17:06:42.374" level="INFO">[json]

 {"userid": "8888888880", "changepasswordtime": "1970-01-01T00:00:00", "cosid": "10", "deletedmsgaction": 0, "emailaddr": "", "enablenotification": 0, "hidechatpin": null, "httpftquota": 0, "identifiertype": 0, "imapfailedlogincount": 0, "imappassword": "", "ispinencrypted": 0, "issubblocked": null, "loginlevel": 0, "mailboxquota": 2147462143, "migrationdate": null, "migrationstatus": null, "npaid": "", "nut": 0, "omavvmon": 0, "passwordhistory": "ICwgLCAs", "pin": "", "primarymailboxid": null, "sourceapp": null, "substatus": 1, "swiftaccountid": "AUTH_TMO_Auto_1", "tenantid": "", "tuiinit": null, "umbid": null, "useridalias": null, "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "version": 3, "vvmon": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:42.375" level="INFO">${users_out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:06:42.375" starttime="20210313 17:06:42.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${users_out}</arg>
<arg>(1 rows)</arg>
<arg>msg="No entry in Users table for the userId ${userId}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.377" starttime="20210313 17:06:42.376"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${users_out}</arg>
</arguments>
<assign>
<var>${lines}</var>
</assign>
<msg timestamp="20210313 17:06:42.379" level="INFO">7 lines returned</msg>
<msg timestamp="20210313 17:06:42.380" level="INFO">${lines} = [u'', u' [json]', u'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:06:42.380" starttime="20210313 17:06:42.378"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>type(${lines})</arg>
</arguments>
<assign>
<var>${type}</var>
</assign>
<msg timestamp="20210313 17:06:42.382" level="INFO">${type} = &lt;type 'list'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.382" starttime="20210313 17:06:42.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${lines[3]}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.383" level="INFO"> {"userid": "8888888880", "changepasswordtime": "1970-01-01T00:00:00", "cosid": "10", "deletedmsgaction": 0, "emailaddr": "", "enablenotification": 0, "hidechatpin": null, "httpftquota": 0, "identifiertype": 0, "imapfailedlogincount": 0, "imappassword": "", "ispinencrypted": 0, "issubblocked": null, "loginlevel": 0, "mailboxquota": 2147462143, "migrationdate": null, "migrationstatus": null, "npaid": "", "nut": 0, "omavvmon": 0, "passwordhistory": "ICwgLCAs", "pin": "", "primarymailboxid": null, "sourceapp": null, "substatus": 1, "swiftaccountid": "AUTH_TMO_Auto_1", "tenantid": "", "tuiinit": null, "umbid": null, "useridalias": null, "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "version": 3, "vvmon": 0}</msg>
<status status="PASS" endtime="20210313 17:06:42.383" starttime="20210313 17:06:42.382"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${lines[3]}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_out}</var>
</assign>
<msg timestamp="20210313 17:06:42.385" level="INFO">${json_out} = {u'pin': u'', u'nut': 0, u'loginlevel': 0, u'primarymailboxid': None, u'imapfailedlogincount': 0, u'identifiertype': 0, u'mailboxquota': 2147462143, u'migrationdate': None, u'omavvmon': 0, u'tuiinit':...</msg>
<status status="PASS" endtime="20210313 17:06:42.385" starttime="20210313 17:06:42.384"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_out['swiftaccountid']}</arg>
</arguments>
<assign>
<var>${SWIFTACCOUNTID}</var>
</assign>
<msg timestamp="20210313 17:06:42.387" level="INFO">${SWIFTACCOUNTID} = AUTH_TMO_Auto_1</msg>
<status status="PASS" endtime="20210313 17:06:42.387" starttime="20210313 17:06:42.386"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SWIFTACCOUNTID}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.389" level="INFO">${SWIFTACCOUNTID} = AUTH_TMO_Auto_1</msg>
<status status="PASS" endtime="20210313 17:06:42.389" starttime="20210313 17:06:42.388"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['cosid']}</arg>
<arg>${Cos_Id}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['cosid']}</arg>
<arg>${Cos_Id}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.392" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.392" starttime="20210313 17:06:42.390"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.392" starttime="20210313 17:06:42.390"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['identifiertype']}</arg>
<arg>0</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['identifiertype']}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210313 17:06:42.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.395" starttime="20210313 17:06:42.394"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.395" starttime="20210313 17:06:42.393"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['imapfailedlogincount']}</arg>
<arg>0</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['imapfailedlogincount']}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210313 17:06:42.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.398" starttime="20210313 17:06:42.396"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.398" starttime="20210313 17:06:42.395"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['imappassword']}</arg>
<arg>${imappwd}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['imappassword']}</arg>
<arg>${imappwd}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.400" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.401" starttime="20210313 17:06:42.399"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.401" starttime="20210313 17:06:42.398"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['ispinencrypted']}</arg>
<arg>${pin_encrypted}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['ispinencrypted']}</arg>
<arg>${pin_encrypted}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.404" starttime="20210313 17:06:42.402"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.404" starttime="20210313 17:06:42.401"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['issubblocked']}</arg>
<arg>${NULL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['issubblocked']}</arg>
<arg>${NULL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.406" starttime="20210313 17:06:42.405"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.406" starttime="20210313 17:06:42.404"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['loginlevel']}</arg>
<arg>0</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['loginlevel']}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20210313 17:06:42.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.409" starttime="20210313 17:06:42.408"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.409" starttime="20210313 17:06:42.407"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['mailboxquota']}</arg>
<arg>${MailBoxQuota}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['mailboxquota']}</arg>
<arg>${MailBoxQuota}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.412" starttime="20210313 17:06:42.410"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.412" starttime="20210313 17:06:42.410"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['nut']}</arg>
<arg>${nut}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['nut']}</arg>
<arg>${nut}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.415" starttime="20210313 17:06:42.413"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.415" starttime="20210313 17:06:42.412"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['omavvmon']}</arg>
<arg>${omavvmon}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['omavvmon']}</arg>
<arg>${omavvmon}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.420" starttime="20210313 17:06:42.416"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.421" starttime="20210313 17:06:42.415"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['passwordhistory']}</arg>
<arg>ICwgLCAs</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['passwordhistory']}</arg>
<arg>ICwgLCAs</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.425" starttime="20210313 17:06:42.423"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.425" starttime="20210313 17:06:42.421"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['pin']}</arg>
<arg>${pinpwd}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['pin']}</arg>
<arg>${pinpwd}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.431" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.431" starttime="20210313 17:06:42.427"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.431" starttime="20210313 17:06:42.426"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['substatus']}</arg>
<arg>1</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['substatus']}</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20210313 17:06:42.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.436" starttime="20210313 17:06:42.434"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.436" starttime="20210313 17:06:42.433"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['vvmon']}</arg>
<arg>${vvmon}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['vvmon']}</arg>
<arg>${vvmon}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:42.440" starttime="20210313 17:06:42.438"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.441" starttime="20210313 17:06:42.437"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${json_out['uuid']}</arg>
<arg>[0-9a-f\-]+</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${json_out['uuid']}</arg>
<arg>[0-9a-f\-]+</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.444" starttime="20210313 17:06:42.442"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.444" starttime="20210313 17:06:42.441"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_out['swiftaccountid']}</arg>
</arguments>
<assign>
<var>${SWIFTACCOUNTID}</var>
</assign>
<msg timestamp="20210313 17:06:42.446" level="INFO">${SWIFTACCOUNTID} = AUTH_TMO_Auto_1</msg>
<status status="PASS" endtime="20210313 17:06:42.446" starttime="20210313 17:06:42.445"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SWIFTACCOUNTID}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.448" level="INFO">${SWIFTACCOUNTID} = AUTH_TMO_Auto_1</msg>
<status status="PASS" endtime="20210313 17:06:42.448" starttime="20210313 17:06:42.447"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${json_out['uuid']}</arg>
</arguments>
<assign>
<var>${USERID}</var>
</assign>
<msg timestamp="20210313 17:06:42.450" level="INFO">${USERID} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:06:42.450" starttime="20210313 17:06:42.449"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${USERID}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.452" level="INFO">${USERID} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:06:42.453" starttime="20210313 17:06:42.451"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.454" starttime="20210313 17:06:41.779"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.455" starttime="20210313 17:06:41.779"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.458" starttime="20210313 17:06:42.457"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:42.459" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:42.515" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:42.515" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:42.516" starttime="20210313 17:06:42.458"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:42.520" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:06:42.521" starttime="20210313 17:06:42.516"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:42.581" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:42.582" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:42.582" starttime="20210313 17:06:42.521"></status>
</kw>
<msg timestamp="20210313 17:06:42.582" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:42.582" starttime="20210313 17:06:42.456"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.585" starttime="20210313 17:06:42.584"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:42.586" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:42.664" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:42.664" starttime="20210313 17:06:42.586"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.665" starttime="20210313 17:06:42.583"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.667" starttime="20210313 17:06:42.667"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:42.668" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:42.820" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:42.821" starttime="20210313 17:06:42.668"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:06:42.823" level="INFO">11521 packets captured</msg>
<status status="PASS" endtime="20210313 17:06:42.823" starttime="20210313 17:06:42.821"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:42.873" level="INFO">23042 packets received by filter
246 packets dropped by kernel
date
Sun Mar 14 00:00:41 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"AddSubscriber_ValidateResponse"/"AddSubscriber_ValidateResponse".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"AddSubscriber_ValidateResponse"/"AddSubscriber_ValidateResponse".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:42.873" starttime="20210313 17:06:42.824"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.874" starttime="20210313 17:06:42.665"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.877" starttime="20210313 17:06:42.876"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.877" starttime="20210313 17:06:42.875"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:06:42.906" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:06:42.907" starttime="20210313 17:06:42.879"></status>
</kw>
<msg timestamp="20210313 17:06:42.907" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:06:42.907" starttime="20210313 17:06:42.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.910" starttime="20210313 17:06:42.908"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:42.910" starttime="20210313 17:06:42.455"></status>
</kw>
<doc>"Add new Subscriber and Validate response and cassandra users userfolderkeymap table"</doc>
<tags>
<tag>Provision</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:06:42.910" critical="yes" starttime="20210313 17:06:39.672"></status>
</test>
<test id="s1-t3" name="Deposit_PM_Message">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:42.919" starttime="20210313 17:06:42.917"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:42.920" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:42.978" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:42.979" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:42.979" starttime="20210313 17:06:42.919"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:43.021" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:06:43.022" starttime="20210313 17:06:42.980"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:43.040" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:43.041" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:43.041" starttime="20210313 17:06:43.022"></status>
</kw>
<msg timestamp="20210313 17:06:43.042" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:43.042" starttime="20210313 17:06:42.916"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:06:43.045" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:43.045" starttime="20210313 17:06:43.043"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:43.050" starttime="20210313 17:06:43.048"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:06:43.051" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:06:43.108" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:43.109" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:43.109" starttime="20210313 17:06:43.051"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:06:43.111" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:06:43.237" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:43.238" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:43.238" starttime="20210313 17:06:43.109"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:43.240" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:43.240" starttime="20210313 17:06:43.239"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:43.241" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:43.242" starttime="20210313 17:06:43.241"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:43.243" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:06:43.243" starttime="20210313 17:06:43.242"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:43.245" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:06:43.245" starttime="20210313 17:06:43.244"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:43.275" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:06:43.276" starttime="20210313 17:06:43.246"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:43.295" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:43.295" starttime="20210313 17:06:43.277"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:43.302" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:06:43.302" starttime="20210313 17:06:43.296"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:43.322" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:43.322" starttime="20210313 17:06:43.303"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:43.322" starttime="20210313 17:06:43.046"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:43.327" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:43.328" starttime="20210313 17:06:43.326"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:43.330" starttime="20210313 17:06:43.329"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:43.331" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:43.408" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:43.409" starttime="20210313 17:06:43.331"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:43.451" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deposit _PM_Message"</msg>
<status status="PASS" endtime="20210313 17:06:43.451" starttime="20210313 17:06:43.410"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:43.466" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:43.467" starttime="20210313 17:06:43.452"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:43.483" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Deposit_PM_Message"/"Deposit_PM_Message".log &amp;</msg>
<status status="PASS" endtime="20210313 17:06:43.484" starttime="20210313 17:06:43.468"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:43.494" level="INFO">[1] 3660
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:43.494" starttime="20210313 17:06:43.484"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:43.495" starttime="20210313 17:06:43.323"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:43.499" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:43.499" starttime="20210313 17:06:43.498"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:43.500" starttime="20210313 17:06:43.499"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:43.501" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:43.588" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:43.588" starttime="20210313 17:06:43.500"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:43.628" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deposit _PM_Message"</msg>
<status status="PASS" endtime="20210313 17:06:43.629" starttime="20210313 17:06:43.589"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:43.644" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:43.644" starttime="20210313 17:06:43.630"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:43.657" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Deposit_PM_Message"/"Deposit_PM_Message".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:06:43.657" starttime="20210313 17:06:43.645"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:43.667" level="INFO">[2] 3687
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:43.667" starttime="20210313 17:06:43.657"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:43.668" starttime="20210313 17:06:43.495"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:43.668" starttime="20210313 17:06:42.914"></status>
</kw>
<kw name="Deposit_Message" library="mStore_Digits_TMO_resources">
<arguments>
<arg>DIRECTION_VALUE=${DIRECTION}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${X_RCS_MSG_STATUS}' == 'Delivered'</arg>
<arg>delivery</arg>
<arg>display</arg>
</arguments>
<assign>
<var>${NOTIFICATION_METHOD}</var>
</assign>
<msg timestamp="20210313 17:06:43.676" level="INFO">${NOTIFICATION_METHOD} = delivery</msg>
<status status="PASS" endtime="20210313 17:06:43.676" starttime="20210313 17:06:43.674"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${object_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:43.678" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/Deposit_PM_Chat_Msg.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/Deposit_PM_Chat_Msg.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:06:43.679" level="INFO">${data} = ---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/","attributes":{"attribute":[{"name":"From","value":"${MSG_FROM}"},{"n...</msg>
<status status="PASS" endtime="20210313 17:06:43.679" starttime="20210313 17:06:43.677"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:43.684" level="INFO">${data} = ---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"RCSMessageStore/Chat/8888888880/","attributes":{"attribute":[{"name":"From","value":"tel:+9999999990"},{"name":"To...</msg>
<status status="PASS" endtime="20210313 17:06:43.684" starttime="20210313 17:06:43.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:06:43.686" level="INFO">---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"RCSMessageStore/Chat/8888888880/","attributes":{"attribute":[{"name":"From","value":"tel:+9999999990"},{"name":"To","value":"tel:+8888888880"},{"name":"Date","value":"2021-03-13T17:06:25Z"},{"name":"Conversation-ID","value":"2dbc584e-fc46-4a37-9a56-c2b93246d788"},{"name":"Contribution-ID","value":"e0a1029e-a48b-4ca6-b185-299dada439be"},{"name":"P-Asserted-Service","value":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"},{"name":"IMDN-Message-ID","value":"37857c02-005f-9b17-9322-b8423992923a"},{"name":"Direction","value":"In"},{"name":"X-DateTime","value":"1615655185"},{"name":"X-IMDN-Correlator","value":"8888888880_37857c02-005f-9b17-9322-b8423992923a"},{"name":"X-SIP-CallId","value":"005056884776-4d72-eb161700-1e2-571fa736-a0e46"},{"name":"Message-Context","value":"X-RCS-PM"}]}}}
---boundaryRMS123

Content-Type:Message/CPIM

From: &lt;tel:+9999999990?Accept-Contact=+sip.instance="&lt;urn:uuid:31abb8b3-0769-1032-9e9d-c5acf9ae46e1&gt;";require;explicit&gt;
To: &lt;tel:+8888888880&gt;
NS: imdn&lt;urn:ietf:params:imdn&gt;
imdn.Message-ID: 37857c02-005f-9b17-9322-b8423992923a
DateTime: 2021-03-13T17:06:25Z
imdn.Disposition-Notification: positive-delivery, display

Content-Type: text/plain;charset=UTF-8
Content-Length: 67

This is the new message we are depositing to test $@#^&amp;*!0123456789
---boundaryRMS123--
</msg>
<status status="PASS" endtime="20210313 17:06:43.686" starttime="20210313 17:06:43.685"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${payload_length}</var>
</assign>
<msg timestamp="20210313 17:06:43.689" level="INFO">Length is 1401</msg>
<msg timestamp="20210313 17:06:43.690" level="INFO">${payload_length} = 1401</msg>
<status status="PASS" endtime="20210313 17:06:43.690" starttime="20210313 17:06:43.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${payload_length}</arg>
</arguments>
<msg timestamp="20210313 17:06:43.691" level="INFO">1401</msg>
<status status="PASS" endtime="20210313 17:06:43.691" starttime="20210313 17:06:43.690"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${payload_length}</arg>
</arguments>
<msg timestamp="20210313 17:06:43.693" level="INFO">${payload_length} = 1401</msg>
<status status="PASS" endtime="20210313 17:06:43.693" starttime="20210313 17:06:43.692"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${url}${UserId}/objects</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:06:45.028" level="INFO">Post Request using : alias=mStoreService, uri=/rmsclient/nms/v1/rms/tel%3a%2b8888888880/objects, data=&lt;multipart/form-data;boundary="-boundaryRMS123";&gt;, headers={'Content-Type': 'multipart/form-data;boundary="-boundaryRMS123";', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:06:45.029" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:45.029" starttime="20210313 17:06:43.694"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:06:45.031" level="INFO">${response_status_code} = 201</msg>
<status status="PASS" endtime="20210313 17:06:45.031" starttime="20210313 17:06:45.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:06:45.032" level="INFO">201</msg>
<status status="PASS" endtime="20210313 17:06:45.033" starttime="20210313 17:06:45.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:06:45.039" level="INFO">{"objectReference":{"resourceURL":"http://10.10.219.141:80/host/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf"}}</msg>
<status status="PASS" endtime="20210313 17:06:45.039" starttime="20210313 17:06:45.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:45.042" level="INFO">{'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:Mk8XYZIbrnNX79YclPc1yZBnRze3DScP-slot:1-instId:1-subOid:23-time:2021-03-14T00:00:44Z-localFqdn:10.10.219.141', 'content-length': '191', 'server': 'Mavenir Web Application Server', 'location': 'http://10.10.219.141:80/host/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', 'date': 'Sun, 14 Mar 2021 00:00:43 GMT', 'content-type': 'application/json'}</msg>
<status status="PASS" endtime="20210313 17:06:45.043" starttime="20210313 17:06:45.041"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>201</arg>
<arg>msg="deliver pm msg is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:45.045" starttime="20210313 17:06:45.043"></status>
</kw>
<msg timestamp="20210313 17:06:45.045" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:45.045" starttime="20210313 17:06:43.669"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()['objectReference']['resourceURL']}</arg>
</arguments>
<assign>
<var>${resource_url}</var>
</assign>
<msg timestamp="20210313 17:06:45.048" level="INFO">${resource_url} = http://10.10.219.141:80/host/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:45.048" starttime="20210313 17:06:45.046"></status>
</kw>
<kw name="Fetch From Right" library="String">
<doc>Returns contents of the ``string`` after the last occurrence of ``marker``.</doc>
<arguments>
<arg>${resource_url}</arg>
<arg>/</arg>
</arguments>
<assign>
<var>${resource_url}</var>
</assign>
<msg timestamp="20210313 17:06:45.050" level="INFO">${resource_url} = UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:45.050" starttime="20210313 17:06:45.049"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resource_url}</arg>
<arg>%3a</arg>
</arguments>
<assign>
<var>${resource_url}</var>
</assign>
<msg timestamp="20210313 17:06:45.052" level="INFO">${resource_url} = [u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d', u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf']</msg>
<status status="PASS" endtime="20210313 17:06:45.052" starttime="20210313 17:06:45.051"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${resource_url[0]}</arg>
<arg>%3d</arg>
<arg>=</arg>
</arguments>
<assign>
<var>${r_url}</var>
</assign>
<msg timestamp="20210313 17:06:45.054" level="INFO">${r_url} = UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:06:45.054" starttime="20210313 17:06:45.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resource_url}</arg>
</arguments>
<msg timestamp="20210313 17:06:45.055" level="INFO">[u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d', u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf']</msg>
<status status="PASS" endtime="20210313 17:06:45.056" starttime="20210313 17:06:45.054"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20210313 17:06:46.057" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20210313 17:06:46.058" starttime="20210313 17:06:45.056"></status>
</kw>
<kw name="GetServicerequest" library="mStore_Generic_resources">
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<kw name="Get One Request" library="Socket_PNS_NMS">
<arguments>
<arg>${service}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<msg timestamp="20210313 17:06:46.062" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286d00&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.063" starttime="20210313 17:06:46.060"></status>
</kw>
<msg timestamp="20210313 17:06:46.063" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286d00&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.063" starttime="20210313 17:06:46.058"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.065" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286d00&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.065" starttime="20210313 17:06:46.064"></status>
</kw>
<kw name="GetRequestData" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${headers}</var>
<var>${req_body}</var>
<var>${version}</var>
</assign>
<kw name="Read Request Body" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:46.068" level="INFO">${data} = (&lt;mimetools.Message instance at 0x31ceb48&gt;, '{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Ch...</msg>
<status status="PASS" endtime="20210313 17:06:46.068" starttime="20210313 17:06:46.067"></status>
</kw>
<msg timestamp="20210313 17:06:46.069" level="INFO">${headers} = Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-ConnId:Mk8XYZIbrnNX79YclPc1yZBnRze3DScP-slot...</msg>
<msg timestamp="20210313 17:06:46.069" level="INFO">${req_body} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Chat","pns-time":"2021-03-14T00:00:44.821","nms...</msg>
<msg timestamp="20210313 17:06:46.069" level="INFO">${version} = HTTP/1.1</msg>
<status status="PASS" endtime="20210313 17:06:46.069" starttime="20210313 17:06:46.066"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RCS_PARENT_FOLDER_KEY}</arg>
<arg>${Generic_Cos_Path_Ids['${RCS_PARENT_PATH}']}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.071" level="INFO">${RCS_PARENT_FOLDER_KEY} = fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:06:46.072" starttime="20210313 17:06:46.070"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${RCS_MESSAGE_FOLDER_KEY}</arg>
<arg>${r_url}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.086" level="INFO">${RCS_MESSAGE_FOLDER_KEY} = UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:06:46.086" starttime="20210313 17:06:46.072"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CREATION_TUID}</arg>
<arg>${resource_url[-1]}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.101" level="INFO">${CREATION_TUID} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.101" starttime="20210313 17:06:46.088"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${resource_url[0]}</arg>
<arg>%3d</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${r_url1}</var>
</assign>
<msg timestamp="20210313 17:06:46.103" level="INFO">${r_url1} = UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8</msg>
<status status="PASS" endtime="20210313 17:06:46.103" starttime="20210313 17:06:46.102"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${msgFolderkey1}</arg>
<arg>${r_url1}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.117" level="INFO">${msgFolderkey1} = UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8</msg>
<status status="PASS" endtime="20210313 17:06:46.117" starttime="20210313 17:06:46.104"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resource_url[1]}</arg>
</arguments>
<assign>
<var>${uid}</var>
</assign>
<msg timestamp="20210313 17:06:46.119" level="INFO">${uid} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.119" starttime="20210313 17:06:46.118"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${UID}</arg>
<arg>${uid}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.121" level="INFO">${UID} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.121" starttime="20210313 17:06:46.120"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ValidateChatPNSNotfn</arg>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>direction=${DIRECTION}</arg>
<arg>msgStatus=RECENT</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<assign>
<var>${pns_status}</var>
<var>${value}</var>
</assign>
<kw name="ValidateChatPNSNotfn" library="mStore_Digits_TMO_resources">
<arguments>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>direction=${DIRECTION}</arg>
<arg>msgStatus=RECENT</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.128" level="INFO">Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-ConnId:Mk8XYZIbrnNX79YclPc1yZBnRze3DScP-slot:0-instId:1-subOid:65656-time:2021-03-14T00:00:44.000-localFqdn:10.10.219.141
Host: pns.server.mavenir1.com:8060
Content-Length: 1611
</msg>
<status status="PASS" endtime="20210313 17:06:46.128" starttime="20210313 17:06:46.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.129" level="INFO">{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Chat","pns-time":"2021-03-14T00:00:44.821","nmsEventList":{"nmsEvent":[{"changedObject":{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","flags":{"flag":["\\RECENT"]},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a","message":{"store":"RCSMessageStore/Chat/8888888880/","objectURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","direction":"In","message-time":"2021-03-13T09:06:25.000-08:00","status":"RECENT","sender":"tel:+9999999990","recipients":[{"uri":"tel:+8888888880"}],"imdn-message-id":"37857c02-005f-9b17-9322-b8423992923a","content":[{"content-type":"text/plain","content-size":"67","charset":"UTF-8","content-transfer-encoding":"quoted-printable","content":"This is the new message we are depositing to test $@#^&amp;*!0123456789","rcs-data":{"sip-call-id":"005056884776-4d72-eb161700-1e2-571fa736-a0e46","feature-tag":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","p-asserted-service":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","contribution-id":"e0a1029e-a48b-4ca6-b185-299dada439be","conversation-id":"2dbc584e-fc46-4a37-9a56-c2b93246d788"}}]}}}]}}}</msg>
<status status="PASS" endtime="20210313 17:06:46.130" starttime="20210313 17:06:46.129"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_resource_url}</var>
</assign>
<msg timestamp="20210313 17:06:46.131" level="INFO">${pns_resource_url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.132" starttime="20210313 17:06:46.130"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_object_Url}</var>
</assign>
<msg timestamp="20210313 17:06:46.133" level="INFO">${pns_object_Url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.133" starttime="20210313 17:06:46.132"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${pns_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:06:46.135" level="INFO">${pns_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:06:46.135" starttime="20210313 17:06:46.134"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:06:46.136" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Chat","pns-time":"2021-03-14T00:00:44.821","nms...</msg>
<status status="PASS" endtime="20210313 17:06:46.136" starttime="20210313 17:06:46.136"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>\\</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:06:46.138" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Chat","pns-time":"2021-03-14T00:00:44.821","nms...</msg>
<status status="PASS" endtime="20210313 17:06:46.138" starttime="20210313 17:06:46.137"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''',strict=False)</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_out}</var>
</assign>
<msg timestamp="20210313 17:06:46.141" level="INFO">${json_out} = {u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4...</msg>
<status status="PASS" endtime="20210313 17:06:46.141" starttime="20210313 17:06:46.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_out}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.142" level="INFO">{u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'message': {u'status': u'RECENT', u'message-time': u'2021-03-13T09:06:25.000-08:00', u'direction': u'In', u'sender': u'tel:+9999999990', u'recipients': [{u'uri': u'tel:+8888888880'}], u'imdn-message-id': u'37857c02-005f-9b17-9322-b8423992923a', u'objectURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'content': [{u'content-transfer-encoding': u'quoted-printable', u'rcs-data': {u'sip-call-id': u'005056884776-4d72-eb161700-1e2-571fa736-a0e46', u'p-asserted-service': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'conversation-id': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'feature-tag': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'contribution-id': u'e0a1029e-a48b-4ca6-b185-299dada439be'}, u'charset': u'UTF-8', u'content-size': u'67', u'content': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'content-type': u'text/plain'}], u'store': u'RCSMessageStore/Chat/8888888880/'}, u'flags': {u'flag': [u'RECENT']}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}}]}, u'pns-subtype': u'Chat', u'recipients': [{u'uri': u'tel:+8888888880'}], u'pns-time': u'2021-03-14T00:00:44.821', u'pns-type': u'RCSPage', u'serviceName': u'SyncApp', u'TTL': u'600', u'channel': u'pns_channe'}}</msg>
<status status="PASS" endtime="20210313 17:06:46.143" starttime="20210313 17:06:46.141"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PNS_OBJECT_URL}</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.146" level="INFO">${PNS_OBJECT_URL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.146" starttime="20210313 17:06:46.144"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>https://${service_root_path}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${OBJECT_URL}</var>
</assign>
<msg timestamp="20210313 17:06:46.149" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.150" starttime="20210313 17:06:46.147"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OBJECT_URL}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.151" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:46.151" starttime="20210313 17:06:46.150"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:06:46.153" level="INFO">${status_msg} = [u'RECENT']</msg>
<status status="PASS" endtime="20210313 17:06:46.153" starttime="20210313 17:06:46.152"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:06:46.155" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:06:46.156" level="INFO">${len_msg_status} = 1</msg>
<status status="PASS" endtime="20210313 17:06:46.156" starttime="20210313 17:06:46.154"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${len_response_body}</var>
</assign>
<msg timestamp="20210313 17:06:46.157" level="INFO">Length is 1611</msg>
<msg timestamp="20210313 17:06:46.157" level="INFO">${len_response_body} = 1611</msg>
<status status="PASS" endtime="20210313 17:06:46.158" starttime="20210313 17:06:46.156"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.162" starttime="20210313 17:06:46.160"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.162" starttime="20210313 17:06:46.159"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.162" starttime="20210313 17:06:46.158"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.165" starttime="20210313 17:06:46.164"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.166" starttime="20210313 17:06:46.163"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.169" starttime="20210313 17:06:46.167"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.169" starttime="20210313 17:06:46.166"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.173" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.174" starttime="20210313 17:06:46.172"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.174" starttime="20210313 17:06:46.171"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.174" starttime="20210313 17:06:46.170"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.177" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.177" starttime="20210313 17:06:46.176"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.177" starttime="20210313 17:06:46.175"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword and Continue on Failure</arg>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.193" level="FAIL">Resolving variable '${headers['X-mStoreFE-Addr']}' failed: Variable '${headers}' not found. Did you mean:
    ${pns_headers}</msg>
<status status="FAIL" endtime="20210313 17:06:46.194" starttime="20210313 17:06:46.180"></status>
</kw>
<status status="FAIL" endtime="20210313 17:06:46.194" starttime="20210313 17:06:46.179"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.194" starttime="20210313 17:06:46.178"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.197" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.197" starttime="20210313 17:06:46.195"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.197" starttime="20210313 17:06:46.195"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.199" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.199" starttime="20210313 17:06:46.198"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.200" starttime="20210313 17:06:46.198"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.202" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.202" starttime="20210313 17:06:46.201"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.202" starttime="20210313 17:06:46.200"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.205" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.205" starttime="20210313 17:06:46.204"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.205" starttime="20210313 17:06:46.203"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.207" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.208" starttime="20210313 17:06:46.206"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.208" starttime="20210313 17:06:46.206"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.210" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.210" starttime="20210313 17:06:46.209"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.210" starttime="20210313 17:06:46.208"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.213" starttime="20210313 17:06:46.212"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.213" starttime="20210313 17:06:46.211"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.216" starttime="20210313 17:06:46.214"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.216" starttime="20210313 17:06:46.214"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.218" starttime="20210313 17:06:46.217"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.218" starttime="20210313 17:06:46.216"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.220" starttime="20210313 17:06:46.219"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.220" starttime="20210313 17:06:46.218"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.223" starttime="20210313 17:06:46.222"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.223" starttime="20210313 17:06:46.221"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.226" starttime="20210313 17:06:46.225"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.226" starttime="20210313 17:06:46.224"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.228" starttime="20210313 17:06:46.227"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.228" starttime="20210313 17:06:46.226"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.231" starttime="20210313 17:06:46.230"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.231" starttime="20210313 17:06:46.229"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.235" starttime="20210313 17:06:46.232"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.235" starttime="20210313 17:06:46.231"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.237" starttime="20210313 17:06:46.236"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.237" starttime="20210313 17:06:46.235"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.239" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.240" starttime="20210313 17:06:46.238"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.240" starttime="20210313 17:06:46.238"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.243" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.244" starttime="20210313 17:06:46.242"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.244" starttime="20210313 17:06:46.241"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.244" starttime="20210313 17:06:46.240"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.247" starttime="20210313 17:06:46.245"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.247" starttime="20210313 17:06:46.244"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' != 'deposit'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:06:46.248" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:06:46.249" starttime="20210313 17:06:46.248"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:06:46.250" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:06:46.250" starttime="20210313 17:06:46.249"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.252" starttime="20210313 17:06:46.251"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.252" starttime="20210313 17:06:46.250"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.255" starttime="20210313 17:06:46.254"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.255" starttime="20210313 17:06:46.253"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.258" starttime="20210313 17:06:46.256"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.258" starttime="20210313 17:06:46.256"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.260" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.261" starttime="20210313 17:06:46.259"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.261" starttime="20210313 17:06:46.258"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.263" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.263" starttime="20210313 17:06:46.262"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.263" starttime="20210313 17:06:46.261"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.266" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.266" starttime="20210313 17:06:46.264"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.266" starttime="20210313 17:06:46.264"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.268" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.268" starttime="20210313 17:06:46.267"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.268" starttime="20210313 17:06:46.266"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.271" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.272" starttime="20210313 17:06:46.270"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.272" starttime="20210313 17:06:46.269"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.275" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.275" starttime="20210313 17:06:46.273"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.275" starttime="20210313 17:06:46.272"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.278" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.278" starttime="20210313 17:06:46.277"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.279" starttime="20210313 17:06:46.276"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.281" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.282" starttime="20210313 17:06:46.280"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.282" starttime="20210313 17:06:46.279"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.284" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.285" starttime="20210313 17:06:46.283"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.285" starttime="20210313 17:06:46.282"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.288" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:46.288" starttime="20210313 17:06:46.286"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.289" starttime="20210313 17:06:46.286"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.289" starttime="20210313 17:06:46.123"></status>
</kw>
<msg timestamp="20210313 17:06:46.289" level="INFO">${pns_status} = PASS</msg>
<msg timestamp="20210313 17:06:46.289" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20210313 17:06:46.289" starttime="20210313 17:06:46.122"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="SendResponse" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
</arguments>
<kw name="Sendresponse Code" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
<arg>${response_code}</arg>
<arg>${message}</arg>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.296" starttime="20210313 17:06:46.294"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.297" starttime="20210313 17:06:46.293"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.298" starttime="20210313 17:06:46.291"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:46.298" starttime="20210313 17:06:46.290"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraMessagesTable_C44</arg>
<arg>userId=${USERID}</arg>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>uid=${UID}</arg>
</arguments>
<kw name="ValidateCassandraMessagesTable_C44" library="mStore_Digits_TMO_resources">
<arguments>
<arg>userId=${USERID}</arg>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>uid=${UID}</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:46.304" starttime="20210313 17:06:46.303"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from messages_by_root_folder_timestamp where userid='${userId}' and rootfolderkey='${parent_folder_key}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:06:46.948" level="INFO">select json * from messages_by_root_folder_timestamp wh ere userid='4feb706c-8458-11eb-b7ec-005056ae42da' and rootfolderkey='fb830d1d-a4 a5-4f58-a3ad-740be2fd2fc6' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6742a1b2b f;</msg>
<status status="PASS" endtime="20210313 17:06:46.949" starttime="20210313 17:06:46.304"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:06:46.975" level="INFO">[json]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 0, "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "imdn_disposition_data": null, "modification_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "recent": 1, "saved": null, "seen": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:46.976" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:06:46.976" starttime="20210313 17:06:46.950"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:06:46.978" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:06:46.978" starttime="20210313 17:06:46.976"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:06:46.979" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:06:46.979" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 0, "fol...</msg>
<status status="PASS" endtime="20210313 17:06:46.979" starttime="20210313 17:06:46.978"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages}</var>
</assign>
<msg timestamp="20210313 17:06:46.981" level="INFO">${messages} = {u'delivered': 0, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'...</msg>
<status status="PASS" endtime="20210313 17:06:46.981" starttime="20210313 17:06:46.980"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages}</arg>
</arguments>
<msg timestamp="20210313 17:06:46.982" level="INFO">{u'delivered': 0, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'seen': 0, u'saved': None, u'recent': 1}</msg>
<status status="PASS" endtime="20210313 17:06:46.982" starttime="20210313 17:06:46.981"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from messages_by_original_folder_timestamp where userid='${userId}' and folderkey='${message_folder_key}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:06:47.618" level="INFO">select json * from messages_by_original_folder_timestam p where userid='4feb706c-8458-11eb-b7ec-005056ae42da' and folderkey='UkNTTWVzc2F nZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6 742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:06:47.619" starttime="20210313 17:06:46.983"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:06:47.840" level="INFO">[json]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": null, "bcc": null, "blockedmsgreasoncode": "", "bodyoctets": 67, "bucketkey": null, "bulletinid": null, "cc": null, "chunksize": null, "cnsbulletinon": null, "cnsgreetingon": 0, "contentdisposition": null, "contentencoding": "quoted-printable", "contenttype": "text/plain", "contributionid": "e0a1029e-a48b-4ca6-b185-299dada439be", "conversationid": "2dbc584e-fc46-4a37-9a56-c2b93246d788", "cpim": null, "creation_ts": "2021-03-14T00:00:43.793000", "creationdate": null, "deleted": 0, "delivered": 0, "deliveredimdnlist": null, "direction": null, "draft": 0, "expirytimestamp": null, "flagged": 0, "fromheader": "tel:+9999999990", "geolocation": null, "greetingname": "Greeting", "greetingtelnumber": null, "imapmsgheaders": "Content-type: text/plain;charset=UTF-8\\r\\nDate: Sat, 13 Mar 2021 17:06:25 +0000\\r\\nMessage-Context: X-RCS-PM\\r\\nDirection: In\\r\\nTo: tel:+8888888880\\r\\nFrom: tel:+9999999990\\r\\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\\r\\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\\r\\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\\r\\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\\r\\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\\r\\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\\r\\n\\r\\n", "imdn_disposition_data": null, "imdnmessageid": "37857c02-005f-9b17-9322-b8423992923a", "inprocess": null, "internaldate": "2021-03-13T17:06:25Z", "ismodifiedevent": null, "lastmodseq": null, "mdnflag": null, "message": "This is the new message we are depositing to test $@#^&amp;*!0123456789", "messageaction": null, "messagecontext": "X-RCS-PM", "messageid": "", "messagetype": "", "messageversion": null, "mimeversion": "", "modification_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "mstore_version": "vm_2_1", "nscorrelationid": null, "numberofchunks": null, "objheaders": null, "originalfolderkey": null, "payloadheaders": "", "priority": -1, "protection": null, "purgenotify": null, "purgeuuid": null, "readimdnlist": null, "recent": 1, "recordlen": null, "replytonumber": null, "requestjson": null, "returnreceiptflag": null, "rfc2822size": 1401, "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "saved": null, "seen": 0, "sensitivity": null, "smscallbacknum": null, "sourcenode": null, "storageobjtype": "", "subject": "", "swiftobjurl": "/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "swiftpointer": 0, "thumbnailcontent": null, "timezone": null, "toheader": "tel:+8888888880", "tpdata": "", "tpdatatype": "", "transcriptresult": null, "transcriptstates": null, "uid": null, "user": null, "useractivity": null, "userdefinedflagname": "$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,", "userdefinedflagvalue": "0,0,0,0,0,0,0,", "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "xcontentpages": null, "xfuturedeliverytimestamp": null, "xorgvmuid": null}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:47.841" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:06:47.841" starttime="20210313 17:06:47.619"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:06:47.843" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:06:47.843" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": n...</msg>
<status status="PASS" endtime="20210313 17:06:47.843" starttime="20210313 17:06:47.842"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages_by_folders}</var>
</assign>
<msg timestamp="20210313 17:06:47.845" level="INFO">${messages_by_folders} = {u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid...</msg>
<status status="PASS" endtime="20210313 17:06:47.846" starttime="20210313 17:06:47.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages_by_folders}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.847" level="INFO">{u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'cpim': None, u'sensitivity': None, u'smscallbacknum': None, u'contentdisposition': None, u'internaldate': u'2021-03-13T17:06:25Z', u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'flagged': 0, u'bucketkey': None, u'imdn_disposition_data': None, u'contributionid': u'e0a1029e-a48b-4ca6-b185-299dada439be', u'requestjson': None, u'xorgvmuid': None, u'bodyoctets': 67, u'userdefinedflagname': u'$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,', u'subject': u'', u'delivered': 0, u'useractivity': None, u'contenttype': u'text/plain', u'mstore_version': u'vm_2_1', u'messageaction': None, u'chunksize': None, u'deleted': 0, u'contentencoding': u'quoted-printable', u'protection': None, u'cnsgreetingon': 0, u'mdnflag': None, u'xfuturedeliverytimestamp': None, u'uuid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'toheader': u'tel:+8888888880', u'nscorrelationid': None, u'readimdnlist': None, u'purgenotify': None, u'conversationid': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'objheaders': None, u'geolocation': None, u'sourcenode': None, u'cc': None, u'cnsbulletinon': None, u'imapmsgheaders': u'Content-type: text/plain;charset=UTF-8\r\nDate: Sat, 13 Mar 2021 17:06:25 +0000\r\nMessage-Context: X-RCS-PM\r\nDirection: In\r\nTo: tel:+8888888880\r\nFrom: tel:+9999999990\r\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\r\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\r\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\r\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\r\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\r\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\r\n\r\n', u'message': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'creation_ts': u'2021-03-14T00:00:43.793000', u'uid': None, u'blockedmsgreasoncode': u'', u'lastmodseq': None, u'inprocess': None, u'priority': -1, u'draft': 0, u'purgeuuid': None, u'fromheader': u'tel:+9999999990', u'direction': None, u'storageobjtype': u'', u'deliveredimdnlist': None, u'messagecontext': u'X-RCS-PM', u'tpdatatype': u'', u'ismodifiedevent': None, u'returnreceiptflag': None, u'originalfolderkey': None, u'messageversion': None, u'replytonumber': None, u'bulletinid': None, u'mimeversion': u'', u'timezone': None, u'seen': 0, u'recordlen': None, u'swiftobjurl': u'/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'imdnmessageid': u'37857c02-005f-9b17-9322-b8423992923a', u'messagetype': u'', u'thumbnailcontent': None, u'swiftpointer': 0, u'tpdata': u'', u'numberofchunks': None, u'userdefinedflagvalue': u'0,0,0,0,0,0,0,', u'user': None, u'attributes': None, u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'transcriptresult': None, u'recent': 1, u'xcontentpages': None, u'greetingtelnumber': None, u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'bcc': None, u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'creationdate': None}</msg>
<status status="PASS" endtime="20210313 17:06:47.848" starttime="20210313 17:06:47.846"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${to_header}</arg>
</arguments>
<assign>
<var>${members}</var>
</assign>
<msg timestamp="20210313 17:06:47.850" level="INFO">${members} = tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:06:47.850" starttime="20210313 17:06:47.849"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${to_members}</var>
</assign>
<msg timestamp="20210313 17:06:47.851" level="INFO">${to_members} = </msg>
<status status="PASS" endtime="20210313 17:06:47.852" starttime="20210313 17:06:47.850"></status>
</kw>
<kw type="for" name="${member} IN [ ${members} ]">
<kw type="foritem" name="${member} = tel:+8888888880">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${to_members},${member}</arg>
</arguments>
<assign>
<var>${to_members}</var>
</assign>
<msg timestamp="20210313 17:06:47.854" level="INFO">${to_members} = ,tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:06:47.854" starttime="20210313 17:06:47.853"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.854" starttime="20210313 17:06:47.852"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.854" starttime="20210313 17:06:47.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${to_header}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.855" level="INFO">tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:06:47.855" starttime="20210313 17:06:47.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${to_members}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.856" level="INFO">,tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:06:47.856" starttime="20210313 17:06:47.855"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.860" starttime="20210313 17:06:47.859"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.860" starttime="20210313 17:06:47.858"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['rootfolderkey']}</arg>
<arg>${parent_folder_key}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['rootfolderkey']}</arg>
<arg>${parent_folder_key}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.864" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.864" starttime="20210313 17:06:47.862"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.864" starttime="20210313 17:06:47.861"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.866" starttime="20210313 17:06:47.865"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.867" starttime="20210313 17:06:47.864"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.870" starttime="20210313 17:06:47.869"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.870" starttime="20210313 17:06:47.867"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.874" starttime="20210313 17:06:47.872"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.874" starttime="20210313 17:06:47.871"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.877" starttime="20210313 17:06:47.875"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.877" starttime="20210313 17:06:47.875"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.880" starttime="20210313 17:06:47.878"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.880" starttime="20210313 17:06:47.877"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['imdn_disposition_data']}</arg>
<arg>${NULL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['imdn_disposition_data']}</arg>
<arg>${NULL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.883" starttime="20210313 17:06:47.881"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.883" starttime="20210313 17:06:47.880"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['saved']}</arg>
<arg>${NULL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['saved']}</arg>
<arg>${NULL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.885" starttime="20210313 17:06:47.884"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.886" starttime="20210313 17:06:47.883"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${modification_tuid}</arg>
<arg>${messages['modification_tuid']}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.907" level="INFO">${modification_tuid} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:47.908" starttime="20210313 17:06:47.886"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.911" starttime="20210313 17:06:47.909"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.911" starttime="20210313 17:06:47.908"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.914" starttime="20210313 17:06:47.913"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.914" starttime="20210313 17:06:47.912"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.917" starttime="20210313 17:06:47.915"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.917" starttime="20210313 17:06:47.915"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['rootfolderkey']}</arg>
<arg>${RCS_PARENT_FOLDER_KEY}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['rootfolderkey']}</arg>
<arg>${RCS_PARENT_FOLDER_KEY}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.919" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.919" starttime="20210313 17:06:47.918"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.919" starttime="20210313 17:06:47.917"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.922" starttime="20210313 17:06:47.920"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.922" starttime="20210313 17:06:47.920"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.924" starttime="20210313 17:06:47.923"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.924" starttime="20210313 17:06:47.922"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<msg timestamp="20210313 17:06:47.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:47.927" starttime="20210313 17:06:47.926"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.927" starttime="20210313 17:06:47.925"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.929" starttime="20210313 17:06:47.928"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.930" starttime="20210313 17:06:47.928"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['imdn_disposition_data']}</arg>
<arg>${NONE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['imdn_disposition_data']}</arg>
<arg>${NONE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.932" starttime="20210313 17:06:47.931"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.932" starttime="20210313 17:06:47.930"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.934" starttime="20210313 17:06:47.933"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.935" starttime="20210313 17:06:47.932"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['saved']}</arg>
<arg>${read_imdn_list}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['saved']}</arg>
<arg>${read_imdn_list}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.938" starttime="20210313 17:06:47.936"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:47.939" starttime="20210313 17:06:47.935"></status>
</kw>
<kw name="ValidateCassandraMessagesTableTTLTMO" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${creation_tuid}</arg>
<arg>messages_creation_ts=${messages["creation_tuid"]}</arg>
<arg>message_folder_key=${message_folder_key}</arg>
<arg>parent_folderkey=${parent_folder_key}</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:47.944" starttime="20210313 17:06:47.943"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON userid,TTL(delivered) ,TTL(messagecontext) ,TTL(contenttype) ,TTL(recent),TTL(seen) from messages_by_original_folder_timestamp where userid ='${userId}' and folderkey='${message_folder_key}' and creation_tuid=${uid};</arg>
</arguments>
<msg timestamp="20210313 17:06:48.622" level="INFO">SELECT JSON userid,TTL(delivered) ,TTL(messagecontext)  ,TTL(contenttype) ,TTL(recent),TTL(seen) from messages_by_original_folder_timest amp where userid ='4feb706c-8458-11eb-b7ec-005056ae42da' and folderkey='UkNTTWVz c2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' and creation_tuid=51b3d2e1-8458-11eb-83b6- 5d6742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:06:48.623" starttime="20210313 17:06:47.944"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:06:49.347" level="INFO">[json]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604796, "ttl(messagecontext)": 604796, "ttl(contenttype)": 604796, "ttl(recent)": 604796, "ttl(seen)": 604796}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:49.348" level="INFO">${out} = 
 [json]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"use...</msg>
<status status="PASS" endtime="20210313 17:06:49.348" starttime="20210313 17:06:48.623"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON userid,TTL(delivered),TTL(folderkey),TTL(imdn_disposition_data),TTL(modification_tuid),TTL(recent),TTL(seen) from messages_by_root_folder_timestamp where userid ='${userId}' and folderkey='${message_folder_key}' and creation_tuid=${uid} ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:06:49.977" level="INFO">SELECT JSON userid,TTL(delivered),TTL(folderkey),TTL(im dn_disposition_data),TTL(modification_tuid),TTL(recent),TTL(seen) from messages_ by_root_folder_timestamp where userid ='4feb706c-8458-11eb-b7ec-005056ae42da' an d folderkey='UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' and creation_tuid=51b 3d2e1-8458-11eb-83b6-5d6742a1b2bf ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:06:49.977" starttime="20210313 17:06:49.349"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${out1}</var>
</assign>
<msg timestamp="20210313 17:06:52.001" level="INFO">[json]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604794, "ttl(folderkey)": 604794, "ttl(imdn_disposition_data)": null, "ttl(modification_tuid)": 604794, "ttl(recent)": 604794, "ttl(seen)": 604794}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:52.002" level="INFO">${out1} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:06:52.002" starttime="20210313 17:06:49.978"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:06:52.003" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:06:52.004" starttime="20210313 17:06:52.003"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${msg_res}</var>
</assign>
<msg timestamp="20210313 17:06:52.005" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:06:52.006" level="INFO">${msg_res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604796, "ttl(messagecontext)": 604796, "ttl(contenttype)": 604796, "ttl(recent)": 604796, "ttl(seen)": 604796}</msg>
<status status="PASS" endtime="20210313 17:06:52.006" starttime="20210313 17:06:52.004"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out1}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${fld_res}</var>
</assign>
<msg timestamp="20210313 17:06:52.007" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:06:52.007" level="INFO">${fld_res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604794, "ttl(folderkey)": 604794, "ttl(imdn_disposition_data)": null, "ttl(modification_tuid)": 604794, "ttl(recent)": 604794, "tt...</msg>
<status status="PASS" endtime="20210313 17:06:52.007" starttime="20210313 17:06:52.006"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${msg_res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages}</var>
</assign>
<msg timestamp="20210313 17:06:52.010" level="INFO">${messages} = {u'ttl(delivered)': 604796, u'ttl(messagecontext)': 604796, u'ttl(seen)': 604796, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(recent)': 604796, u'ttl(contenttype)': 604796}</msg>
<status status="PASS" endtime="20210313 17:06:52.010" starttime="20210313 17:06:52.008"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${fld_res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages_by_folder}</var>
</assign>
<msg timestamp="20210313 17:06:52.012" level="INFO">${messages_by_folder} = {u'ttl(folderkey)': 604794, u'ttl(delivered)': 604794, u'ttl(seen)': 604794, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(imdn_disposition_data)': None, u'ttl(recent)': 604794, u'ttl(modi...</msg>
<status status="PASS" endtime="20210313 17:06:52.012" starttime="20210313 17:06:52.011"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages}</arg>
</arguments>
<msg timestamp="20210313 17:06:52.013" level="INFO">{u'ttl(delivered)': 604796, u'ttl(messagecontext)': 604796, u'ttl(seen)': 604796, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(recent)': 604796, u'ttl(contenttype)': 604796}</msg>
<status status="PASS" endtime="20210313 17:06:52.013" starttime="20210313 17:06:52.012"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages_by_folder}</arg>
</arguments>
<msg timestamp="20210313 17:06:52.015" level="INFO">{u'ttl(folderkey)': 604794, u'ttl(delivered)': 604794, u'ttl(seen)': 604794, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(imdn_disposition_data)': None, u'ttl(recent)': 604794, u'ttl(modification_tuid)': 604794}</msg>
<status status="PASS" endtime="20210313 17:06:52.015" starttime="20210313 17:06:52.014"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(messagecontext)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.018" starttime="20210313 17:06:52.017"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.019" starttime="20210313 17:06:52.015"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(recent)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(recent)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.021" starttime="20210313 17:06:52.020"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.022" starttime="20210313 17:06:52.019"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(contenttype)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(contenttype)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.025" starttime="20210313 17:06:52.023"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.025" starttime="20210313 17:06:52.022"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(seen)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(seen)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.028" starttime="20210313 17:06:52.026"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.028" starttime="20210313 17:06:52.026"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.030" starttime="20210313 17:06:52.029"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.030" starttime="20210313 17:06:52.028"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.033" starttime="20210313 17:06:52.031"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.033" starttime="20210313 17:06:52.031"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.036" starttime="20210313 17:06:52.034"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.036" starttime="20210313 17:06:52.033"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.038" starttime="20210313 17:06:52.037"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.039" starttime="20210313 17:06:52.036"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(recent)']}</arg>
<arg>${messages_by_folder['ttl(recent)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(recent)']}</arg>
<arg>${messages_by_folder['ttl(recent)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.041" starttime="20210313 17:06:52.040"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.041" starttime="20210313 17:06:52.039"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(seen)']}</arg>
<arg>${messages_by_folder['ttl(seen)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(seen)']}</arg>
<arg>${messages_by_folder['ttl(seen)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.043" starttime="20210313 17:06:52.042"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.044" starttime="20210313 17:06:52.042"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.044" starttime="20210313 17:06:47.939"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.044" starttime="20210313 17:06:46.300"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.044" starttime="20210313 17:06:46.299"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraIMDNMapping</arg>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="ValidateCassandraIMDNMapping" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${SUBSCRIBER_ID}_${imdn_msg_id}</arg>
</arguments>
<assign>
<var>${imdncorrelator}</var>
</assign>
<msg timestamp="20210313 17:06:52.051" level="INFO">${imdncorrelator} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:06:52.051" starttime="20210313 17:06:52.049"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.052" starttime="20210313 17:06:52.051"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from imdnmsgidmapping where userid='${userId}' and creation_tuid=${uid} LIMIT 1 ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:06:52.663" level="INFO">select json * from imdnmsgidmapping where userid='4feb7 06c-8458-11eb-b7ec-005056ae42da' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d674 2a1b2bf LIMIT 1 ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:06:52.663" starttime="20210313 17:06:52.053"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:06:52.690" level="INFO">[json]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "foldername": "RCSMessageStore/Chat/8888888880/", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "uid": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:52.690" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:06:52.690" starttime="20210313 17:06:52.665"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.693" starttime="20210313 17:06:52.692"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.693" starttime="20210313 17:06:52.691"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${cnt} == 0</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.694" starttime="20210313 17:06:52.694"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:06:52.696" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:06:52.696" starttime="20210313 17:06:52.695"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:06:52.697" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:06:52.698" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folder...</msg>
<status status="PASS" endtime="20210313 17:06:52.698" starttime="20210313 17:06:52.697"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${imdn_mapping}</var>
</assign>
<msg timestamp="20210313 17:06:52.700" level="INFO">${imdn_mapping} = {u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830...</msg>
<status status="PASS" endtime="20210313 17:06:52.700" starttime="20210313 17:06:52.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${imdn_mapping}</arg>
</arguments>
<msg timestamp="20210313 17:06:52.701" level="INFO">{u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'imdncorrelator': u'8888888880_37857c02-005f-9b17-9322-b8423992923a', u'cosid': u'10'}</msg>
<status status="PASS" endtime="20210313 17:06:52.702" starttime="20210313 17:06:52.701"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.704" starttime="20210313 17:06:52.703"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.704" starttime="20210313 17:06:52.702"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.707" starttime="20210313 17:06:52.705"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.707" starttime="20210313 17:06:52.705"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:06:52.709" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:52.709" starttime="20210313 17:06:52.708"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.709" starttime="20210313 17:06:52.707"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.712" starttime="20210313 17:06:52.710"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.712" starttime="20210313 17:06:52.710"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<msg timestamp="20210313 17:06:52.716" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:52.716" starttime="20210313 17:06:52.714"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.716" starttime="20210313 17:06:52.713"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.719" starttime="20210313 17:06:52.718"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.719" starttime="20210313 17:06:52.717"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.722" starttime="20210313 17:06:52.720"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.722" starttime="20210313 17:06:52.720"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.722" starttime="20210313 17:06:52.046"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.722" starttime="20210313 17:06:52.045"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.725" starttime="20210313 17:06:52.724"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.725" starttime="20210313 17:06:52.723"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.728" starttime="20210313 17:06:52.727"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:52.729" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:52.789" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:52.790" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:52.790" starttime="20210313 17:06:52.729"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:52.794" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:06:52.795" starttime="20210313 17:06:52.791"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:52.853" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:52.853" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:52.854" starttime="20210313 17:06:52.796"></status>
</kw>
<msg timestamp="20210313 17:06:52.855" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:52.855" starttime="20210313 17:06:52.726"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.858" starttime="20210313 17:06:52.857"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:52.859" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:52.930" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:52.930" starttime="20210313 17:06:52.859"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:52.931" starttime="20210313 17:06:52.855"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:52.934" starttime="20210313 17:06:52.933"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:52.935" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:53.077" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:53.077" starttime="20210313 17:06:52.935"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:06:53.080" level="INFO">27978 packets captured</msg>
<status status="PASS" endtime="20210313 17:06:53.080" starttime="20210313 17:06:53.078"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:53.135" level="INFO">56458 packets received by filter
729 packets dropped by kernel
date
Sun Mar 14 00:00:52 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deposit_PM_Message"/"Deposit_PM_Message".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deposit_PM_Message"/"Deposit_PM_Message".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.135" starttime="20210313 17:06:53.081"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.136" starttime="20210313 17:06:52.931"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.139" starttime="20210313 17:06:53.138"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.139" starttime="20210313 17:06:53.137"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.142" starttime="20210313 17:06:53.141"></status>
</kw>
<msg timestamp="20210313 17:06:53.142" level="INFO">${status} = ('PASS', None)</msg>
<status status="PASS" endtime="20210313 17:06:53.142" starttime="20210313 17:06:53.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<kw name="CloseRequest" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<kw name="Close Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.148" starttime="20210313 17:06:53.147"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.149" starttime="20210313 17:06:53.145"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.149" starttime="20210313 17:06:53.143"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.149" starttime="20210313 17:06:52.725"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:06:53.149" critical="yes" starttime="20210313 17:06:42.912"></status>
</test>
<test id="s1-t4" name="FolderSearchAfterDeposit">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.156" starttime="20210313 17:06:53.154"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:53.157" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:53.213" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:53.214" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:53.214" starttime="20210313 17:06:53.156"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:53.260" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:06:53.260" starttime="20210313 17:06:53.215"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:53.274" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:53.274" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.274" starttime="20210313 17:06:53.261"></status>
</kw>
<msg timestamp="20210313 17:06:53.275" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:53.275" starttime="20210313 17:06:53.153"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:06:53.277" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:53.277" starttime="20210313 17:06:53.276"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.280" starttime="20210313 17:06:53.279"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:06:53.281" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:06:53.338" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:53.338" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:53.338" starttime="20210313 17:06:53.280"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:06:53.340" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:06:53.463" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:53.464" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:53.464" starttime="20210313 17:06:53.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:53.466" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:53.466" starttime="20210313 17:06:53.465"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:53.469" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:53.470" starttime="20210313 17:06:53.466"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:53.472" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:06:53.472" starttime="20210313 17:06:53.471"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:53.474" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:06:53.474" starttime="20210313 17:06:53.473"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:53.508" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:06:53.509" starttime="20210313 17:06:53.474"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:53.522" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.523" starttime="20210313 17:06:53.509"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:53.529" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:06:53.530" starttime="20210313 17:06:53.523"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:53.547" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.547" starttime="20210313 17:06:53.530"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.548" starttime="20210313 17:06:53.278"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:53.552" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:53.552" starttime="20210313 17:06:53.550"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.553" starttime="20210313 17:06:53.552"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:53.555" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:53.623" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:53.623" starttime="20210313 17:06:53.554"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:53.674" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterDeposit"</msg>
<status status="PASS" endtime="20210313 17:06:53.674" starttime="20210313 17:06:53.624"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:53.687" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.687" starttime="20210313 17:06:53.674"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:53.702" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterDeposit"/"FolderSearchAfterDeposit".lo g &amp;</msg>
<status status="PASS" endtime="20210313 17:06:53.703" starttime="20210313 17:06:53.688"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:53.717" level="INFO">[1] 3875
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.717" starttime="20210313 17:06:53.703"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.718" starttime="20210313 17:06:53.548"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:53.722" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:53.722" starttime="20210313 17:06:53.721"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.723" starttime="20210313 17:06:53.723"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:53.725" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:53.811" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:53.811" starttime="20210313 17:06:53.724"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:53.876" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterDeposit"</msg>
<status status="PASS" endtime="20210313 17:06:53.876" starttime="20210313 17:06:53.812"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:53.879" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.880" starttime="20210313 17:06:53.878"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:53.892" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"FolderSearchAfterDeposit"/"FolderSearchAfterDeposit".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:06:53.892" starttime="20210313 17:06:53.880"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:53.905" level="INFO">[2] 3902
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:53.905" starttime="20210313 17:06:53.893"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.905" starttime="20210313 17:06:53.718"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:53.906" starttime="20210313 17:06:53.152"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Folder search after depositing the message"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:53.907" starttime="20210313 17:06:53.907"></status>
</kw>
<kw name="FolderSearch" library="mStore_Digits_TMO_resources">
<arguments>
<arg>folderkey=${RCS_PARENT_FOLDER_KEY}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>http://${server_root_path}${oem_host}${userId}/folders/${folderkey}</arg>
</arguments>
<assign>
<var>${FOLDER_SEARCH_RESOURCE_URL}</var>
</assign>
<msg timestamp="20210313 17:06:53.912" level="INFO">${FOLDER_SEARCH_RESOURCE_URL} = http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:06:53.912" starttime="20210313 17:06:53.910"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${obj_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:53.913" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:06:53.914" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"${FOLDER_SEARCH_RESOURCE_URL}"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
    ...</msg>
<status status="PASS" endtime="20210313 17:06:53.914" starttime="20210313 17:06:53.913"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:53.915" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"...</msg>
<status status="PASS" endtime="20210313 17:06:53.916" starttime="20210313 17:06:53.914"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${oem_host}${userId}/objects/operations/search</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:06:53.917" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search</msg>
<status status="PASS" endtime="20210313 17:06:53.917" starttime="20210313 17:06:53.916"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:06:55.216" level="INFO">Post Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search, data={
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
       "order": "Ascending"
       }
      ]
   }
  }
}

, headers={'Content-Type': 'application/json;', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:06:55.216" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.216" starttime="20210313 17:06:53.918"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:06:55.218" level="INFO">${response_status_code} = 200</msg>
<status status="PASS" endtime="20210313 17:06:55.219" starttime="20210313 17:06:55.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.220" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:06:55.220" starttime="20210313 17:06:55.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.222" level="INFO">{"objectList":{"object":[{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","attributes":{"attribute":[{"name":"Charset","value":["UTF-8"]},{"name":"Content-Transfer-Encoding","value":["quoted-printable"]},{"name":"Contribution-ID","value":["e0a1029e-a48b-4ca6-b185-299dada439be"]},{"name":"Conversation-ID","value":["2dbc584e-fc46-4a37-9a56-c2b93246d788"]},{"name":"date","value":["2021-03-13T17:06:25Z"]},{"name":"Direction","value":["In"]},{"name":"from","value":["tel:+9999999990"]},{"name":"IMDN-Message-ID","value":["37857c02-005f-9b17-9322-b8423992923a"]},{"name":"message-context","value":["X-RCS-PM"]},{"name":"P-Asserted-Service","value":["urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"]},{"name":"textcontent","value":["This is the new message we are depositing to test $@#^&amp;*!0123456789"]},{"name":"to","value":["tel:+8888888880"]}]},"flags":{"flag":["\\Recent"],"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags"},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","path":"/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a"}]}}</msg>
<status status="PASS" endtime="20210313 17:06:55.222" starttime="20210313 17:06:55.221"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.224" level="INFO">{'date': 'Sun, 14 Mar 2021 00:00:53 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:VzOwl2edzE12QL5kdWlRIgWdiIGwFH60-slot:1-instId:2-subOid:22-time:2021-03-14T00:00:54Z-localFqdn:10.10.219.141', 'content-length': '1498', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:06:55.224" starttime="20210313 17:06:55.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>${response_code}</arg>
<arg>msg="folder search is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.226" starttime="20210313 17:06:55.225"></status>
</kw>
<msg timestamp="20210313 17:06:55.227" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.227" starttime="20210313 17:06:53.908"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateChatFolderSearchResponse</arg>
<arg>direction=${DIRECTION}</arg>
<arg>response=${response}</arg>
<arg>uid=${UID}</arg>
<arg>msgStatus=recent</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="ValidateChatFolderSearchResponse" library="mStore_Digits_TMO_resources">
<arguments>
<arg>direction=${DIRECTION}</arg>
<arg>response=${response}</arg>
<arg>uid=${UID}</arg>
<arg>msgStatus=recent</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Create List</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>Copy List</arg>
<arg>${to_msg}</arg>
</arguments>
<assign>
<var>${to}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${to_msg}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.236" starttime="20210313 17:06:55.235"></status>
</kw>
<msg timestamp="20210313 17:06:55.236" level="INFO">${to} = ['tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:06:55.236" starttime="20210313 17:06:55.233"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:06:55.238" level="INFO">${status_msg} = [u'recent']</msg>
<status status="PASS" endtime="20210313 17:06:55.238" starttime="20210313 17:06:55.237"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:06:55.240" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:06:55.240" level="INFO">${len_msg_status} = 1</msg>
<status status="PASS" endtime="20210313 17:06:55.240" starttime="20210313 17:06:55.239"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${UID}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.242" level="INFO">51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:55.242" starttime="20210313 17:06:55.241"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.244" level="INFO">{'date': 'Sun, 14 Mar 2021 00:00:53 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:VzOwl2edzE12QL5kdWlRIgWdiIGwFH60-slot:1-instId:2-subOid:22-time:2021-03-14T00:00:54Z-localFqdn:10.10.219.141', 'content-length': '1498', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:06:55.244" starttime="20210313 17:06:55.243"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:55.247" level="INFO">${data} = {u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5...</msg>
<status status="PASS" endtime="20210313 17:06:55.247" starttime="20210313 17:06:55.245"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.248" level="INFO">{u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'flags': {u'flag': [u'\\Recent'], u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags'}, u'path': u'/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'attributes': {u'attribute': [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}, {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}, {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}, {u'name': u'Direction', u'value': [u'In']}, {u'name': u'from', u'value': [u'tel:+9999999990']}, {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}, {u'name': u'message-context', u'value': [u'X-RCS-PM']}, {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}, {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}, {u'name': u'to', u'value': [u'tel:+8888888880']}]}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}]}}</msg>
<status status="PASS" endtime="20210313 17:06:55.249" starttime="20210313 17:06:55.247"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data['objectList']['object']}</arg>
</arguments>
<assign>
<var>${list_of_objects}</var>
</assign>
<msg timestamp="20210313 17:06:55.251" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:06:55.251" level="INFO">${list_of_objects} = 1</msg>
<status status="PASS" endtime="20210313 17:06:55.252" starttime="20210313 17:06:55.249"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.255" starttime="20210313 17:06:55.253"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.255" starttime="20210313 17:06:55.252"></status>
</kw>
<kw type="for" name="${index} IN RANGE [ 0 | ${list_of_objects} ]">
<kw type="foritem" name="${index} = 0">
<kw name="Get_FolderSearch_AttributesPair" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${data['objectList']['object'][${index}]['attributes']['attribute']}</arg>
</arguments>
<assign>
<var>${Attributes_pair}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${attributes}</var>
</assign>
<msg timestamp="20210313 17:06:55.295" level="INFO">${attributes} = [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be'...</msg>
<status status="PASS" endtime="20210313 17:06:55.295" starttime="20210313 17:06:55.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${Attributes_pair}</var>
</assign>
<msg timestamp="20210313 17:06:55.297" level="INFO">${Attributes_pair} = {}</msg>
<status status="PASS" endtime="20210313 17:06:55.297" starttime="20210313 17:06:55.296"></status>
</kw>
<kw type="for" name="${pair} IN [ @{attributes} ]">
<kw type="foritem" name="${pair} = {u'name': u'Charset', u'value': [u'UTF-8']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.299" level="INFO">Charset</msg>
<status status="PASS" endtime="20210313 17:06:55.300" starttime="20210313 17:06:55.298"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.301" level="INFO">[u'UTF-8']</msg>
<status status="PASS" endtime="20210313 17:06:55.301" starttime="20210313 17:06:55.300"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.303" starttime="20210313 17:06:55.302"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.303" starttime="20210313 17:06:55.298"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.305" level="INFO">Content-Transfer-Encoding</msg>
<status status="PASS" endtime="20210313 17:06:55.305" starttime="20210313 17:06:55.304"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.306" level="INFO">[u'quoted-printable']</msg>
<status status="PASS" endtime="20210313 17:06:55.306" starttime="20210313 17:06:55.305"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.309" starttime="20210313 17:06:55.307"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.309" starttime="20210313 17:06:55.304"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.312" level="INFO">Contribution-ID</msg>
<status status="PASS" endtime="20210313 17:06:55.312" starttime="20210313 17:06:55.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.313" level="INFO">[u'e0a1029e-a48b-4ca6-b185-299dada439be']</msg>
<status status="PASS" endtime="20210313 17:06:55.314" starttime="20210313 17:06:55.313"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.316" starttime="20210313 17:06:55.314"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.316" starttime="20210313 17:06:55.309"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.318" level="INFO">Conversation-ID</msg>
<status status="PASS" endtime="20210313 17:06:55.318" starttime="20210313 17:06:55.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.320" level="INFO">[u'2dbc584e-fc46-4a37-9a56-c2b93246d788']</msg>
<status status="PASS" endtime="20210313 17:06:55.320" starttime="20210313 17:06:55.318"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.322" starttime="20210313 17:06:55.320"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.322" starttime="20210313 17:06:55.316"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.324" level="INFO">date</msg>
<status status="PASS" endtime="20210313 17:06:55.325" starttime="20210313 17:06:55.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.326" level="INFO">[u'2021-03-13T17:06:25Z']</msg>
<status status="PASS" endtime="20210313 17:06:55.326" starttime="20210313 17:06:55.325"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.329" starttime="20210313 17:06:55.327"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.329" starttime="20210313 17:06:55.322"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Direction', u'value': [u'In']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.331" level="INFO">Direction</msg>
<status status="PASS" endtime="20210313 17:06:55.332" starttime="20210313 17:06:55.330"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.333" level="INFO">[u'In']</msg>
<status status="PASS" endtime="20210313 17:06:55.333" starttime="20210313 17:06:55.332"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.336" starttime="20210313 17:06:55.334"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.336" starttime="20210313 17:06:55.329"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'from', u'value': [u'tel:+9999999990']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.338" level="INFO">from</msg>
<status status="PASS" endtime="20210313 17:06:55.338" starttime="20210313 17:06:55.337"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.339" level="INFO">[u'tel:+9999999990']</msg>
<status status="PASS" endtime="20210313 17:06:55.340" starttime="20210313 17:06:55.338"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.342" starttime="20210313 17:06:55.340"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.342" starttime="20210313 17:06:55.336"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.343" level="INFO">IMDN-Message-ID</msg>
<status status="PASS" endtime="20210313 17:06:55.344" starttime="20210313 17:06:55.343"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.346" level="INFO">[u'37857c02-005f-9b17-9322-b8423992923a']</msg>
<status status="PASS" endtime="20210313 17:06:55.346" starttime="20210313 17:06:55.345"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.348" starttime="20210313 17:06:55.347"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.348" starttime="20210313 17:06:55.342"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'message-context', u'value': [u'X-RCS-PM']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.350" level="INFO">message-context</msg>
<status status="PASS" endtime="20210313 17:06:55.350" starttime="20210313 17:06:55.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.352" level="INFO">[u'X-RCS-PM']</msg>
<status status="PASS" endtime="20210313 17:06:55.352" starttime="20210313 17:06:55.351"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.354" starttime="20210313 17:06:55.353"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.354" starttime="20210313 17:06:55.349"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.356" level="INFO">P-Asserted-Service</msg>
<status status="PASS" endtime="20210313 17:06:55.356" starttime="20210313 17:06:55.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.358" level="INFO">[u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']</msg>
<status status="PASS" endtime="20210313 17:06:55.358" starttime="20210313 17:06:55.357"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.360" starttime="20210313 17:06:55.358"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.360" starttime="20210313 17:06:55.354"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.362" level="INFO">textcontent</msg>
<status status="PASS" endtime="20210313 17:06:55.363" starttime="20210313 17:06:55.361"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.365" level="INFO">[u'This is the new message we are depositing to test $@#^&amp;*!0123456789']</msg>
<status status="PASS" endtime="20210313 17:06:55.365" starttime="20210313 17:06:55.363"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.367" starttime="20210313 17:06:55.366"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.367" starttime="20210313 17:06:55.361"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'to', u'value': [u'tel:+8888888880']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.370" level="INFO">to</msg>
<status status="PASS" endtime="20210313 17:06:55.370" starttime="20210313 17:06:55.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.372" level="INFO">[u'tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:06:55.372" starttime="20210313 17:06:55.371"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.374" starttime="20210313 17:06:55.373"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.374" starttime="20210313 17:06:55.368"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.375" starttime="20210313 17:06:55.297"></status>
</kw>
<msg timestamp="20210313 17:06:55.376" level="INFO">${Attributes_pair} = {u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788...</msg>
<status status="PASS" endtime="20210313 17:06:55.376" starttime="20210313 17:06:55.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.377" level="INFO">{u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788'], u'date': [u'2021-03-13T17:06:25Z'], u'Direction': [u'In'], u'from': [u'tel:+9999999990'], u'IMDN-Message-ID': [u'37857c02-005f-9b17-9322-b8423992923a'], u'message-context': [u'X-RCS-PM'], u'P-Asserted-Service': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg'], u'textcontent': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789'], u'to': [u'tel:+8888888880']}</msg>
<status status="PASS" endtime="20210313 17:06:55.378" starttime="20210313 17:06:55.377"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${obj_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:06:55.380" level="INFO">${obj_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:06:55.381" starttime="20210313 17:06:55.378"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey1}%3d%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_resourceURL}</var>
</assign>
<msg timestamp="20210313 17:06:55.383" level="INFO">${obj_resourceURL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:55.383" starttime="20210313 17:06:55.381"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/${RCS_PARENT_PATH}/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_Folderpath}</var>
</assign>
<msg timestamp="20210313 17:06:55.385" level="INFO">${obj_Folderpath} = /RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:55.385" starttime="20210313 17:06:55.384"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.389" starttime="20210313 17:06:55.387"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.389" starttime="20210313 17:06:55.386"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.393" starttime="20210313 17:06:55.390"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.393" starttime="20210313 17:06:55.389"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.398" starttime="20210313 17:06:55.395"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.398" starttime="20210313 17:06:55.394"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.402" starttime="20210313 17:06:55.400"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.402" starttime="20210313 17:06:55.399"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.406" starttime="20210313 17:06:55.404"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.406" starttime="20210313 17:06:55.403"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.409" starttime="20210313 17:06:55.408"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.409" starttime="20210313 17:06:55.407"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.413" starttime="20210313 17:06:55.411"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.414" starttime="20210313 17:06:55.410"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.417" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.417" starttime="20210313 17:06:55.415"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.417" starttime="20210313 17:06:55.414"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.420" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.420" starttime="20210313 17:06:55.418"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.420" starttime="20210313 17:06:55.418"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.423" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.423" starttime="20210313 17:06:55.421"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.423" starttime="20210313 17:06:55.421"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.426" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.426" starttime="20210313 17:06:55.425"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.426" starttime="20210313 17:06:55.424"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.432" starttime="20210313 17:06:55.429"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.433" starttime="20210313 17:06:55.427"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.438" starttime="20210313 17:06:55.435"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.438" starttime="20210313 17:06:55.433"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.442" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.442" starttime="20210313 17:06:55.440"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.443" starttime="20210313 17:06:55.439"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.446" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.447" starttime="20210313 17:06:55.445"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.448" starttime="20210313 17:06:55.443"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.451" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.452" starttime="20210313 17:06:55.450"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.452" starttime="20210313 17:06:55.449"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.455" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.456" starttime="20210313 17:06:55.454"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.456" starttime="20210313 17:06:55.453"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.461" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:55.462" starttime="20210313 17:06:55.460"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.462" starttime="20210313 17:06:55.459"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.462" starttime="20210313 17:06:55.457"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.468" starttime="20210313 17:06:55.466"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.469" starttime="20210313 17:06:55.464"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.469" starttime="20210313 17:06:55.463"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:06:55.471" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:06:55.471" starttime="20210313 17:06:55.469"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:06:55.472" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:06:55.473" starttime="20210313 17:06:55.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${delivered_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:06:55.474" level="INFO">${delivered_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:06:55.475" starttime="20210313 17:06:55.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${read_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${read_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:06:55.476" level="INFO">${read_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:06:55.477" starttime="20210313 17:06:55.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.479" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:06:55.479" starttime="20210313 17:06:55.477"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.480" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:06:55.481" starttime="20210313 17:06:55.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.482" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:06:55.482" starttime="20210313 17:06:55.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.484" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:06:55.484" starttime="20210313 17:06:55.483"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_list}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.485" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:06:55.486" starttime="20210313 17:06:55.485"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_list}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.487" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:06:55.487" starttime="20210313 17:06:55.486"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.491" starttime="20210313 17:06:55.489"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.491" starttime="20210313 17:06:55.488"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.495" starttime="20210313 17:06:55.493"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.496" starttime="20210313 17:06:55.492"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.500" starttime="20210313 17:06:55.497"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.501" starttime="20210313 17:06:55.496"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.501" starttime="20210313 17:06:55.289"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.501" starttime="20210313 17:06:55.288"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.502" starttime="20210313 17:06:55.229"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.502" starttime="20210313 17:06:55.228"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.507" starttime="20210313 17:06:55.506"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:55.509" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:55.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:55.567" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:55.567" starttime="20210313 17:06:55.508"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:55.572" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:06:55.572" starttime="20210313 17:06:55.568"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:55.631" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:55.632" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:55.632" starttime="20210313 17:06:55.573"></status>
</kw>
<msg timestamp="20210313 17:06:55.633" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:55.633" starttime="20210313 17:06:55.505"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.635" starttime="20210313 17:06:55.635"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:55.636" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:55.713" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:55.713" starttime="20210313 17:06:55.636"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.713" starttime="20210313 17:06:55.633"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.716" starttime="20210313 17:06:55.716"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:55.718" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:55.826" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:06:55.827" starttime="20210313 17:06:55.717"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:06:55.830" level="INFO">5762 packets captured</msg>
<status status="PASS" endtime="20210313 17:06:55.830" starttime="20210313 17:06:55.828"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:55.887" level="INFO">11514 packets received by filter
93 packets dropped by kernel
date
Sun Mar 14 00:00:54 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterDeposit"/"FolderSearchAfterDeposit".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterDeposit"/"FolderSearchAfterDeposit".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:55.888" starttime="20210313 17:06:55.831"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.888" starttime="20210313 17:06:55.714"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.892" starttime="20210313 17:06:55.890"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.892" starttime="20210313 17:06:55.889"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:06:55.920" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:06:55.921" starttime="20210313 17:06:55.894"></status>
</kw>
<msg timestamp="20210313 17:06:55.921" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:06:55.921" starttime="20210313 17:06:55.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.923" starttime="20210313 17:06:55.922"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:55.923" starttime="20210313 17:06:55.503"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:06:55.924" critical="yes" starttime="20210313 17:06:53.150"></status>
</test>
<test id="s1-t5" name="Deliver_PM_Message">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:55.930" starttime="20210313 17:06:55.928"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:06:55.931" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:06:56.002" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:56.003" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:06:56.004" starttime="20210313 17:06:55.930"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:06:56.040" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:06:56.040" starttime="20210313 17:06:56.004"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:06:56.061" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:06:56.061" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:56.062" starttime="20210313 17:06:56.041"></status>
</kw>
<msg timestamp="20210313 17:06:56.063" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:56.063" starttime="20210313 17:06:55.927"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:06:56.066" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:06:56.066" starttime="20210313 17:06:56.064"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:56.071" starttime="20210313 17:06:56.070"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:06:56.073" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:06:56.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:56.162" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:56.162" starttime="20210313 17:06:56.071"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:06:56.167" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:06:56.255" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:06:56.256" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:56.256" starttime="20210313 17:06:56.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:56.257" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:06:56.258" starttime="20210313 17:06:56.257"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:06:56.260" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:06:56.260" starttime="20210313 17:06:56.259"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:56.262" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:06:56.262" starttime="20210313 17:06:56.261"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:06:56.264" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:06:56.264" starttime="20210313 17:06:56.263"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:56.303" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:06:56.304" starttime="20210313 17:06:56.265"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:56.316" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:56.316" starttime="20210313 17:06:56.304"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:06:56.337" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:06:56.337" starttime="20210313 17:06:56.318"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:56.341" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:56.341" starttime="20210313 17:06:56.338"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:56.342" starttime="20210313 17:06:56.066"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:56.345" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:56.345" starttime="20210313 17:06:56.344"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:56.346" starttime="20210313 17:06:56.345"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:06:56.347" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:06:56.416" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:56.416" starttime="20210313 17:06:56.346"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:56.463" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deliver _PM_Message"</msg>
<status status="PASS" endtime="20210313 17:06:56.463" starttime="20210313 17:06:56.417"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:56.480" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:56.481" starttime="20210313 17:06:56.464"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:56.495" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Deliver_PM_Message"/"Deliver_PM_Message".log &amp;</msg>
<status status="PASS" endtime="20210313 17:06:56.495" starttime="20210313 17:06:56.481"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:56.506" level="INFO">[1] 4047
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:56.506" starttime="20210313 17:06:56.496"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:56.506" starttime="20210313 17:06:56.342"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:06:56.512" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:06:56.512" starttime="20210313 17:06:56.511"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:56.514" starttime="20210313 17:06:56.513"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:06:56.515" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:06:56.595" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:06:56.595" starttime="20210313 17:06:56.514"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:06:56.636" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deliver _PM_Message"</msg>
<status status="PASS" endtime="20210313 17:06:56.636" starttime="20210313 17:06:56.596"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:56.651" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:56.652" starttime="20210313 17:06:56.637"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:06:56.665" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Deliver_PM_Message"/"Deliver_PM_Message".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:06:56.666" starttime="20210313 17:06:56.652"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:06:56.676" level="INFO">[2] 4074
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:06:56.676" starttime="20210313 17:06:56.666"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:56.677" starttime="20210313 17:06:56.507"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:56.677" starttime="20210313 17:06:55.926"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Deliver PM message"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:56.679" starttime="20210313 17:06:56.678"></status>
</kw>
<kw name="Deposit_Message" library="mStore_Digits_TMO_resources">
<arguments>
<arg>X_RCS_MSG_STATUS=Delivered</arg>
<arg>object_file=${DELIVER_DISPLAY_OBJ_FILE}</arg>
<arg>MESSAGE_CONTEXT=X-RCS-IMDN</arg>
<arg>DIRECTION_VALUE=Out</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${X_RCS_MSG_STATUS}' == 'Delivered'</arg>
<arg>delivery</arg>
<arg>display</arg>
</arguments>
<assign>
<var>${NOTIFICATION_METHOD}</var>
</assign>
<msg timestamp="20210313 17:06:56.683" level="INFO">${NOTIFICATION_METHOD} = delivery</msg>
<status status="PASS" endtime="20210313 17:06:56.684" starttime="20210313 17:06:56.682"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${object_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:56.685" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/Deliver_Display_PM_Chat_Msg.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/Deliver_Display_PM_Chat_Msg.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:06:56.687" level="INFO">${data} = ---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"${FT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/","attributes":{"attribute":[{"name":"From","value":"${MSG_TO}"},{"name"...</msg>
<status status="PASS" endtime="20210313 17:06:56.687" starttime="20210313 17:06:56.684"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:56.691" level="INFO">${data} = ---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"RCSMessageStore/FT/8888888880/","attributes":{"attribute":[{"name":"From","value":"tel:+8888888880"},{"name":"To",...</msg>
<status status="PASS" endtime="20210313 17:06:56.691" starttime="20210313 17:06:56.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:06:56.692" level="INFO">---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"RCSMessageStore/FT/8888888880/","attributes":{"attribute":[{"name":"From","value":"tel:+8888888880"},{"name":"To","value":"tel:+9999999990"},{"name":"Date","value":"2021-03-13T17:06:25Z"},{"name":"Conversation-ID","value":"2dbc584e-fc46-4a37-9a56-c2b93246d788"},{"name":"Contribution-ID","value":"e0a1029e-a48b-4ca6-b185-299dada439be"},{"name":"P-Asserted-Service","value":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"},{"name":"IMDN-Message-ID","value":"37857c02-005f-9b17-9322-b8423992923a"},{"name":"Direction","value":"Out"},{"name":"X-DateTime","value":"1615655185"},{"name":"X-IMDN-Correlator","value":"8888888880_37857c02-005f-9b17-9322-b8423992923a"},{"name":"X-SIP-CallId","value":"005056884776-4d72-eb161700-1e2-571fa736-a0e46"},{"name":"X-RCS-MSG-Status","value":"Delivered"},{"name":"Message-Context","value":"X-RCS-IMDN"}]}}}
---boundaryRMS123

Content-Type:Message/CPIM

From: &lt;tel:+8888888880?Accept-Contact=+sip.instance="&lt;urn:uuid:31abb8b3-0769-1032-9e9d-c5acf9ae46e1&gt;";require;explicit&gt;
To: &lt;tel:+9999999990&gt;
NS: imdn&lt;urn:ietf:params:imdn&gt;
imdn.Message-ID: 37857c02-005f-9b17-9322-b8423992923a
DateTime: 2021-03-13T17:06:25Z
Original-To: tel:+9999999990

Content-Disposition: notification
Content-Type: message/imdn+xml
Content-Length: 286

&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;imdn xmlns="urn:ietf:params:xml:ns:imdn"&gt;
  &lt;message-id&gt;37857c02-005f-9b17-9322-b8423992923a&lt;/message-id&gt;
  &lt;datetime&gt;2021-03-13T17:06:25Z&lt;/datetime&gt;
  &lt;recipient-uri&gt;tel:+9999999990&lt;/recipient-uri&gt;
  &lt;original-recipient-uri&gt;tel:+8888888880&lt;/original-recipient-uri&gt;
  &lt;delivery-notification&gt;
    &lt;status&gt;
      &lt;Delivered/&gt;
    &lt;/status&gt;
  &lt;/delivery-notification&gt;
&lt;/imdn&gt;

---boundaryRMS123--

</msg>
<status status="PASS" endtime="20210313 17:06:56.693" starttime="20210313 17:06:56.692"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${payload_length}</var>
</assign>
<msg timestamp="20210313 17:06:56.694" level="INFO">Length is 1809</msg>
<msg timestamp="20210313 17:06:56.694" level="INFO">${payload_length} = 1809</msg>
<status status="PASS" endtime="20210313 17:06:56.694" starttime="20210313 17:06:56.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${payload_length}</arg>
</arguments>
<msg timestamp="20210313 17:06:56.695" level="INFO">1809</msg>
<status status="PASS" endtime="20210313 17:06:56.695" starttime="20210313 17:06:56.694"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${payload_length}</arg>
</arguments>
<msg timestamp="20210313 17:06:56.697" level="INFO">${payload_length} = 1809</msg>
<status status="PASS" endtime="20210313 17:06:56.697" starttime="20210313 17:06:56.696"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${url}${UserId}/objects</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:06:58.255" level="INFO">Post Request using : alias=mStoreService, uri=/rmsclient/nms/v1/rms/tel%3a%2b8888888880/objects, data=&lt;multipart/form-data;boundary="-boundaryRMS123";&gt;, headers={'Content-Type': 'multipart/form-data;boundary="-boundaryRMS123";', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:06:58.255" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210313 17:06:58.256" starttime="20210313 17:06:56.698"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:06:58.258" level="INFO">${response_status_code} = 201</msg>
<status status="PASS" endtime="20210313 17:06:58.258" starttime="20210313 17:06:58.256"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:06:58.259" level="INFO">201</msg>
<status status="PASS" endtime="20210313 17:06:58.259" starttime="20210313 17:06:58.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:06:58.261" level="INFO"></msg>
<status status="PASS" endtime="20210313 17:06:58.261" starttime="20210313 17:06:58.260"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:58.262" level="INFO">{'date': 'Sun, 14 Mar 2021 00:00:56 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:MHvPazk3juyuypAkwfa0OIbGNhEiIOZt-slot:1-instId:1-subOid:24-time:2021-03-14T00:00:57Z-localFqdn:10.10.219.141', 'content-length': '0', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:06:58.262" starttime="20210313 17:06:58.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>201</arg>
<arg>msg="deliver pm msg is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:58.264" starttime="20210313 17:06:58.263"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:58.265" starttime="20210313 17:06:56.680"></status>
</kw>
<kw name="GetServicerequest" library="mStore_Generic_resources">
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<kw name="Get One Request" library="Socket_PNS_NMS">
<arguments>
<arg>${service}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<msg timestamp="20210313 17:06:59.022" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286ec0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.023" starttime="20210313 17:06:58.267"></status>
</kw>
<msg timestamp="20210313 17:06:59.023" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286ec0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.024" starttime="20210313 17:06:58.266"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.031" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286ec0&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.032" starttime="20210313 17:06:59.024"></status>
</kw>
<kw name="GetRequestData" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${headers}</var>
<var>${req_body}</var>
<var>${version}</var>
</assign>
<kw name="Read Request Body" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:06:59.038" level="INFO">${data} = (&lt;mimetools.Message instance at 0x31dfb48&gt;, '{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Ch...</msg>
<status status="PASS" endtime="20210313 17:06:59.038" starttime="20210313 17:06:59.036"></status>
</kw>
<msg timestamp="20210313 17:06:59.039" level="INFO">${headers} = Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-ConnId:MHvPazk3juyuypAkwfa0OIbGNhEiIOZt-slot...</msg>
<msg timestamp="20210313 17:06:59.039" level="INFO">${req_body} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:00:58.075","nm...</msg>
<msg timestamp="20210313 17:06:59.040" level="INFO">${version} = HTTP/1.1</msg>
<status status="PASS" endtime="20210313 17:06:59.040" starttime="20210313 17:06:59.033"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ValidateChatPNSNotfn</arg>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=RECENT,DELIVERED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<assign>
<var>${pns_status}</var>
<var>${value}</var>
</assign>
<kw name="ValidateChatPNSNotfn" library="mStore_Digits_TMO_resources">
<arguments>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=RECENT,DELIVERED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_headers}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.050" level="INFO">Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-ConnId:MHvPazk3juyuypAkwfa0OIbGNhEiIOZt-slot:0-instId:2-subOid:65656-time:2021-03-14T00:00:58.000-localFqdn:10.10.219.141
Host: pns.server.mavenir1.com:8060
Content-Length: 1625
</msg>
<status status="PASS" endtime="20210313 17:06:59.051" starttime="20210313 17:06:59.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.052" level="INFO">{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:00:58.075","nmsEventList":{"nmsEvent":[{"changedObject":{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","flags":{"flag":["\\DELIVERED"]},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a","message":{"store":"RCSMessageStore/Chat/8888888880/","objectURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","direction":"In","message-time":"2021-03-13T09:06:25.000-08:00","status":"RECENT,DELIVERED","sender":"tel:+9999999990","recipients":[{"uri":"tel:+8888888880"}],"imdn-message-id":"37857c02-005f-9b17-9322-b8423992923a","content":[{"content-type":"text/plain","content-size":"67","charset":"UTF-8","content-transfer-encoding":"quoted-printable","content":"This is the new message we are depositing to test $@#^&amp;*!0123456789","rcs-data":{"sip-call-id":"005056884776-4d72-eb161700-1e2-571fa736-a0e46","feature-tag":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","p-asserted-service":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","contribution-id":"e0a1029e-a48b-4ca6-b185-299dada439be","conversation-id":"2dbc584e-fc46-4a37-9a56-c2b93246d788"}}]}}}]}}}</msg>
<status status="PASS" endtime="20210313 17:06:59.052" starttime="20210313 17:06:59.051"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_resource_url}</var>
</assign>
<msg timestamp="20210313 17:06:59.054" level="INFO">${pns_resource_url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:59.054" starttime="20210313 17:06:59.053"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_object_Url}</var>
</assign>
<msg timestamp="20210313 17:06:59.059" level="INFO">${pns_object_Url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:59.059" starttime="20210313 17:06:59.055"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${pns_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:06:59.061" level="INFO">${pns_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:06:59.061" starttime="20210313 17:06:59.060"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:06:59.063" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:00:58.075","nm...</msg>
<status status="PASS" endtime="20210313 17:06:59.063" starttime="20210313 17:06:59.062"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>\\</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:06:59.065" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:00:58.075","nm...</msg>
<status status="PASS" endtime="20210313 17:06:59.065" starttime="20210313 17:06:59.064"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''',strict=False)</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_out}</var>
</assign>
<msg timestamp="20210313 17:06:59.068" level="INFO">${json_out} = {u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4...</msg>
<status status="PASS" endtime="20210313 17:06:59.068" starttime="20210313 17:06:59.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_out}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.069" level="INFO">{u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'message': {u'status': u'RECENT,DELIVERED', u'message-time': u'2021-03-13T09:06:25.000-08:00', u'direction': u'In', u'sender': u'tel:+9999999990', u'recipients': [{u'uri': u'tel:+8888888880'}], u'imdn-message-id': u'37857c02-005f-9b17-9322-b8423992923a', u'objectURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'content': [{u'content-transfer-encoding': u'quoted-printable', u'rcs-data': {u'sip-call-id': u'005056884776-4d72-eb161700-1e2-571fa736-a0e46', u'p-asserted-service': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'conversation-id': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'feature-tag': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'contribution-id': u'e0a1029e-a48b-4ca6-b185-299dada439be'}, u'charset': u'UTF-8', u'content-size': u'67', u'content': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'content-type': u'text/plain'}], u'store': u'RCSMessageStore/Chat/8888888880/'}, u'flags': {u'flag': [u'DELIVERED']}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}}]}, u'pns-subtype': u'ChatS', u'recipients': [{u'uri': u'tel:+8888888880'}], u'pns-time': u'2021-03-14T00:00:58.075', u'pns-type': u'RCSPage', u'serviceName': u'SyncApp', u'TTL': u'600', u'channel': u'pns_channe'}}</msg>
<status status="PASS" endtime="20210313 17:06:59.069" starttime="20210313 17:06:59.068"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PNS_OBJECT_URL}</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.072" level="INFO">${PNS_OBJECT_URL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:59.072" starttime="20210313 17:06:59.070"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>https://${service_root_path}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${OBJECT_URL}</var>
</assign>
<msg timestamp="20210313 17:06:59.075" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:59.075" starttime="20210313 17:06:59.073"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OBJECT_URL}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.077" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:06:59.077" starttime="20210313 17:06:59.076"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:06:59.078" level="INFO">${status_msg} = [u'RECENT', u'DELIVERED']</msg>
<status status="PASS" endtime="20210313 17:06:59.078" starttime="20210313 17:06:59.077"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:06:59.080" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:06:59.081" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:06:59.081" starttime="20210313 17:06:59.079"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${len_response_body}</var>
</assign>
<msg timestamp="20210313 17:06:59.082" level="INFO">Length is 1625</msg>
<msg timestamp="20210313 17:06:59.082" level="INFO">${len_response_body} = 1625</msg>
<status status="PASS" endtime="20210313 17:06:59.083" starttime="20210313 17:06:59.081"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.090" starttime="20210313 17:06:59.089"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.091" starttime="20210313 17:06:59.087"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.091" starttime="20210313 17:06:59.083"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.094" starttime="20210313 17:06:59.093"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.095" starttime="20210313 17:06:59.092"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.098" starttime="20210313 17:06:59.097"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.098" starttime="20210313 17:06:59.095"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.106" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.106" starttime="20210313 17:06:59.102"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.106" starttime="20210313 17:06:59.100"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.107" starttime="20210313 17:06:59.099"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.109" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.109" starttime="20210313 17:06:59.108"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.110" starttime="20210313 17:06:59.107"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword and Continue on Failure</arg>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.126" level="FAIL">Resolving variable '${headers['X-mStoreFE-Addr']}' failed: Variable '${headers}' not found. Did you mean:
    ${pns_headers}</msg>
<status status="FAIL" endtime="20210313 17:06:59.126" starttime="20210313 17:06:59.112"></status>
</kw>
<status status="FAIL" endtime="20210313 17:06:59.127" starttime="20210313 17:06:59.111"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.127" starttime="20210313 17:06:59.110"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.130" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.130" starttime="20210313 17:06:59.129"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.130" starttime="20210313 17:06:59.127"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.133" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.133" starttime="20210313 17:06:59.131"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.133" starttime="20210313 17:06:59.131"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.136" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.137" starttime="20210313 17:06:59.135"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.137" starttime="20210313 17:06:59.134"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.140" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.140" starttime="20210313 17:06:59.139"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.141" starttime="20210313 17:06:59.138"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.146" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.146" starttime="20210313 17:06:59.145"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.147" starttime="20210313 17:06:59.141"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.149" starttime="20210313 17:06:59.148"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.150" starttime="20210313 17:06:59.147"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.152" starttime="20210313 17:06:59.151"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.152" starttime="20210313 17:06:59.150"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20210313 17:06:59.155" level="FAIL">delivered != recent</msg>
<status status="FAIL" endtime="20210313 17:06:59.156" starttime="20210313 17:06:59.154"></status>
</kw>
<status status="FAIL" endtime="20210313 17:06:59.156" starttime="20210313 17:06:59.153"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20210313 17:06:59.160" level="FAIL">Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:06:59.160" starttime="20210313 17:06:59.159"></status>
</kw>
<status status="FAIL" endtime="20210313 17:06:59.160" starttime="20210313 17:06:59.158"></status>
</kw>
<status status="FAIL" endtime="20210313 17:06:59.160" starttime="20210313 17:06:59.156"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.163" starttime="20210313 17:06:59.161"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.163" starttime="20210313 17:06:59.161"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.166" starttime="20210313 17:06:59.164"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.166" starttime="20210313 17:06:59.164"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.168" starttime="20210313 17:06:59.167"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.169" starttime="20210313 17:06:59.166"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.172" starttime="20210313 17:06:59.170"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.172" starttime="20210313 17:06:59.169"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.174" starttime="20210313 17:06:59.173"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.175" starttime="20210313 17:06:59.172"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.178" starttime="20210313 17:06:59.176"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.178" starttime="20210313 17:06:59.175"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.182" starttime="20210313 17:06:59.180"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.182" starttime="20210313 17:06:59.179"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.185" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.185" starttime="20210313 17:06:59.183"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.185" starttime="20210313 17:06:59.183"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.192" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.192" starttime="20210313 17:06:59.190"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.192" starttime="20210313 17:06:59.188"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.192" starttime="20210313 17:06:59.186"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.195" starttime="20210313 17:06:59.194"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.195" starttime="20210313 17:06:59.193"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' != 'deposit'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:06:59.197" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:06:59.197" starttime="20210313 17:06:59.196"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:06:59.199" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:06:59.199" starttime="20210313 17:06:59.198"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.201" starttime="20210313 17:06:59.200"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.202" starttime="20210313 17:06:59.199"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.205" starttime="20210313 17:06:59.204"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.205" starttime="20210313 17:06:59.202"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.208" starttime="20210313 17:06:59.207"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.208" starttime="20210313 17:06:59.205"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.211" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.212" starttime="20210313 17:06:59.210"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.212" starttime="20210313 17:06:59.209"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.215" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.215" starttime="20210313 17:06:59.213"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.215" starttime="20210313 17:06:59.212"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.220" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.220" starttime="20210313 17:06:59.217"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.220" starttime="20210313 17:06:59.216"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.224" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.224" starttime="20210313 17:06:59.222"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.225" starttime="20210313 17:06:59.221"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.230" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.230" starttime="20210313 17:06:59.227"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.231" starttime="20210313 17:06:59.226"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.235" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.235" starttime="20210313 17:06:59.233"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.235" starttime="20210313 17:06:59.231"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.239" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.239" starttime="20210313 17:06:59.237"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.240" starttime="20210313 17:06:59.236"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.244" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.244" starttime="20210313 17:06:59.241"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.245" starttime="20210313 17:06:59.240"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.249" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.249" starttime="20210313 17:06:59.247"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.249" starttime="20210313 17:06:59.245"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.253" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:06:59.253" starttime="20210313 17:06:59.251"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.254" starttime="20210313 17:06:59.250"></status>
</kw>
<status status="FAIL" endtime="20210313 17:06:59.254" starttime="20210313 17:06:59.044"></status>
</kw>
<msg timestamp="20210313 17:06:59.254" level="INFO">${pns_status} = FAIL</msg>
<msg timestamp="20210313 17:06:59.255" level="INFO">${value} = Several failures occurred:

1) delivered != recent

2) Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list ind...</msg>
<status status="PASS" endtime="20210313 17:06:59.255" starttime="20210313 17:06:59.041"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="SendResponse" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Sendresponse Code" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
<arg>${response_code}</arg>
<arg>${message}</arg>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.263" starttime="20210313 17:06:59.261"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.263" starttime="20210313 17:06:59.259"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.263" starttime="20210313 17:06:59.257"></status>
</kw>
<status status="PASS" endtime="20210313 17:06:59.264" starttime="20210313 17:06:59.256"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraMessagesTable_C44</arg>
<arg>userId=${USERID}</arg>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>uid=${UID}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="ValidateCassandraMessagesTable_C44" library="mStore_Digits_TMO_resources">
<arguments>
<arg>userId=${USERID}</arg>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>uid=${UID}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:06:59.270" starttime="20210313 17:06:59.269"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from messages_by_root_folder_timestamp where userid='${userId}' and rootfolderkey='${parent_folder_key}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:06:59.914" level="INFO">select json * from messages_by_root_folder_timestamp wh ere userid='4feb706c-8458-11eb-b7ec-005056ae42da' and rootfolderkey='fb830d1d-a4 a5-4f58-a3ad-740be2fd2fc6' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6742a1b2b f;</msg>
<status status="PASS" endtime="20210313 17:06:59.915" starttime="20210313 17:06:59.270"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:06:59.941" level="INFO">[json]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "imdn_disposition_data": null, "modification_tuid": "5a3763a0-8458-11eb-83b6-5d6742a1b2bf", "recent": 1, "saved": null, "seen": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:06:59.941" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:06:59.942" starttime="20210313 17:06:59.916"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:06:59.943" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:06:59.944" starttime="20210313 17:06:59.942"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:06:59.945" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:06:59.945" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "fol...</msg>
<status status="PASS" endtime="20210313 17:06:59.946" starttime="20210313 17:06:59.944"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages}</var>
</assign>
<msg timestamp="20210313 17:06:59.947" level="INFO">${messages} = {u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'...</msg>
<status status="PASS" endtime="20210313 17:06:59.947" starttime="20210313 17:06:59.946"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages}</arg>
</arguments>
<msg timestamp="20210313 17:06:59.948" level="INFO">{u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'5a3763a0-8458-11eb-83b6-5d6742a1b2bf', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'seen': 0, u'saved': None, u'recent': 1}</msg>
<status status="PASS" endtime="20210313 17:06:59.949" starttime="20210313 17:06:59.948"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from messages_by_original_folder_timestamp where userid='${userId}' and folderkey='${message_folder_key}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:00.661" level="INFO">select json * from messages_by_original_folder_timestam p where userid='4feb706c-8458-11eb-b7ec-005056ae42da' and folderkey='UkNTTWVzc2F nZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6 742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:07:00.662" starttime="20210313 17:06:59.949"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:07:00.899" level="INFO">[json]

 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": null, "bcc": null, "blockedmsgreasoncode": "", "bodyoctets": 67, "bucketkey": null, "bulletinid": null, "cc": null, "chunksize": null, "cnsbulletinon": null, "cnsgreetingon": 0, "contentdisposition": null, "contentencoding": "quoted-printable", "contenttype": "text/plain", "contributionid": "e0a1029e-a48b-4ca6-b185-299dada439be", "conversationid": "2dbc584e-fc46-4a37-9a56-c2b93246d788", "cpim": null, "creation_ts": "2021-03-14T00:00:57.050000", "creationdate": null, "deleted": 0, "delivered": 1, "deliveredimdnlist": null, "direction": null, "draft": 0, "expirytimestamp": null, "flagged": 0, "fromheader": "tel:+9999999990", "geolocation": null, "greetingname": "Greeting", "greetingtelnumber": null, "imapmsgheaders": "Content-type: text/plain;charset=UTF-8\\r\\nDate: Sat, 13 Mar 2021 17:06:25 +0000\\r\\nMessage-Context: X-RCS-PM\\r\\nDirection: In\\r\\nTo: tel:+8888888880\\r\\nFrom: tel:+9999999990\\r\\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\\r\\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\\r\\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\\r\\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\\r\\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\\r\\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\\r\\n\\r\\n", "imdn_disposition_data": null, "imdnmessageid": "37857c02-005f-9b17-9322-b8423992923a", "inprocess": null, "internaldate": "2021-03-13T17:06:25Z", "ismodifiedevent": null, "lastmodseq": null, "mdnflag": null, "message": "This is the new message we are depositing to test $@#^&amp;*!0123456789", "messageaction": null, "messagecontext": "X-RCS-PM", "messageid": "", "messagetype": "", "messageversion": null, "mimeversion": "", "modification_tuid": "5a3763a0-8458-11eb-83b6-5d6742a1b2bf", "mstore_version": "vm_2_1", "nscorrelationid": null, "numberofchunks": null, "objheaders": null, "originalfolderkey": null, "payloadheaders": "", "priority": -1, "protection": null, "purgenotify": null, "purgeuuid": null, "readimdnlist": null, "recent": 1, "recordlen": null, "replytonumber": null, "requestjson": null, "returnreceiptflag": null, "rfc2822size": 1401, "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "saved": null, "seen": 0, "sensitivity": null, "smscallbacknum": null, "sourcenode": null, "storageobjtype": "", "subject": "", "swiftobjurl": "/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "swiftpointer": 0, "thumbnailcontent": null, "timezone": null, "toheader": "tel:+8888888880", "tpdata": "", "tpdatatype": "", "transcriptresult": null, "transcriptstates": null, "uid": null, "user": null, "useractivity": null, "userdefinedflagname": "$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,", "userdefinedflagvalue": "0,0,0,0,0,0,0,", "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "xcontentpages": null, "xfuturedeliverytimestamp": null, "xorgvmuid": null}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:00.900" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:00.900" starttime="20210313 17:07:00.663"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:07:00.901" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:00.902" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": n...</msg>
<status status="PASS" endtime="20210313 17:07:00.902" starttime="20210313 17:07:00.900"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages_by_folders}</var>
</assign>
<msg timestamp="20210313 17:07:00.904" level="INFO">${messages_by_folders} = {u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid...</msg>
<status status="PASS" endtime="20210313 17:07:00.904" starttime="20210313 17:07:00.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages_by_folders}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.906" level="INFO">{u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid': u'5a3763a0-8458-11eb-83b6-5d6742a1b2bf', u'cpim': None, u'sensitivity': None, u'smscallbacknum': None, u'contentdisposition': None, u'internaldate': u'2021-03-13T17:06:25Z', u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'flagged': 0, u'bucketkey': None, u'imdn_disposition_data': None, u'contributionid': u'e0a1029e-a48b-4ca6-b185-299dada439be', u'requestjson': None, u'xorgvmuid': None, u'bodyoctets': 67, u'userdefinedflagname': u'$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,', u'subject': u'', u'delivered': 1, u'useractivity': None, u'contenttype': u'text/plain', u'mstore_version': u'vm_2_1', u'messageaction': None, u'chunksize': None, u'deleted': 0, u'contentencoding': u'quoted-printable', u'protection': None, u'cnsgreetingon': 0, u'mdnflag': None, u'xfuturedeliverytimestamp': None, u'uuid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'toheader': u'tel:+8888888880', u'nscorrelationid': None, u'readimdnlist': None, u'purgenotify': None, u'conversationid': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'objheaders': None, u'geolocation': None, u'sourcenode': None, u'cc': None, u'cnsbulletinon': None, u'imapmsgheaders': u'Content-type: text/plain;charset=UTF-8\r\nDate: Sat, 13 Mar 2021 17:06:25 +0000\r\nMessage-Context: X-RCS-PM\r\nDirection: In\r\nTo: tel:+8888888880\r\nFrom: tel:+9999999990\r\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\r\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\r\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\r\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\r\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\r\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\r\n\r\n', u'message': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'creation_ts': u'2021-03-14T00:00:57.050000', u'uid': None, u'blockedmsgreasoncode': u'', u'lastmodseq': None, u'inprocess': None, u'priority': -1, u'draft': 0, u'purgeuuid': None, u'fromheader': u'tel:+9999999990', u'direction': None, u'storageobjtype': u'', u'deliveredimdnlist': None, u'messagecontext': u'X-RCS-PM', u'tpdatatype': u'', u'ismodifiedevent': None, u'returnreceiptflag': None, u'originalfolderkey': None, u'messageversion': None, u'replytonumber': None, u'bulletinid': None, u'mimeversion': u'', u'timezone': None, u'seen': 0, u'recordlen': None, u'swiftobjurl': u'/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'imdnmessageid': u'37857c02-005f-9b17-9322-b8423992923a', u'messagetype': u'', u'thumbnailcontent': None, u'swiftpointer': 0, u'tpdata': u'', u'numberofchunks': None, u'userdefinedflagvalue': u'0,0,0,0,0,0,0,', u'user': None, u'attributes': None, u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'transcriptresult': None, u'recent': 1, u'xcontentpages': None, u'greetingtelnumber': None, u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'bcc': None, u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'creationdate': None}</msg>
<status status="PASS" endtime="20210313 17:07:00.906" starttime="20210313 17:07:00.904"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${to_header}</arg>
</arguments>
<assign>
<var>${members}</var>
</assign>
<msg timestamp="20210313 17:07:00.907" level="INFO">${members} = tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:07:00.907" starttime="20210313 17:07:00.906"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${to_members}</var>
</assign>
<msg timestamp="20210313 17:07:00.909" level="INFO">${to_members} = </msg>
<status status="PASS" endtime="20210313 17:07:00.909" starttime="20210313 17:07:00.908"></status>
</kw>
<kw type="for" name="${member} IN [ ${members} ]">
<kw type="foritem" name="${member} = tel:+8888888880">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${to_members},${member}</arg>
</arguments>
<assign>
<var>${to_members}</var>
</assign>
<msg timestamp="20210313 17:07:00.912" level="INFO">${to_members} = ,tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:07:00.912" starttime="20210313 17:07:00.910"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.912" starttime="20210313 17:07:00.910"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.912" starttime="20210313 17:07:00.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${to_header}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.913" level="INFO">tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:07:00.914" starttime="20210313 17:07:00.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${to_members}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.915" level="INFO">,tel:+8888888880</msg>
<status status="PASS" endtime="20210313 17:07:00.916" starttime="20210313 17:07:00.914"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.919" starttime="20210313 17:07:00.917"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.919" starttime="20210313 17:07:00.916"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['rootfolderkey']}</arg>
<arg>${parent_folder_key}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['rootfolderkey']}</arg>
<arg>${parent_folder_key}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.923" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.924" starttime="20210313 17:07:00.921"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.924" starttime="20210313 17:07:00.920"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.930" starttime="20210313 17:07:00.927"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.930" starttime="20210313 17:07:00.925"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.933" starttime="20210313 17:07:00.932"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.933" starttime="20210313 17:07:00.930"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.937" starttime="20210313 17:07:00.935"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.937" starttime="20210313 17:07:00.934"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.940" starttime="20210313 17:07:00.939"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.941" starttime="20210313 17:07:00.938"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.943" starttime="20210313 17:07:00.942"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.944" starttime="20210313 17:07:00.941"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['imdn_disposition_data']}</arg>
<arg>${NULL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['imdn_disposition_data']}</arg>
<arg>${NULL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.946" starttime="20210313 17:07:00.945"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.947" starttime="20210313 17:07:00.944"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages['saved']}</arg>
<arg>${NULL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages['saved']}</arg>
<arg>${NULL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.949" starttime="20210313 17:07:00.948"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.949" starttime="20210313 17:07:00.947"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${modification_tuid}</arg>
<arg>${messages['modification_tuid']}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.951" level="INFO">${modification_tuid} = 5a3763a0-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:00.951" starttime="20210313 17:07:00.950"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.954" starttime="20210313 17:07:00.953"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.954" starttime="20210313 17:07:00.952"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['folderkey']}</arg>
<arg>${message_folder_key}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.957" starttime="20210313 17:07:00.956"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.958" starttime="20210313 17:07:00.955"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['recent']}</arg>
<arg>${recent}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.961" starttime="20210313 17:07:00.959"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.961" starttime="20210313 17:07:00.958"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['rootfolderkey']}</arg>
<arg>${RCS_PARENT_FOLDER_KEY}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['rootfolderkey']}</arg>
<arg>${RCS_PARENT_FOLDER_KEY}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.965" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.965" starttime="20210313 17:07:00.963"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.965" starttime="20210313 17:07:00.962"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['delivered']}</arg>
<arg>${delivered}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.968" starttime="20210313 17:07:00.966"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.968" starttime="20210313 17:07:00.966"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['seen']}</arg>
<arg>${seen}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.971" starttime="20210313 17:07:00.969"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.972" starttime="20210313 17:07:00.968"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['deleted']}</arg>
<arg>${deleted}</arg>
</arguments>
<msg timestamp="20210313 17:07:00.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:00.975" starttime="20210313 17:07:00.973"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.975" starttime="20210313 17:07:00.972"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.978" starttime="20210313 17:07:00.977"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.979" starttime="20210313 17:07:00.976"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['imdn_disposition_data']}</arg>
<arg>${NONE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['imdn_disposition_data']}</arg>
<arg>${NONE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.982" starttime="20210313 17:07:00.980"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.982" starttime="20210313 17:07:00.979"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.985" starttime="20210313 17:07:00.984"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.985" starttime="20210313 17:07:00.983"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${messages_by_folders['saved']}</arg>
<arg>${read_imdn_list}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${messages_by_folders['saved']}</arg>
<arg>${read_imdn_list}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.988" starttime="20210313 17:07:00.987"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:00.988" starttime="20210313 17:07:00.985"></status>
</kw>
<kw name="ValidateCassandraMessagesTableTTLTMO" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${creation_tuid}</arg>
<arg>messages_creation_ts=${messages["creation_tuid"]}</arg>
<arg>message_folder_key=${message_folder_key}</arg>
<arg>parent_folderkey=${parent_folder_key}</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:00.991" starttime="20210313 17:07:00.991"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON userid,TTL(delivered) ,TTL(messagecontext) ,TTL(contenttype) ,TTL(recent),TTL(seen) from messages_by_original_folder_timestamp where userid ='${userId}' and folderkey='${message_folder_key}' and creation_tuid=${uid};</arg>
</arguments>
<msg timestamp="20210313 17:07:01.692" level="INFO">SELECT JSON userid,TTL(delivered) ,TTL(messagecontext)  ,TTL(contenttype) ,TTL(recent),TTL(seen) from messages_by_original_folder_timest amp where userid ='4feb706c-8458-11eb-b7ec-005056ae42da' and folderkey='UkNTTWVz c2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' and creation_tuid=51b3d2e1-8458-11eb-83b6- 5d6742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:07:01.693" starttime="20210313 17:07:00.992"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:07:02.136" level="INFO">[json]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604783, "ttl(messagecontext)": 604783, "ttl(contenttype)": 604783, "ttl(recent)": 604783, "ttl(seen)": 604783}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:02.137" level="INFO">${out} = 
 [json]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"use...</msg>
<status status="PASS" endtime="20210313 17:07:02.137" starttime="20210313 17:07:01.693"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT JSON userid,TTL(delivered),TTL(folderkey),TTL(imdn_disposition_data),TTL(modification_tuid),TTL(recent),TTL(seen) from messages_by_root_folder_timestamp where userid ='${userId}' and folderkey='${message_folder_key}' and creation_tuid=${uid} ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:07:02.945" level="INFO">SELECT JSON userid,TTL(delivered),TTL(folderkey),TTL(im dn_disposition_data),TTL(modification_tuid),TTL(recent),TTL(seen) from messages_ by_root_folder_timestamp where userid ='4feb706c-8458-11eb-b7ec-005056ae42da' an d folderkey='UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' and creation_tuid=51b 3d2e1-8458-11eb-83b6-5d6742a1b2bf ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:07:02.945" starttime="20210313 17:07:02.138"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${out1}</var>
</assign>
<msg timestamp="20210313 17:07:04.676" level="INFO">[json]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604781, "ttl(folderkey)": 604781, "ttl(imdn_disposition_data)": null, "ttl(modification_tuid)": 604781, "ttl(recent)": 604781, "ttl(seen)": 604781}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:04.676" level="INFO">${out1} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:04.677" starttime="20210313 17:07:02.946"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:07:04.678" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:07:04.678" starttime="20210313 17:07:04.677"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${msg_res}</var>
</assign>
<msg timestamp="20210313 17:07:04.680" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:04.680" level="INFO">${msg_res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604783, "ttl(messagecontext)": 604783, "ttl(contenttype)": 604783, "ttl(recent)": 604783, "ttl(seen)": 604783}</msg>
<status status="PASS" endtime="20210313 17:07:04.680" starttime="20210313 17:07:04.679"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out1}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${fld_res}</var>
</assign>
<msg timestamp="20210313 17:07:04.682" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:04.682" level="INFO">${fld_res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "ttl(delivered)": 604781, "ttl(folderkey)": 604781, "ttl(imdn_disposition_data)": null, "ttl(modification_tuid)": 604781, "ttl(recent)": 604781, "tt...</msg>
<status status="PASS" endtime="20210313 17:07:04.682" starttime="20210313 17:07:04.681"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${msg_res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages}</var>
</assign>
<msg timestamp="20210313 17:07:04.684" level="INFO">${messages} = {u'ttl(delivered)': 604783, u'ttl(messagecontext)': 604783, u'ttl(seen)': 604783, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(recent)': 604783, u'ttl(contenttype)': 604783}</msg>
<status status="PASS" endtime="20210313 17:07:04.684" starttime="20210313 17:07:04.683"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${fld_res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${messages_by_folder}</var>
</assign>
<msg timestamp="20210313 17:07:04.686" level="INFO">${messages_by_folder} = {u'ttl(folderkey)': 604781, u'ttl(delivered)': 604781, u'ttl(seen)': 604781, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(imdn_disposition_data)': None, u'ttl(recent)': 604781, u'ttl(modi...</msg>
<status status="PASS" endtime="20210313 17:07:04.686" starttime="20210313 17:07:04.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages}</arg>
</arguments>
<msg timestamp="20210313 17:07:04.687" level="INFO">{u'ttl(delivered)': 604783, u'ttl(messagecontext)': 604783, u'ttl(seen)': 604783, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(recent)': 604783, u'ttl(contenttype)': 604783}</msg>
<status status="PASS" endtime="20210313 17:07:04.688" starttime="20210313 17:07:04.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${messages_by_folder}</arg>
</arguments>
<msg timestamp="20210313 17:07:04.689" level="INFO">{u'ttl(folderkey)': 604781, u'ttl(delivered)': 604781, u'ttl(seen)': 604781, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'ttl(imdn_disposition_data)': None, u'ttl(recent)': 604781, u'ttl(modification_tuid)': 604781}</msg>
<status status="PASS" endtime="20210313 17:07:04.689" starttime="20210313 17:07:04.688"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(messagecontext)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.693" starttime="20210313 17:07:04.691"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.693" starttime="20210313 17:07:04.690"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(recent)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(recent)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.698" starttime="20210313 17:07:04.695"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.698" starttime="20210313 17:07:04.694"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(contenttype)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(contenttype)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.702" starttime="20210313 17:07:04.700"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.703" starttime="20210313 17:07:04.698"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages['ttl(seen)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages['ttl(seen)']}</arg>
<arg>${messages['ttl(messagecontext)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.708" starttime="20210313 17:07:04.706"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.708" starttime="20210313 17:07:04.704"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
<arg>${messages_by_folder['ttl(delivered)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.711" starttime="20210313 17:07:04.709"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.711" starttime="20210313 17:07:04.708"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
<arg>${messages_by_folder['ttl(folderkey)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.715" starttime="20210313 17:07:04.713"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.715" starttime="20210313 17:07:04.712"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
<arg>${messages_by_folder['ttl(imdn_disposition_data)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.718" starttime="20210313 17:07:04.716"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.718" starttime="20210313 17:07:04.716"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
<arg>${messages_by_folder['ttl(modification_tuid)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.721" starttime="20210313 17:07:04.719"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.721" starttime="20210313 17:07:04.718"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(recent)']}</arg>
<arg>${messages_by_folder['ttl(recent)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(recent)']}</arg>
<arg>${messages_by_folder['ttl(recent)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.725" starttime="20210313 17:07:04.722"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.725" starttime="20210313 17:07:04.722"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${messages_by_folder['ttl(seen)']}</arg>
<arg>${messages_by_folder['ttl(seen)']}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${messages_by_folder['ttl(seen)']}</arg>
<arg>${messages_by_folder['ttl(seen)']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.728" starttime="20210313 17:07:04.727"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.728" starttime="20210313 17:07:04.726"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.729" starttime="20210313 17:07:00.988"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.729" starttime="20210313 17:06:59.265"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:04.729" starttime="20210313 17:06:59.265"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraIMDNMapping</arg>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="ValidateCassandraIMDNMapping" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${SUBSCRIBER_ID}_${imdn_msg_id}</arg>
</arguments>
<assign>
<var>${imdncorrelator}</var>
</assign>
<msg timestamp="20210313 17:07:04.735" level="INFO">${imdncorrelator} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:07:04.735" starttime="20210313 17:07:04.734"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:04.737" starttime="20210313 17:07:04.736"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from imdnmsgidmapping where userid='${userId}' and creation_tuid=${uid} LIMIT 1 ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:07:05.336" level="INFO">select json * from imdnmsgidmapping where userid='4feb7 06c-8458-11eb-b7ec-005056ae42da' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d674 2a1b2bf LIMIT 1 ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:07:05.337" starttime="20210313 17:07:04.737"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:07:05.363" level="INFO">[json]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "foldername": "RCSMessageStore/Chat/8888888880/", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "uid": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:05.363" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:05.364" starttime="20210313 17:07:05.338"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.366" starttime="20210313 17:07:05.365"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.366" starttime="20210313 17:07:05.364"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${cnt} == 0</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.367" starttime="20210313 17:07:05.366"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:07:05.368" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:07:05.368" starttime="20210313 17:07:05.367"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:07:05.370" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:05.371" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folder...</msg>
<status status="PASS" endtime="20210313 17:07:05.371" starttime="20210313 17:07:05.369"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${imdn_mapping}</var>
</assign>
<msg timestamp="20210313 17:07:05.373" level="INFO">${imdn_mapping} = {u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830...</msg>
<status status="PASS" endtime="20210313 17:07:05.373" starttime="20210313 17:07:05.371"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${imdn_mapping}</arg>
</arguments>
<msg timestamp="20210313 17:07:05.374" level="INFO">{u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'imdncorrelator': u'8888888880_37857c02-005f-9b17-9322-b8423992923a', u'cosid': u'10'}</msg>
<status status="PASS" endtime="20210313 17:07:05.374" starttime="20210313 17:07:05.373"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.377" starttime="20210313 17:07:05.376"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.377" starttime="20210313 17:07:05.375"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.380" starttime="20210313 17:07:05.379"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.381" starttime="20210313 17:07:05.378"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:05.384" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:05.384" starttime="20210313 17:07:05.382"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.385" starttime="20210313 17:07:05.381"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.387" starttime="20210313 17:07:05.386"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.388" starttime="20210313 17:07:05.385"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<msg timestamp="20210313 17:07:05.413" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:05.413" starttime="20210313 17:07:05.411"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.414" starttime="20210313 17:07:05.410"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.417" starttime="20210313 17:07:05.416"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.418" starttime="20210313 17:07:05.415"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.421" starttime="20210313 17:07:05.419"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.421" starttime="20210313 17:07:05.418"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.421" starttime="20210313 17:07:04.731"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.421" starttime="20210313 17:07:04.730"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<msg timestamp="20210313 17:07:05.426" level="FAIL">PNS notification verification failed 
Several failures occurred:

1) delivered != recent

2) Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:07:05.426" starttime="20210313 17:07:05.425"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:05.426" starttime="20210313 17:07:05.423"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:05.426" starttime="20210313 17:07:05.422"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.432" starttime="20210313 17:07:05.431"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:05.433" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:05.501" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:05.502" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:05.502" starttime="20210313 17:07:05.433"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:05.506" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:05.506" starttime="20210313 17:07:05.503"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:05.556" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:05.556" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:05.557" starttime="20210313 17:07:05.507"></status>
</kw>
<msg timestamp="20210313 17:07:05.557" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:05.557" starttime="20210313 17:07:05.428"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.560" starttime="20210313 17:07:05.559"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:05.561" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:05.630" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:05.631" starttime="20210313 17:07:05.560"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.631" starttime="20210313 17:07:05.558"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.634" starttime="20210313 17:07:05.633"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:05.635" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:05.779" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:05.782" starttime="20210313 17:07:05.634"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:05.785" level="INFO">27103 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:05.786" starttime="20210313 17:07:05.782"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:05.841" level="INFO">54490 packets received by filter
518 packets dropped by kernel
date
Sun Mar 14 00:01:04 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deliver_PM_Message"/"Deliver_PM_Message".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Deliver_PM_Message"/"Deliver_PM_Message".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:05.841" starttime="20210313 17:07:05.786"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.841" starttime="20210313 17:07:05.632"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.846" starttime="20210313 17:07:05.845"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.847" starttime="20210313 17:07:05.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.851" starttime="20210313 17:07:05.850"></status>
</kw>
<msg timestamp="20210313 17:07:05.851" level="INFO">${status} = ('PASS', None)</msg>
<status status="PASS" endtime="20210313 17:07:05.851" starttime="20210313 17:07:05.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<kw name="CloseRequest" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<kw name="Close Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.856" starttime="20210313 17:07:05.855"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.856" starttime="20210313 17:07:05.853"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.856" starttime="20210313 17:07:05.852"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:05.857" starttime="20210313 17:07:05.427"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="FAIL" endtime="20210313 17:07:05.857" critical="yes" starttime="20210313 17:06:55.925">PNS notification verification failed 
Several failures occurred:

1) delivered != recent

2) Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</status>
</test>
<test id="s1-t6" name="FolderSearchAfterIMDNDelivered">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:05.862" starttime="20210313 17:07:05.861"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:05.863" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:05.936" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:05.937" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:05.938" starttime="20210313 17:07:05.863"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:05.977" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:05.978" starttime="20210313 17:07:05.938"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:05.997" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:05.997" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:05.997" starttime="20210313 17:07:05.978"></status>
</kw>
<msg timestamp="20210313 17:07:05.998" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:05.998" starttime="20210313 17:07:05.861"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:06.000" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:06.000" starttime="20210313 17:07:05.999"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:06.003" starttime="20210313 17:07:06.002"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:06.004" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:06.064" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:06.065" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:06.065" starttime="20210313 17:07:06.003"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:06.067" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:06.202" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:06.202" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:06.202" starttime="20210313 17:07:06.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:06.204" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:06.204" starttime="20210313 17:07:06.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:06.206" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:06.207" starttime="20210313 17:07:06.205"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:06.209" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:06.209" starttime="20210313 17:07:06.208"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:06.211" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:06.212" starttime="20210313 17:07:06.210"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:06.242" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:06.243" starttime="20210313 17:07:06.212"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:06.264" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:06.268" starttime="20210313 17:07:06.244"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:06.277" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:06.277" starttime="20210313 17:07:06.269"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:06.308" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:06.309" starttime="20210313 17:07:06.278"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:06.309" starttime="20210313 17:07:06.000"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:06.317" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:06.317" starttime="20210313 17:07:06.315"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:06.318" starttime="20210313 17:07:06.317"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:06.319" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:06.400" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:06.401" starttime="20210313 17:07:06.319"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:06.445" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterIMDNDelivered"</msg>
<status status="PASS" endtime="20210313 17:07:06.446" starttime="20210313 17:07:06.402"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:06.466" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:06.467" starttime="20210313 17:07:06.446"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:06.482" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterIMDNDelivered"/"FolderSearchAfterIMDND elivered".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:06.483" starttime="20210313 17:07:06.468"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:06.492" level="INFO">[1] 4283
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:06.492" starttime="20210313 17:07:06.484"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:06.493" starttime="20210313 17:07:06.310"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:06.497" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:06.497" starttime="20210313 17:07:06.496"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:06.499" starttime="20210313 17:07:06.498"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:06.500" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:06.590" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:06.590" starttime="20210313 17:07:06.499"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:06.656" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterIMDNDelivered"</msg>
<status status="PASS" endtime="20210313 17:07:06.656" starttime="20210313 17:07:06.591"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:06.670" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:06.671" starttime="20210313 17:07:06.657"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:06.688" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"FolderSearchAfterIMDNDelivered"/"FolderSearchAfterIMDNDelivered".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:06.689" starttime="20210313 17:07:06.672"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:06.698" level="INFO">[2] 4310
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:06.699" starttime="20210313 17:07:06.689"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:06.699" starttime="20210313 17:07:06.493"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:06.700" starttime="20210313 17:07:05.860"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Folder search after seeing the message"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:06.701" starttime="20210313 17:07:06.701"></status>
</kw>
<kw name="FolderSearch" library="mStore_Digits_TMO_resources">
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>http://${server_root_path}${oem_host}${userId}/folders/${folderkey}</arg>
</arguments>
<assign>
<var>${FOLDER_SEARCH_RESOURCE_URL}</var>
</assign>
<msg timestamp="20210313 17:07:06.705" level="INFO">${FOLDER_SEARCH_RESOURCE_URL} = http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:07:06.705" starttime="20210313 17:07:06.704"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${obj_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:06.706" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:07:06.707" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"${FOLDER_SEARCH_RESOURCE_URL}"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
    ...</msg>
<status status="PASS" endtime="20210313 17:07:06.707" starttime="20210313 17:07:06.706"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:06.709" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"...</msg>
<status status="PASS" endtime="20210313 17:07:06.709" starttime="20210313 17:07:06.707"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${oem_host}${userId}/objects/operations/search</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:06.711" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search</msg>
<status status="PASS" endtime="20210313 17:07:06.711" starttime="20210313 17:07:06.709"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:08.011" level="INFO">Post Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search, data={
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
       "order": "Ascending"
       }
      ]
   }
  }
}

, headers={'Content-Type': 'application/json;', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:08.012" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.012" starttime="20210313 17:07:06.711"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:08.014" level="INFO">${response_status_code} = 200</msg>
<status status="PASS" endtime="20210313 17:07:08.014" starttime="20210313 17:07:08.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.015" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:07:08.016" starttime="20210313 17:07:08.015"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.017" level="INFO">{"objectList":{"object":[{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","attributes":{"attribute":[{"name":"Charset","value":["UTF-8"]},{"name":"Content-Transfer-Encoding","value":["quoted-printable"]},{"name":"Contribution-ID","value":["e0a1029e-a48b-4ca6-b185-299dada439be"]},{"name":"Conversation-ID","value":["2dbc584e-fc46-4a37-9a56-c2b93246d788"]},{"name":"date","value":["2021-03-13T17:06:25Z"]},{"name":"Direction","value":["In"]},{"name":"from","value":["tel:+9999999990"]},{"name":"IMDN-Message-ID","value":["37857c02-005f-9b17-9322-b8423992923a"]},{"name":"message-context","value":["X-RCS-PM"]},{"name":"P-Asserted-Service","value":["urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"]},{"name":"textcontent","value":["This is the new message we are depositing to test $@#^&amp;*!0123456789"]},{"name":"to","value":["tel:+8888888880"]}]},"flags":{"flag":["\\Recent","\\Delivered"],"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags"},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","path":"/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a"}]}}</msg>
<status status="PASS" endtime="20210313 17:07:08.017" starttime="20210313 17:07:08.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.018" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:06 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:WjNSTDlh32HGsmGn2OOB2vEe6S8rinV8-slot:1-instId:2-subOid:24-time:2021-03-14T00:01:07Z-localFqdn:10.10.219.141', 'content-length': '1512', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:08.019" starttime="20210313 17:07:08.018"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>${response_code}</arg>
<arg>msg="folder search is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.021" starttime="20210313 17:07:08.019"></status>
</kw>
<msg timestamp="20210313 17:07:08.021" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.021" starttime="20210313 17:07:06.702"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateChatFolderSearchResponse</arg>
<arg>direction=${DIRECTION}</arg>
<arg>response=${response}</arg>
<arg>msgStatus=recent,delivered</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="ValidateChatFolderSearchResponse" library="mStore_Digits_TMO_resources">
<arguments>
<arg>direction=${DIRECTION}</arg>
<arg>response=${response}</arg>
<arg>msgStatus=recent,delivered</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Create List</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>Copy List</arg>
<arg>${to_msg}</arg>
</arguments>
<assign>
<var>${to}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${to_msg}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.028" starttime="20210313 17:07:08.027"></status>
</kw>
<msg timestamp="20210313 17:07:08.028" level="INFO">${to} = ['tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:08.028" starttime="20210313 17:07:08.026"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:08.030" level="INFO">${status_msg} = [u'recent', u'delivered']</msg>
<status status="PASS" endtime="20210313 17:07:08.030" starttime="20210313 17:07:08.029"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:08.031" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:07:08.031" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:07:08.031" starttime="20210313 17:07:08.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${UID}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.032" level="INFO">51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:08.033" starttime="20210313 17:07:08.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.034" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:06 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:WjNSTDlh32HGsmGn2OOB2vEe6S8rinV8-slot:1-instId:2-subOid:24-time:2021-03-14T00:01:07Z-localFqdn:10.10.219.141', 'content-length': '1512', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:08.034" starttime="20210313 17:07:08.033"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:08.036" level="INFO">${data} = {u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5...</msg>
<status status="PASS" endtime="20210313 17:07:08.036" starttime="20210313 17:07:08.034"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.038" level="INFO">{u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'flags': {u'flag': [u'\\Recent', u'\\Delivered'], u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags'}, u'path': u'/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'attributes': {u'attribute': [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}, {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}, {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}, {u'name': u'Direction', u'value': [u'In']}, {u'name': u'from', u'value': [u'tel:+9999999990']}, {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}, {u'name': u'message-context', u'value': [u'X-RCS-PM']}, {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}, {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}, {u'name': u'to', u'value': [u'tel:+8888888880']}]}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}]}}</msg>
<status status="PASS" endtime="20210313 17:07:08.038" starttime="20210313 17:07:08.037"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data['objectList']['object']}</arg>
</arguments>
<assign>
<var>${list_of_objects}</var>
</assign>
<msg timestamp="20210313 17:07:08.040" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:07:08.040" level="INFO">${list_of_objects} = 1</msg>
<status status="PASS" endtime="20210313 17:07:08.040" starttime="20210313 17:07:08.039"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.043" starttime="20210313 17:07:08.041"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.043" starttime="20210313 17:07:08.041"></status>
</kw>
<kw type="for" name="${index} IN RANGE [ 0 | ${list_of_objects} ]">
<kw type="foritem" name="${index} = 0">
<kw name="Get_FolderSearch_AttributesPair" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${data['objectList']['object'][${index}]['attributes']['attribute']}</arg>
</arguments>
<assign>
<var>${Attributes_pair}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${attributes}</var>
</assign>
<msg timestamp="20210313 17:07:08.047" level="INFO">${attributes} = [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be'...</msg>
<status status="PASS" endtime="20210313 17:07:08.047" starttime="20210313 17:07:08.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${Attributes_pair}</var>
</assign>
<msg timestamp="20210313 17:07:08.049" level="INFO">${Attributes_pair} = {}</msg>
<status status="PASS" endtime="20210313 17:07:08.049" starttime="20210313 17:07:08.048"></status>
</kw>
<kw type="for" name="${pair} IN [ @{attributes} ]">
<kw type="foritem" name="${pair} = {u'name': u'Charset', u'value': [u'UTF-8']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.051" level="INFO">Charset</msg>
<status status="PASS" endtime="20210313 17:07:08.052" starttime="20210313 17:07:08.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.053" level="INFO">[u'UTF-8']</msg>
<status status="PASS" endtime="20210313 17:07:08.053" starttime="20210313 17:07:08.052"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.055" starttime="20210313 17:07:08.054"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.056" starttime="20210313 17:07:08.050"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.059" level="INFO">Content-Transfer-Encoding</msg>
<status status="PASS" endtime="20210313 17:07:08.059" starttime="20210313 17:07:08.057"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.061" level="INFO">[u'quoted-printable']</msg>
<status status="PASS" endtime="20210313 17:07:08.061" starttime="20210313 17:07:08.060"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.063" starttime="20210313 17:07:08.062"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.063" starttime="20210313 17:07:08.056"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.066" level="INFO">Contribution-ID</msg>
<status status="PASS" endtime="20210313 17:07:08.066" starttime="20210313 17:07:08.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.068" level="INFO">[u'e0a1029e-a48b-4ca6-b185-299dada439be']</msg>
<status status="PASS" endtime="20210313 17:07:08.068" starttime="20210313 17:07:08.066"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.069" starttime="20210313 17:07:08.068"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.070" starttime="20210313 17:07:08.064"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.071" level="INFO">Conversation-ID</msg>
<status status="PASS" endtime="20210313 17:07:08.071" starttime="20210313 17:07:08.070"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.073" level="INFO">[u'2dbc584e-fc46-4a37-9a56-c2b93246d788']</msg>
<status status="PASS" endtime="20210313 17:07:08.073" starttime="20210313 17:07:08.072"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.076" starttime="20210313 17:07:08.075"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.076" starttime="20210313 17:07:08.070"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.078" level="INFO">date</msg>
<status status="PASS" endtime="20210313 17:07:08.078" starttime="20210313 17:07:08.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.079" level="INFO">[u'2021-03-13T17:06:25Z']</msg>
<status status="PASS" endtime="20210313 17:07:08.080" starttime="20210313 17:07:08.079"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.082" starttime="20210313 17:07:08.080"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.082" starttime="20210313 17:07:08.077"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Direction', u'value': [u'In']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.084" level="INFO">Direction</msg>
<status status="PASS" endtime="20210313 17:07:08.084" starttime="20210313 17:07:08.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.085" level="INFO">[u'In']</msg>
<status status="PASS" endtime="20210313 17:07:08.086" starttime="20210313 17:07:08.085"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.089" starttime="20210313 17:07:08.086"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.089" starttime="20210313 17:07:08.082"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'from', u'value': [u'tel:+9999999990']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.092" level="INFO">from</msg>
<status status="PASS" endtime="20210313 17:07:08.092" starttime="20210313 17:07:08.090"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.094" level="INFO">[u'tel:+9999999990']</msg>
<status status="PASS" endtime="20210313 17:07:08.094" starttime="20210313 17:07:08.093"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.097" starttime="20210313 17:07:08.095"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.097" starttime="20210313 17:07:08.090"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.099" level="INFO">IMDN-Message-ID</msg>
<status status="PASS" endtime="20210313 17:07:08.099" starttime="20210313 17:07:08.098"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.102" level="INFO">[u'37857c02-005f-9b17-9322-b8423992923a']</msg>
<status status="PASS" endtime="20210313 17:07:08.102" starttime="20210313 17:07:08.101"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.105" starttime="20210313 17:07:08.103"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.105" starttime="20210313 17:07:08.097"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'message-context', u'value': [u'X-RCS-PM']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.107" level="INFO">message-context</msg>
<status status="PASS" endtime="20210313 17:07:08.108" starttime="20210313 17:07:08.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.109" level="INFO">[u'X-RCS-PM']</msg>
<status status="PASS" endtime="20210313 17:07:08.110" starttime="20210313 17:07:08.108"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.112" starttime="20210313 17:07:08.110"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.112" starttime="20210313 17:07:08.106"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.114" level="INFO">P-Asserted-Service</msg>
<status status="PASS" endtime="20210313 17:07:08.114" starttime="20210313 17:07:08.113"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.115" level="INFO">[u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']</msg>
<status status="PASS" endtime="20210313 17:07:08.115" starttime="20210313 17:07:08.114"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.117" starttime="20210313 17:07:08.116"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.117" starttime="20210313 17:07:08.112"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.121" level="INFO">textcontent</msg>
<status status="PASS" endtime="20210313 17:07:08.121" starttime="20210313 17:07:08.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.123" level="INFO">[u'This is the new message we are depositing to test $@#^&amp;*!0123456789']</msg>
<status status="PASS" endtime="20210313 17:07:08.123" starttime="20210313 17:07:08.122"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.125" starttime="20210313 17:07:08.124"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.126" starttime="20210313 17:07:08.118"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'to', u'value': [u'tel:+8888888880']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.129" level="INFO">to</msg>
<status status="PASS" endtime="20210313 17:07:08.129" starttime="20210313 17:07:08.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.131" level="INFO">[u'tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:08.131" starttime="20210313 17:07:08.129"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.134" starttime="20210313 17:07:08.132"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.134" starttime="20210313 17:07:08.126"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.134" starttime="20210313 17:07:08.049"></status>
</kw>
<msg timestamp="20210313 17:07:08.135" level="INFO">${Attributes_pair} = {u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788...</msg>
<status status="PASS" endtime="20210313 17:07:08.135" starttime="20210313 17:07:08.044"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.137" level="INFO">{u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788'], u'date': [u'2021-03-13T17:06:25Z'], u'Direction': [u'In'], u'from': [u'tel:+9999999990'], u'IMDN-Message-ID': [u'37857c02-005f-9b17-9322-b8423992923a'], u'message-context': [u'X-RCS-PM'], u'P-Asserted-Service': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg'], u'textcontent': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789'], u'to': [u'tel:+8888888880']}</msg>
<status status="PASS" endtime="20210313 17:07:08.137" starttime="20210313 17:07:08.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${obj_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:08.140" level="INFO">${obj_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:08.140" starttime="20210313 17:07:08.138"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey1}%3d%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_resourceURL}</var>
</assign>
<msg timestamp="20210313 17:07:08.143" level="INFO">${obj_resourceURL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:08.143" starttime="20210313 17:07:08.141"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/${RCS_PARENT_PATH}/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_Folderpath}</var>
</assign>
<msg timestamp="20210313 17:07:08.144" level="INFO">${obj_Folderpath} = /RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:08.144" starttime="20210313 17:07:08.143"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.147" starttime="20210313 17:07:08.146"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.148" starttime="20210313 17:07:08.145"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.151" starttime="20210313 17:07:08.149"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.151" starttime="20210313 17:07:08.148"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.154" starttime="20210313 17:07:08.153"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.154" starttime="20210313 17:07:08.152"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.157" starttime="20210313 17:07:08.156"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.157" starttime="20210313 17:07:08.155"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.161" starttime="20210313 17:07:08.159"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.161" starttime="20210313 17:07:08.158"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.167" starttime="20210313 17:07:08.165"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.167" starttime="20210313 17:07:08.163"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.167" starttime="20210313 17:07:08.161"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.170" starttime="20210313 17:07:08.168"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.170" starttime="20210313 17:07:08.168"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.172" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.173" starttime="20210313 17:07:08.172"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.173" starttime="20210313 17:07:08.170"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.176" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.176" starttime="20210313 17:07:08.174"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.176" starttime="20210313 17:07:08.173"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.178" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.179" starttime="20210313 17:07:08.177"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.179" starttime="20210313 17:07:08.177"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.183" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.183" starttime="20210313 17:07:08.180"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.184" starttime="20210313 17:07:08.179"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.187" starttime="20210313 17:07:08.185"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.187" starttime="20210313 17:07:08.184"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.193" starttime="20210313 17:07:08.189"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.193" starttime="20210313 17:07:08.188"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.196" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.196" starttime="20210313 17:07:08.194"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.196" starttime="20210313 17:07:08.194"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.199" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.199" starttime="20210313 17:07:08.198"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.199" starttime="20210313 17:07:08.197"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.202" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.202" starttime="20210313 17:07:08.201"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.202" starttime="20210313 17:07:08.200"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.205" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.205" starttime="20210313 17:07:08.204"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.205" starttime="20210313 17:07:08.203"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.209" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:08.209" starttime="20210313 17:07:08.208"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.209" starttime="20210313 17:07:08.207"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.210" starttime="20210313 17:07:08.206"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.214" starttime="20210313 17:07:08.213"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.214" starttime="20210313 17:07:08.211"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.214" starttime="20210313 17:07:08.210"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:08.216" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:08.216" starttime="20210313 17:07:08.215"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:08.217" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:08.217" starttime="20210313 17:07:08.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${delivered_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:08.219" level="INFO">${delivered_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:08.219" starttime="20210313 17:07:08.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${read_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${read_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:08.220" level="INFO">${read_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:08.220" starttime="20210313 17:07:08.219"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.222" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:08.222" starttime="20210313 17:07:08.221"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.223" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:08.223" starttime="20210313 17:07:08.222"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.224" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:08.225" starttime="20210313 17:07:08.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.226" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:08.226" starttime="20210313 17:07:08.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.227" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:08.227" starttime="20210313 17:07:08.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.228" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:08.228" starttime="20210313 17:07:08.228"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.231" starttime="20210313 17:07:08.230"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.232" starttime="20210313 17:07:08.229"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.235" starttime="20210313 17:07:08.233"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.235" starttime="20210313 17:07:08.232"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.239" starttime="20210313 17:07:08.237"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.240" starttime="20210313 17:07:08.235"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.240" starttime="20210313 17:07:08.044"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.240" starttime="20210313 17:07:08.043"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.240" starttime="20210313 17:07:08.023"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.241" starttime="20210313 17:07:08.022"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.248" starttime="20210313 17:07:08.246"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:08.249" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:08.311" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:08.312" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:08.312" starttime="20210313 17:07:08.248"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:08.316" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:08.317" starttime="20210313 17:07:08.313"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:08.371" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:08.372" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:08.372" starttime="20210313 17:07:08.317"></status>
</kw>
<msg timestamp="20210313 17:07:08.372" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:08.372" starttime="20210313 17:07:08.244"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.376" starttime="20210313 17:07:08.374"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:08.377" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:08.456" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:08.457" starttime="20210313 17:07:08.376"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.457" starttime="20210313 17:07:08.373"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.461" starttime="20210313 17:07:08.460"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:08.462" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:08.583" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:08.584" starttime="20210313 17:07:08.462"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:08.587" level="INFO">5423 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:08.587" starttime="20210313 17:07:08.584"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:08.648" level="INFO">10936 packets received by filter
157 packets dropped by kernel
date
Sun Mar 14 00:01:07 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterIMDNDelivered"/"FolderSearchAfterIMDNDelivered".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterIMDNDelivered"/"FolderSearchAfterIMDNDelivered".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:08.648" starttime="20210313 17:07:08.587"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.649" starttime="20210313 17:07:08.458"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.652" starttime="20210313 17:07:08.650"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.652" starttime="20210313 17:07:08.650"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.723" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:07:08.723" starttime="20210313 17:07:08.653"></status>
</kw>
<msg timestamp="20210313 17:07:08.723" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:07:08.723" starttime="20210313 17:07:08.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.725" starttime="20210313 17:07:08.724"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:08.726" starttime="20210313 17:07:08.242"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:08.726" critical="yes" starttime="20210313 17:07:05.858"></status>
</test>
<test id="s1-t7" name="Display_PM_Message">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.739" starttime="20210313 17:07:08.738"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:08.749" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:08.810" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:08.811" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:08.811" starttime="20210313 17:07:08.740"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:08.851" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:08.851" starttime="20210313 17:07:08.811"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:08.880" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:08.881" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:08.881" starttime="20210313 17:07:08.852"></status>
</kw>
<msg timestamp="20210313 17:07:08.882" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:08.882" starttime="20210313 17:07:08.736"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:08.890" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:08.891" starttime="20210313 17:07:08.889"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:08.894" starttime="20210313 17:07:08.892"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:08.895" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:08.993" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:08.994" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:08.994" starttime="20210313 17:07:08.895"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:08.996" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:09.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:09.118" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:09.118" starttime="20210313 17:07:08.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:09.120" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:09.120" starttime="20210313 17:07:09.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:09.121" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:09.122" starttime="20210313 17:07:09.121"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:09.124" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:09.124" starttime="20210313 17:07:09.123"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:09.126" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:09.126" starttime="20210313 17:07:09.125"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:09.159" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:09.159" starttime="20210313 17:07:09.126"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:09.174" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:09.174" starttime="20210313 17:07:09.160"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:09.182" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:09.182" starttime="20210313 17:07:09.175"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:09.199" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:09.200" starttime="20210313 17:07:09.183"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:09.201" starttime="20210313 17:07:08.891"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:09.206" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:09.206" starttime="20210313 17:07:09.204"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:09.208" starttime="20210313 17:07:09.207"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:09.209" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:09.293" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:09.293" starttime="20210313 17:07:09.209"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:09.328" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Display _PM_Message"</msg>
<status status="PASS" endtime="20210313 17:07:09.328" starttime="20210313 17:07:09.294"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:09.342" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:09.342" starttime="20210313 17:07:09.329"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:09.359" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Display_PM_Message"/"Display_PM_Message".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:09.360" starttime="20210313 17:07:09.344"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:09.369" level="INFO">[1] 4470
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:09.370" starttime="20210313 17:07:09.361"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:09.370" starttime="20210313 17:07:09.201"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:09.374" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:09.375" starttime="20210313 17:07:09.373"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:09.376" starttime="20210313 17:07:09.375"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:09.378" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:09.529" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:09.530" starttime="20210313 17:07:09.377"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:09.574" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Display _PM_Message"</msg>
<status status="PASS" endtime="20210313 17:07:09.576" starttime="20210313 17:07:09.531"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:09.589" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:09.590" starttime="20210313 17:07:09.576"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:09.602" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Display_PM_Message"/"Display_PM_Message".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:09.603" starttime="20210313 17:07:09.591"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:09.618" level="INFO">[2] 4497
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:09.618" starttime="20210313 17:07:09.603"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:09.619" starttime="20210313 17:07:09.371"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:09.619" starttime="20210313 17:07:08.735"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Display PM message"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:09.622" starttime="20210313 17:07:09.620"></status>
</kw>
<kw name="Deposit_Message" library="mStore_Digits_TMO_resources">
<arguments>
<arg>X_RCS_MSG_STATUS=Displayed</arg>
<arg>object_file=${DELIVER_DISPLAY_OBJ_FILE}</arg>
<arg>MESSAGE_CONTEXT=X-RCS-IMDN</arg>
<arg>DIRECTION_VALUE=Out</arg>
</arguments>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${X_RCS_MSG_STATUS}' == 'Delivered'</arg>
<arg>delivery</arg>
<arg>display</arg>
</arguments>
<assign>
<var>${NOTIFICATION_METHOD}</var>
</assign>
<msg timestamp="20210313 17:07:09.627" level="INFO">${NOTIFICATION_METHOD} = display</msg>
<status status="PASS" endtime="20210313 17:07:09.627" starttime="20210313 17:07:09.626"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${object_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:09.629" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/Deliver_Display_PM_Chat_Msg.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/Deliver_Display_PM_Chat_Msg.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:07:09.630" level="INFO">${data} = ---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"${FT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/","attributes":{"attribute":[{"name":"From","value":"${MSG_TO}"},{"name"...</msg>
<status status="PASS" endtime="20210313 17:07:09.631" starttime="20210313 17:07:09.628"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:09.637" level="INFO">${data} = ---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"RCSMessageStore/FT/8888888880/","attributes":{"attribute":[{"name":"From","value":"tel:+8888888880"},{"name":"To",...</msg>
<status status="PASS" endtime="20210313 17:07:09.637" starttime="20210313 17:07:09.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:07:09.639" level="INFO">---boundaryRMS123

Content-Type: application/json

{"object": {"parentFolderPath":"RCSMessageStore/FT/8888888880/","attributes":{"attribute":[{"name":"From","value":"tel:+8888888880"},{"name":"To","value":"tel:+9999999990"},{"name":"Date","value":"2021-03-13T17:06:25Z"},{"name":"Conversation-ID","value":"2dbc584e-fc46-4a37-9a56-c2b93246d788"},{"name":"Contribution-ID","value":"e0a1029e-a48b-4ca6-b185-299dada439be"},{"name":"P-Asserted-Service","value":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"},{"name":"IMDN-Message-ID","value":"37857c02-005f-9b17-9322-b8423992923a"},{"name":"Direction","value":"Out"},{"name":"X-DateTime","value":"1615655185"},{"name":"X-IMDN-Correlator","value":"8888888880_37857c02-005f-9b17-9322-b8423992923a"},{"name":"X-SIP-CallId","value":"005056884776-4d72-eb161700-1e2-571fa736-a0e46"},{"name":"X-RCS-MSG-Status","value":"Displayed"},{"name":"Message-Context","value":"X-RCS-IMDN"}]}}}
---boundaryRMS123

Content-Type:Message/CPIM

From: &lt;tel:+8888888880?Accept-Contact=+sip.instance="&lt;urn:uuid:31abb8b3-0769-1032-9e9d-c5acf9ae46e1&gt;";require;explicit&gt;
To: &lt;tel:+9999999990&gt;
NS: imdn&lt;urn:ietf:params:imdn&gt;
imdn.Message-ID: 37857c02-005f-9b17-9322-b8423992923a
DateTime: 2021-03-13T17:06:25Z
Original-To: tel:+9999999990

Content-Disposition: notification
Content-Type: message/imdn+xml
Content-Length: 286

&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;imdn xmlns="urn:ietf:params:xml:ns:imdn"&gt;
  &lt;message-id&gt;37857c02-005f-9b17-9322-b8423992923a&lt;/message-id&gt;
  &lt;datetime&gt;2021-03-13T17:06:25Z&lt;/datetime&gt;
  &lt;recipient-uri&gt;tel:+9999999990&lt;/recipient-uri&gt;
  &lt;original-recipient-uri&gt;tel:+8888888880&lt;/original-recipient-uri&gt;
  &lt;display-notification&gt;
    &lt;status&gt;
      &lt;Displayed/&gt;
    &lt;/status&gt;
  &lt;/display-notification&gt;
&lt;/imdn&gt;

---boundaryRMS123--

</msg>
<status status="PASS" endtime="20210313 17:07:09.639" starttime="20210313 17:07:09.638"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${payload_length}</var>
</assign>
<msg timestamp="20210313 17:07:09.641" level="INFO">Length is 1807</msg>
<msg timestamp="20210313 17:07:09.641" level="INFO">${payload_length} = 1807</msg>
<status status="PASS" endtime="20210313 17:07:09.641" starttime="20210313 17:07:09.640"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${payload_length}</arg>
</arguments>
<msg timestamp="20210313 17:07:09.643" level="INFO">1807</msg>
<status status="PASS" endtime="20210313 17:07:09.643" starttime="20210313 17:07:09.642"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${payload_length}</arg>
</arguments>
<msg timestamp="20210313 17:07:09.645" level="INFO">${payload_length} = 1807</msg>
<status status="PASS" endtime="20210313 17:07:09.645" starttime="20210313 17:07:09.644"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${url}${UserId}/objects</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:11.199" level="INFO">Post Request using : alias=mStoreService, uri=/rmsclient/nms/v1/rms/tel%3a%2b8888888880/objects, data=&lt;multipart/form-data;boundary="-boundaryRMS123";&gt;, headers={'Content-Type': 'multipart/form-data;boundary="-boundaryRMS123";', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:11.200" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:11.200" starttime="20210313 17:07:09.646"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:11.203" level="INFO">${response_status_code} = 201</msg>
<status status="PASS" endtime="20210313 17:07:11.203" starttime="20210313 17:07:11.201"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.205" level="INFO">201</msg>
<status status="PASS" endtime="20210313 17:07:11.205" starttime="20210313 17:07:11.204"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.206" level="INFO"></msg>
<status status="PASS" endtime="20210313 17:07:11.206" starttime="20210313 17:07:11.205"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.208" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:09 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:kF5RbxYHLGNxB2HCW3G0zYYMBgBA8dRi-slot:1-instId:1-subOid:25-time:2021-03-14T00:01:10Z-localFqdn:10.10.219.141', 'content-length': '0', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:11.208" starttime="20210313 17:07:11.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>201</arg>
<arg>msg="deliver pm msg is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:11.210" starttime="20210313 17:07:11.208"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:11.211" starttime="20210313 17:07:09.622"></status>
</kw>
<kw name="GetServicerequest" library="mStore_Generic_resources">
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<kw name="Get One Request" library="Socket_PNS_NMS">
<arguments>
<arg>${service}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<msg timestamp="20210313 17:07:11.969" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286fa0&gt;</msg>
<status status="PASS" endtime="20210313 17:07:11.969" starttime="20210313 17:07:11.214"></status>
</kw>
<msg timestamp="20210313 17:07:11.970" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286fa0&gt;</msg>
<status status="PASS" endtime="20210313 17:07:11.970" starttime="20210313 17:07:11.212"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.971" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286fa0&gt;</msg>
<status status="PASS" endtime="20210313 17:07:11.971" starttime="20210313 17:07:11.970"></status>
</kw>
<kw name="GetRequestData" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${headers}</var>
<var>${req_body}</var>
<var>${version}</var>
</assign>
<kw name="Read Request Body" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:11.975" level="INFO">${data} = (&lt;mimetools.Message instance at 0x7fa45c29bf38&gt;, '{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype...</msg>
<status status="PASS" endtime="20210313 17:07:11.975" starttime="20210313 17:07:11.973"></status>
</kw>
<msg timestamp="20210313 17:07:11.975" level="INFO">${headers} = Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-ConnId:kF5RbxYHLGNxB2HCW3G0zYYMBgBA8dRi-slot...</msg>
<msg timestamp="20210313 17:07:11.975" level="INFO">${req_body} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:11.019","nm...</msg>
<msg timestamp="20210313 17:07:11.976" level="INFO">${version} = HTTP/1.1</msg>
<status status="PASS" endtime="20210313 17:07:11.976" starttime="20210313 17:07:11.972"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ValidateChatPNSNotfn</arg>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=SEEN,DELIVERED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<assign>
<var>${pns_status}</var>
<var>${value}</var>
</assign>
<kw name="ValidateChatPNSNotfn" library="mStore_Digits_TMO_resources">
<arguments>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=SEEN,DELIVERED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.982" level="INFO">Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-ConnId:kF5RbxYHLGNxB2HCW3G0zYYMBgBA8dRi-slot:0-instId:1-subOid:65657-time:2021-03-14T00:01:11.000-localFqdn:10.10.219.141
Host: pns.server.mavenir1.com:8060
Content-Length: 1618
</msg>
<status status="PASS" endtime="20210313 17:07:11.982" starttime="20210313 17:07:11.982"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.983" level="INFO">{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:11.019","nmsEventList":{"nmsEvent":[{"changedObject":{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","flags":{"flag":["\\SEEN"]},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a","message":{"store":"RCSMessageStore/Chat/8888888880/","objectURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","direction":"In","message-time":"2021-03-13T09:06:25.000-08:00","status":"SEEN,DELIVERED","sender":"tel:+9999999990","recipients":[{"uri":"tel:+8888888880"}],"imdn-message-id":"37857c02-005f-9b17-9322-b8423992923a","content":[{"content-type":"text/plain","content-size":"67","charset":"UTF-8","content-transfer-encoding":"quoted-printable","content":"This is the new message we are depositing to test $@#^&amp;*!0123456789","rcs-data":{"sip-call-id":"005056884776-4d72-eb161700-1e2-571fa736-a0e46","feature-tag":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","p-asserted-service":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","contribution-id":"e0a1029e-a48b-4ca6-b185-299dada439be","conversation-id":"2dbc584e-fc46-4a37-9a56-c2b93246d788"}}]}}}]}}}</msg>
<status status="PASS" endtime="20210313 17:07:11.984" starttime="20210313 17:07:11.983"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_resource_url}</var>
</assign>
<msg timestamp="20210313 17:07:11.985" level="INFO">${pns_resource_url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:11.986" starttime="20210313 17:07:11.984"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_object_Url}</var>
</assign>
<msg timestamp="20210313 17:07:11.987" level="INFO">${pns_object_Url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:11.987" starttime="20210313 17:07:11.986"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${pns_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:11.989" level="INFO">${pns_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:11.989" starttime="20210313 17:07:11.988"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:11.991" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:11.019","nm...</msg>
<status status="PASS" endtime="20210313 17:07:11.991" starttime="20210313 17:07:11.990"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>\\</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:11.992" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:11.019","nm...</msg>
<status status="PASS" endtime="20210313 17:07:11.992" starttime="20210313 17:07:11.991"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''',strict=False)</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_out}</var>
</assign>
<msg timestamp="20210313 17:07:11.995" level="INFO">${json_out} = {u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4...</msg>
<status status="PASS" endtime="20210313 17:07:11.995" starttime="20210313 17:07:11.993"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_out}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.996" level="INFO">{u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'message': {u'status': u'SEEN,DELIVERED', u'message-time': u'2021-03-13T09:06:25.000-08:00', u'direction': u'In', u'sender': u'tel:+9999999990', u'recipients': [{u'uri': u'tel:+8888888880'}], u'imdn-message-id': u'37857c02-005f-9b17-9322-b8423992923a', u'objectURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'content': [{u'content-transfer-encoding': u'quoted-printable', u'rcs-data': {u'sip-call-id': u'005056884776-4d72-eb161700-1e2-571fa736-a0e46', u'p-asserted-service': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'conversation-id': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'feature-tag': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'contribution-id': u'e0a1029e-a48b-4ca6-b185-299dada439be'}, u'charset': u'UTF-8', u'content-size': u'67', u'content': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'content-type': u'text/plain'}], u'store': u'RCSMessageStore/Chat/8888888880/'}, u'flags': {u'flag': [u'SEEN']}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}}]}, u'pns-subtype': u'ChatS', u'recipients': [{u'uri': u'tel:+8888888880'}], u'pns-time': u'2021-03-14T00:01:11.019', u'pns-type': u'RCSPage', u'serviceName': u'SyncApp', u'TTL': u'600', u'channel': u'pns_channe'}}</msg>
<status status="PASS" endtime="20210313 17:07:11.997" starttime="20210313 17:07:11.995"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PNS_OBJECT_URL}</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
</arguments>
<msg timestamp="20210313 17:07:11.998" level="INFO">${PNS_OBJECT_URL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:11.999" starttime="20210313 17:07:11.997"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>https://${service_root_path}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${OBJECT_URL}</var>
</assign>
<msg timestamp="20210313 17:07:12.001" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:12.001" starttime="20210313 17:07:11.999"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OBJECT_URL}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.003" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:12.003" starttime="20210313 17:07:12.002"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:12.005" level="INFO">${status_msg} = [u'SEEN', u'DELIVERED']</msg>
<status status="PASS" endtime="20210313 17:07:12.005" starttime="20210313 17:07:12.004"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:12.006" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:07:12.007" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:07:12.007" starttime="20210313 17:07:12.006"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${len_response_body}</var>
</assign>
<msg timestamp="20210313 17:07:12.010" level="INFO">Length is 1618</msg>
<msg timestamp="20210313 17:07:12.010" level="INFO">${len_response_body} = 1618</msg>
<status status="PASS" endtime="20210313 17:07:12.010" starttime="20210313 17:07:12.008"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.014" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.015" starttime="20210313 17:07:12.013"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.015" starttime="20210313 17:07:12.012"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.015" starttime="20210313 17:07:12.011"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.018" starttime="20210313 17:07:12.017"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.018" starttime="20210313 17:07:12.016"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.021" starttime="20210313 17:07:12.020"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.021" starttime="20210313 17:07:12.019"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.026" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.026" starttime="20210313 17:07:12.024"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.026" starttime="20210313 17:07:12.023"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.026" starttime="20210313 17:07:12.022"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.029" starttime="20210313 17:07:12.028"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.030" starttime="20210313 17:07:12.027"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword and Continue on Failure</arg>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.046" level="FAIL">Resolving variable '${headers['X-mStoreFE-Addr']}' failed: Variable '${headers}' not found. Did you mean:
    ${pns_headers}</msg>
<status status="FAIL" endtime="20210313 17:07:12.046" starttime="20210313 17:07:12.032"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:12.046" starttime="20210313 17:07:12.031"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.046" starttime="20210313 17:07:12.030"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.049" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.049" starttime="20210313 17:07:12.048"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.050" starttime="20210313 17:07:12.047"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.052" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.052" starttime="20210313 17:07:12.051"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.052" starttime="20210313 17:07:12.050"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.055" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.055" starttime="20210313 17:07:12.054"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.055" starttime="20210313 17:07:12.053"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.058" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.058" starttime="20210313 17:07:12.056"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.058" starttime="20210313 17:07:12.056"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.061" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.061" starttime="20210313 17:07:12.059"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.061" starttime="20210313 17:07:12.058"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.065" starttime="20210313 17:07:12.063"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.065" starttime="20210313 17:07:12.062"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.068" starttime="20210313 17:07:12.067"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.069" starttime="20210313 17:07:12.066"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.073" starttime="20210313 17:07:12.071"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.074" starttime="20210313 17:07:12.070"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20210313 17:07:12.077" level="FAIL">Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:07:12.078" starttime="20210313 17:07:12.076"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:12.078" starttime="20210313 17:07:12.075"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:12.078" starttime="20210313 17:07:12.074"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.081" starttime="20210313 17:07:12.079"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.081" starttime="20210313 17:07:12.078"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.086" starttime="20210313 17:07:12.083"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.086" starttime="20210313 17:07:12.082"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.089" starttime="20210313 17:07:12.087"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.089" starttime="20210313 17:07:12.086"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.093" starttime="20210313 17:07:12.091"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.093" starttime="20210313 17:07:12.090"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.097" starttime="20210313 17:07:12.095"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.097" starttime="20210313 17:07:12.094"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.101" starttime="20210313 17:07:12.099"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.102" starttime="20210313 17:07:12.098"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.105" starttime="20210313 17:07:12.103"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.105" starttime="20210313 17:07:12.102"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.108" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.109" starttime="20210313 17:07:12.107"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.109" starttime="20210313 17:07:12.106"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.115" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.116" starttime="20210313 17:07:12.114"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.116" starttime="20210313 17:07:12.112"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.116" starttime="20210313 17:07:12.110"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.119" starttime="20210313 17:07:12.118"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.120" starttime="20210313 17:07:12.117"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' != 'deposit'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:12.121" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:12.122" starttime="20210313 17:07:12.120"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:12.123" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:12.123" starttime="20210313 17:07:12.122"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.127" starttime="20210313 17:07:12.125"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.127" starttime="20210313 17:07:12.124"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.130" starttime="20210313 17:07:12.129"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.130" starttime="20210313 17:07:12.127"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.134" starttime="20210313 17:07:12.132"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.134" starttime="20210313 17:07:12.131"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.138" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.138" starttime="20210313 17:07:12.136"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.138" starttime="20210313 17:07:12.135"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.141" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.142" starttime="20210313 17:07:12.140"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.142" starttime="20210313 17:07:12.139"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.146" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.146" starttime="20210313 17:07:12.144"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.147" starttime="20210313 17:07:12.143"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.150" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.150" starttime="20210313 17:07:12.148"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.150" starttime="20210313 17:07:12.147"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.154" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.154" starttime="20210313 17:07:12.152"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.154" starttime="20210313 17:07:12.151"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.159" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.160" starttime="20210313 17:07:12.156"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.161" starttime="20210313 17:07:12.155"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.164" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.164" starttime="20210313 17:07:12.162"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.164" starttime="20210313 17:07:12.161"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.167" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.167" starttime="20210313 17:07:12.165"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.167" starttime="20210313 17:07:12.165"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.169" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.170" starttime="20210313 17:07:12.168"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.170" starttime="20210313 17:07:12.168"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<msg timestamp="20210313 17:07:12.172" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:12.172" starttime="20210313 17:07:12.171"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.172" starttime="20210313 17:07:12.170"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:12.173" starttime="20210313 17:07:11.977"></status>
</kw>
<msg timestamp="20210313 17:07:12.173" level="INFO">${pns_status} = FAIL</msg>
<msg timestamp="20210313 17:07:12.173" level="INFO">${value} = Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="PASS" endtime="20210313 17:07:12.173" starttime="20210313 17:07:11.977"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="SendResponse" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Sendresponse Code" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
<arg>${response_code}</arg>
<arg>${message}</arg>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.179" starttime="20210313 17:07:12.178"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.179" starttime="20210313 17:07:12.176"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.179" starttime="20210313 17:07:12.175"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:12.180" starttime="20210313 17:07:12.174"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_original_folder_timestamp_CHAT</arg>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>delivered=1</arg>
</arguments>
<assign>
<var>${creation_tuid}</var>
<var>${modification_tuid}</var>
</assign>
<kw name="ValidateCassandra_messages_by_original_folder_timestamp_CHAT" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:12.185" starttime="20210313 17:07:12.184"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_original_folder_timestamp where userid='${userId}' AND folderkey='${folderkey}' AND creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:12.854" level="INFO">SELECT json * from messages_by_original_folder_timestam p where userid='4feb706c-8458-11eb-b7ec-005056ae42da' AND folderkey='UkNTTWVzc2F nZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' AND creation_tuid=51b3d2e1-8458-11eb-83b6-5d6 742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:07:12.855" starttime="20210313 17:07:12.185"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:13.121" level="INFO">[json]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": null, "bcc": null, "blockedmsgreasoncode": "", "bodyoctets": 67, "bucketkey": null, "bulletinid": null, "cc": null, "chunksize": null, "cnsbulletinon": null, "cnsgreetingon": 0, "contentdisposition": null, "contentencoding": "quoted-printable", "contenttype": "text/plain", "contributionid": "e0a1029e-a48b-4ca6-b185-299dada439be", "conversationid": "2dbc584e-fc46-4a37-9a56-c2b93246d788", "cpim": null, "creation_ts": "2021-03-14T00:01:09.995000", "creationdate": null, "deleted": 0, "delivered": 1, "deliveredimdnlist": null, "direction": null, "draft": 0, "expirytimestamp": null, "flagged": 0, "fromheader": "tel:+9999999990", "geolocation": null, "greetingname": "Greeting", "greetingtelnumber": null, "imapmsgheaders": "Content-type: text/plain;charset=UTF-8\\r\\nDate: Sat, 13 Mar 2021 17:06:25 +0000\\r\\nMessage-Context: X-RCS-PM\\r\\nDirection: In\\r\\nTo: tel:+8888888880\\r\\nFrom: tel:+9999999990\\r\\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\\r\\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\\r\\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\\r\\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\\r\\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\\r\\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\\r\\n\\r\\n", "imdn_disposition_data": null, "imdnmessageid": "37857c02-005f-9b17-9322-b8423992923a", "inprocess": null, "internaldate": "2021-03-13T17:06:25Z", "ismodifiedevent": null, "lastmodseq": null, "mdnflag": null, "message": "This is the new message we are depositing to test $@#^&amp;*!0123456789", "messageaction": null, "messagecontext": "X-RCS-PM", "messageid": "", "messagetype": "", "messageversion": null, "mimeversion": "", "modification_tuid": "61eea3b0-8458-11eb-83b6-5d6742a1b2bf", "mstore_version": "vm_2_1", "nscorrelationid": null, "numberofchunks": null, "objheaders": null, "originalfolderkey": null, "payloadheaders": "", "priority": -1, "protection": null, "purgenotify": null, "purgeuuid": null, "readimdnlist": null, "recent": 0, "recordlen": null, "replytonumber": null, "requestjson": null, "returnreceiptflag": null, "rfc2822size": 1401, "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "saved": null, "seen": 1, "sensitivity": null, "smscallbacknum": null, "sourcenode": null, "storageobjtype": "", "subject": "", "swiftobjurl": "/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "swiftpointer": 0, "thumbnailcontent": null, "timezone": null, "toheader": "tel:+8888888880", "tpdata": "", "tpdatatype": "", "transcriptresult": null, "transcriptstates": null, "uid": null, "user": null, "useractivity": null, "userdefinedflagname": "$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,", "userdefinedflagvalue": "0,0,0,0,0,0,0,", "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "xcontentpages": null, "xfuturedeliverytimestamp": null, "xorgvmuid": null}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:13.122" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:13.123" starttime="20210313 17:07:12.856"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:13.124" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:13.125" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": n...</msg>
<status status="PASS" endtime="20210313 17:07:13.125" starttime="20210313 17:07:13.123"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mboft_data}</var>
</assign>
<msg timestamp="20210313 17:07:13.128" level="INFO">${mboft_data} = {u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid...</msg>
<status status="PASS" endtime="20210313 17:07:13.128" starttime="20210313 17:07:13.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mboft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.129" level="INFO">{u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid': u'61eea3b0-8458-11eb-83b6-5d6742a1b2bf', u'cpim': None, u'sensitivity': None, u'smscallbacknum': None, u'contentdisposition': None, u'internaldate': u'2021-03-13T17:06:25Z', u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'flagged': 0, u'bucketkey': None, u'imdn_disposition_data': None, u'contributionid': u'e0a1029e-a48b-4ca6-b185-299dada439be', u'requestjson': None, u'xorgvmuid': None, u'bodyoctets': 67, u'userdefinedflagname': u'$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,', u'subject': u'', u'delivered': 1, u'useractivity': None, u'contenttype': u'text/plain', u'mstore_version': u'vm_2_1', u'messageaction': None, u'chunksize': None, u'deleted': 0, u'contentencoding': u'quoted-printable', u'protection': None, u'cnsgreetingon': 0, u'mdnflag': None, u'xfuturedeliverytimestamp': None, u'uuid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'toheader': u'tel:+8888888880', u'nscorrelationid': None, u'readimdnlist': None, u'purgenotify': None, u'conversationid': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'objheaders': None, u'geolocation': None, u'sourcenode': None, u'cc': None, u'cnsbulletinon': None, u'imapmsgheaders': u'Content-type: text/plain;charset=UTF-8\r\nDate: Sat, 13 Mar 2021 17:06:25 +0000\r\nMessage-Context: X-RCS-PM\r\nDirection: In\r\nTo: tel:+8888888880\r\nFrom: tel:+9999999990\r\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\r\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\r\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\r\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\r\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\r\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\r\n\r\n', u'message': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'creation_ts': u'2021-03-14T00:01:09.995000', u'uid': None, u'blockedmsgreasoncode': u'', u'lastmodseq': None, u'inprocess': None, u'priority': -1, u'draft': 0, u'purgeuuid': None, u'fromheader': u'tel:+9999999990', u'direction': None, u'storageobjtype': u'', u'deliveredimdnlist': None, u'messagecontext': u'X-RCS-PM', u'tpdatatype': u'', u'ismodifiedevent': None, u'returnreceiptflag': None, u'originalfolderkey': None, u'messageversion': None, u'replytonumber': None, u'bulletinid': None, u'mimeversion': u'', u'timezone': None, u'seen': 1, u'recordlen': None, u'swiftobjurl': u'/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'imdnmessageid': u'37857c02-005f-9b17-9322-b8423992923a', u'messagetype': u'', u'thumbnailcontent': None, u'swiftpointer': 0, u'tpdata': u'', u'numberofchunks': None, u'userdefinedflagvalue': u'0,0,0,0,0,0,0,', u'user': None, u'attributes': None, u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'transcriptresult': None, u'recent': 0, u'xcontentpages': None, u'greetingtelnumber': None, u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'bcc': None, u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'creationdate': None}</msg>
<status status="PASS" endtime="20210313 17:07:13.130" starttime="20210313 17:07:13.129"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.133" starttime="20210313 17:07:13.131"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.133" starttime="20210313 17:07:13.130"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.137" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.137" starttime="20210313 17:07:13.136"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.137" starttime="20210313 17:07:13.134"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.141" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.141" starttime="20210313 17:07:13.139"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.141" starttime="20210313 17:07:13.138"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.147" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.148" starttime="20210313 17:07:13.146"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.148" starttime="20210313 17:07:13.144"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.148" starttime="20210313 17:07:13.142"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.153" starttime="20210313 17:07:13.151"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.153" starttime="20210313 17:07:13.149"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.158" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.158" starttime="20210313 17:07:13.155"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.158" starttime="20210313 17:07:13.154"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.162" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.162" starttime="20210313 17:07:13.160"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.162" starttime="20210313 17:07:13.159"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.165" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.166" starttime="20210313 17:07:13.164"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.166" starttime="20210313 17:07:13.163"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.168" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.169" starttime="20210313 17:07:13.167"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.169" starttime="20210313 17:07:13.167"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:13.172" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.172" starttime="20210313 17:07:13.171"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.172" starttime="20210313 17:07:13.170"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:13.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.175" starttime="20210313 17:07:13.173"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.175" starttime="20210313 17:07:13.173"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:13.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.178" starttime="20210313 17:07:13.176"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.178" starttime="20210313 17:07:13.175"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<msg timestamp="20210313 17:07:13.180" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.181" starttime="20210313 17:07:13.179"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.181" starttime="20210313 17:07:13.178"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:13.184" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.184" starttime="20210313 17:07:13.183"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.184" starttime="20210313 17:07:13.182"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:13.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.187" starttime="20210313 17:07:13.185"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.187" starttime="20210313 17:07:13.185"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.189" starttime="20210313 17:07:13.188"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.189" starttime="20210313 17:07:13.187"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:13.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.192" starttime="20210313 17:07:13.191"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.192" starttime="20210313 17:07:13.190"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.193" starttime="20210313 17:07:12.181"></status>
</kw>
<msg timestamp="20210313 17:07:13.193" level="INFO">${creation_tuid} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<msg timestamp="20210313 17:07:13.194" level="INFO">${modification_tuid} = 61eea3b0-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:13.194" starttime="20210313 17:07:12.180"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_root_folder_timestamp</arg>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="ValidateCassandra_messages_by_root_folder_timestamp" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.198" starttime="20210313 17:07:13.197"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_root_folder_timestamp where userid='${userId}' and rootfolderkey='${rootfolderkey}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:13.911" level="INFO">SELECT json * from messages_by_root_folder_timestamp wh ere userid='4feb706c-8458-11eb-b7ec-005056ae42da' and rootfolderkey='fb830d1d-a4 a5-4f58-a3ad-740be2fd2fc6' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6742a1b2b f;</msg>
<status status="PASS" endtime="20210313 17:07:13.912" starttime="20210313 17:07:13.199"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:13.946" level="INFO">[json]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "imdn_disposition_data": null, "modification_tuid": "61eea3b0-8458-11eb-83b6-5d6742a1b2bf", "recent": 0, "saved": null, "seen": 1}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:13.946" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:13.947" starttime="20210313 17:07:13.914"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:13.949" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:13.949" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "fol...</msg>
<status status="PASS" endtime="20210313 17:07:13.949" starttime="20210313 17:07:13.947"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mbrft_data}</var>
</assign>
<msg timestamp="20210313 17:07:13.952" level="INFO">${mbrft_data} = {u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'...</msg>
<status status="PASS" endtime="20210313 17:07:13.953" starttime="20210313 17:07:13.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mbrft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.955" level="INFO">{u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'61eea3b0-8458-11eb-83b6-5d6742a1b2bf', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'seen': 1, u'saved': None, u'recent': 0}</msg>
<status status="PASS" endtime="20210313 17:07:13.955" starttime="20210313 17:07:13.953"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.959" starttime="20210313 17:07:13.957"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.959" starttime="20210313 17:07:13.956"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:13.964" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.964" starttime="20210313 17:07:13.961"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.965" starttime="20210313 17:07:13.960"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:13.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.968" starttime="20210313 17:07:13.967"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.968" starttime="20210313 17:07:13.966"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:13.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.970" starttime="20210313 17:07:13.969"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.971" starttime="20210313 17:07:13.968"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:13.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.973" starttime="20210313 17:07:13.972"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.973" starttime="20210313 17:07:13.971"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:13.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:13.976" starttime="20210313 17:07:13.974"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.976" starttime="20210313 17:07:13.974"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.979" starttime="20210313 17:07:13.977"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.979" starttime="20210313 17:07:13.976"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.982" starttime="20210313 17:07:13.981"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.982" starttime="20210313 17:07:13.980"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.983" starttime="20210313 17:07:13.195"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:13.983" starttime="20210313 17:07:13.194"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraIMDNMapping</arg>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="ValidateCassandraIMDNMapping" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${SUBSCRIBER_ID}_${imdn_msg_id}</arg>
</arguments>
<assign>
<var>${imdncorrelator}</var>
</assign>
<msg timestamp="20210313 17:07:13.992" level="INFO">${imdncorrelator} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:07:13.992" starttime="20210313 17:07:13.990"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:13.993" starttime="20210313 17:07:13.992"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from imdnmsgidmapping where userid='${userId}' and creation_tuid=${uid} LIMIT 1 ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:07:14.663" level="INFO">select json * from imdnmsgidmapping where userid='4feb7 06c-8458-11eb-b7ec-005056ae42da' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d674 2a1b2bf LIMIT 1 ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:07:14.664" starttime="20210313 17:07:13.994"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:07:14.693" level="INFO">[json]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "foldername": "RCSMessageStore/Chat/8888888880/", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "uid": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:14.694" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:14.694" starttime="20210313 17:07:14.664"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.698" starttime="20210313 17:07:14.697"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.698" starttime="20210313 17:07:14.695"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${cnt} == 0</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.700" starttime="20210313 17:07:14.700"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:07:14.702" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:07:14.703" starttime="20210313 17:07:14.701"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:07:14.704" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:14.705" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folder...</msg>
<status status="PASS" endtime="20210313 17:07:14.705" starttime="20210313 17:07:14.703"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${imdn_mapping}</var>
</assign>
<msg timestamp="20210313 17:07:14.707" level="INFO">${imdn_mapping} = {u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830...</msg>
<status status="PASS" endtime="20210313 17:07:14.707" starttime="20210313 17:07:14.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${imdn_mapping}</arg>
</arguments>
<msg timestamp="20210313 17:07:14.708" level="INFO">{u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'imdncorrelator': u'8888888880_37857c02-005f-9b17-9322-b8423992923a', u'cosid': u'10'}</msg>
<status status="PASS" endtime="20210313 17:07:14.708" starttime="20210313 17:07:14.707"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.711" starttime="20210313 17:07:14.710"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.711" starttime="20210313 17:07:14.709"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.713" starttime="20210313 17:07:14.712"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.714" starttime="20210313 17:07:14.711"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:14.716" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:14.716" starttime="20210313 17:07:14.715"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.716" starttime="20210313 17:07:14.714"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.720" starttime="20210313 17:07:14.718"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.720" starttime="20210313 17:07:14.717"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<msg timestamp="20210313 17:07:14.722" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:14.723" starttime="20210313 17:07:14.721"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.723" starttime="20210313 17:07:14.720"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.726" starttime="20210313 17:07:14.724"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.726" starttime="20210313 17:07:14.723"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.728" starttime="20210313 17:07:14.727"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.728" starttime="20210313 17:07:14.726"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.729" starttime="20210313 17:07:13.986"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.729" starttime="20210313 17:07:13.984"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<msg timestamp="20210313 17:07:14.733" level="FAIL">PNS notification verification failed 
Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:07:14.733" starttime="20210313 17:07:14.732"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:14.733" starttime="20210313 17:07:14.731"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:14.734" starttime="20210313 17:07:14.730"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.738" starttime="20210313 17:07:14.737"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:14.739" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:14.798" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:14.798" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:14.798" starttime="20210313 17:07:14.738"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:14.803" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:14.803" starttime="20210313 17:07:14.799"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:14.861" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:14.862" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:14.862" starttime="20210313 17:07:14.804"></status>
</kw>
<msg timestamp="20210313 17:07:14.863" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:14.863" starttime="20210313 17:07:14.736"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.867" starttime="20210313 17:07:14.866"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:14.868" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:14.950" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:14.951" starttime="20210313 17:07:14.868"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:14.952" starttime="20210313 17:07:14.864"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:14.954" starttime="20210313 17:07:14.954"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:14.956" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:15.074" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:15.075" starttime="20210313 17:07:14.955"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:15.077" level="INFO">18705 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:15.078" starttime="20210313 17:07:15.075"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:15.136" level="INFO">37452 packets received by filter
262 packets dropped by kernel
date
Sun Mar 14 00:01:14 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Display_PM_Message"/"Display_PM_Message".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Display_PM_Message"/"Display_PM_Message".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.137" starttime="20210313 17:07:15.078"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.137" starttime="20210313 17:07:14.952"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.141" starttime="20210313 17:07:15.139"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.141" starttime="20210313 17:07:15.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.143" starttime="20210313 17:07:15.142"></status>
</kw>
<msg timestamp="20210313 17:07:15.144" level="INFO">${status} = ('PASS', None)</msg>
<status status="PASS" endtime="20210313 17:07:15.144" starttime="20210313 17:07:15.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<kw name="CloseRequest" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<kw name="Close Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.149" starttime="20210313 17:07:15.147"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.149" starttime="20210313 17:07:15.146"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.149" starttime="20210313 17:07:15.144"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.150" starttime="20210313 17:07:14.734"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="FAIL" endtime="20210313 17:07:15.150" critical="yes" starttime="20210313 17:07:08.732">PNS notification verification failed 
Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</status>
</test>
<test id="s1-t8" name="FolderSearchAfterIMDNArchival">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.159" starttime="20210313 17:07:15.156"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:15.161" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:15.219" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:15.220" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:15.221" starttime="20210313 17:07:15.160"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:15.266" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:15.266" starttime="20210313 17:07:15.221"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:15.285" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:15.286" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.286" starttime="20210313 17:07:15.267"></status>
</kw>
<msg timestamp="20210313 17:07:15.286" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:15.287" starttime="20210313 17:07:15.155"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:15.288" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:15.289" starttime="20210313 17:07:15.287"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.293" starttime="20210313 17:07:15.292"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:15.295" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:15.354" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:15.355" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:15.355" starttime="20210313 17:07:15.294"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:15.357" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:15.490" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:15.491" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:15.491" starttime="20210313 17:07:15.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:15.492" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:15.493" starttime="20210313 17:07:15.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:15.494" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:15.494" starttime="20210313 17:07:15.493"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:15.496" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:15.496" starttime="20210313 17:07:15.495"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:15.498" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:15.498" starttime="20210313 17:07:15.497"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:15.529" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:15.530" starttime="20210313 17:07:15.499"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:15.567" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.567" starttime="20210313 17:07:15.530"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:15.574" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:15.575" starttime="20210313 17:07:15.568"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:15.594" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.595" starttime="20210313 17:07:15.575"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.595" starttime="20210313 17:07:15.289"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:15.599" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:15.600" starttime="20210313 17:07:15.598"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.601" starttime="20210313 17:07:15.600"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:15.602" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:15.677" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:15.678" starttime="20210313 17:07:15.602"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:15.724" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterIMDNArchival"</msg>
<status status="PASS" endtime="20210313 17:07:15.724" starttime="20210313 17:07:15.679"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:15.740" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.741" starttime="20210313 17:07:15.725"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:15.755" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterIMDNArchival"/"FolderSearchAfterIMDNAr chival".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:15.755" starttime="20210313 17:07:15.741"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:15.769" level="INFO">[1] 4660
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.770" starttime="20210313 17:07:15.756"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.770" starttime="20210313 17:07:15.596"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:15.774" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:15.774" starttime="20210313 17:07:15.773"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.775" starttime="20210313 17:07:15.774"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:15.776" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:15.873" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:15.874" starttime="20210313 17:07:15.776"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:15.928" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterIMDNArchival"</msg>
<status status="PASS" endtime="20210313 17:07:15.929" starttime="20210313 17:07:15.874"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:15.945" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.945" starttime="20210313 17:07:15.935"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:15.969" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"FolderSearchAfterIMDNArchival"/"FolderSearchAfterIMDNArchival".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:15.970" starttime="20210313 17:07:15.946"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:15.975" level="INFO">[2] 4687
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:15.975" starttime="20210313 17:07:15.970"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.976" starttime="20210313 17:07:15.771"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:15.976" starttime="20210313 17:07:15.154"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Folder search after seeing the message"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:15.978" starttime="20210313 17:07:15.977"></status>
</kw>
<kw name="FolderSearch" library="mStore_Digits_TMO_resources">
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>http://${server_root_path}${oem_host}${userId}/folders/${folderkey}</arg>
</arguments>
<assign>
<var>${FOLDER_SEARCH_RESOURCE_URL}</var>
</assign>
<msg timestamp="20210313 17:07:15.983" level="INFO">${FOLDER_SEARCH_RESOURCE_URL} = http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:07:15.983" starttime="20210313 17:07:15.982"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${obj_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:15.985" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:07:15.986" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"${FOLDER_SEARCH_RESOURCE_URL}"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
    ...</msg>
<status status="PASS" endtime="20210313 17:07:15.986" starttime="20210313 17:07:15.984"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:15.988" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"...</msg>
<status status="PASS" endtime="20210313 17:07:15.988" starttime="20210313 17:07:15.987"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${oem_host}${userId}/objects/operations/search</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:15.989" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search</msg>
<status status="PASS" endtime="20210313 17:07:15.989" starttime="20210313 17:07:15.988"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:17.289" level="INFO">Post Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search, data={
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
       "order": "Ascending"
       }
      ]
   }
  }
}

, headers={'Content-Type': 'application/json;', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:17.290" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.290" starttime="20210313 17:07:15.990"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:17.293" level="INFO">${response_status_code} = 200</msg>
<status status="PASS" endtime="20210313 17:07:17.293" starttime="20210313 17:07:17.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.295" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:07:17.295" starttime="20210313 17:07:17.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.297" level="INFO">{"objectList":{"object":[{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","attributes":{"attribute":[{"name":"Charset","value":["UTF-8"]},{"name":"Content-Transfer-Encoding","value":["quoted-printable"]},{"name":"Contribution-ID","value":["e0a1029e-a48b-4ca6-b185-299dada439be"]},{"name":"Conversation-ID","value":["2dbc584e-fc46-4a37-9a56-c2b93246d788"]},{"name":"date","value":["2021-03-13T17:06:25Z"]},{"name":"Direction","value":["In"]},{"name":"from","value":["tel:+9999999990"]},{"name":"IMDN-Message-ID","value":["37857c02-005f-9b17-9322-b8423992923a"]},{"name":"message-context","value":["X-RCS-PM"]},{"name":"P-Asserted-Service","value":["urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"]},{"name":"textcontent","value":["This is the new message we are depositing to test $@#^&amp;*!0123456789"]},{"name":"to","value":["tel:+8888888880"]}]},"flags":{"flag":["\\Seen","\\Delivered"],"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags"},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","path":"/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a"}]}}</msg>
<status status="PASS" endtime="20210313 17:07:17.297" starttime="20210313 17:07:17.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.301" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:16 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:kGSqQY7iZyp2plBjGZcsZjsZhWKPAxjj-slot:1-instId:2-subOid:25-time:2021-03-14T00:01:16Z-localFqdn:10.10.219.141', 'content-length': '1510', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:17.302" starttime="20210313 17:07:17.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>${response_code}</arg>
<arg>msg="folder search is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.304" starttime="20210313 17:07:17.303"></status>
</kw>
<msg timestamp="20210313 17:07:17.305" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.305" starttime="20210313 17:07:15.979"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateChatFolderSearchResponse</arg>
<arg>direction=${DIRECTION}</arg>
<arg>response=${response}</arg>
<arg>msgStatus=seen</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="ValidateChatFolderSearchResponse" library="mStore_Digits_TMO_resources">
<arguments>
<arg>direction=${DIRECTION}</arg>
<arg>response=${response}</arg>
<arg>msgStatus=seen</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Create List</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>Copy List</arg>
<arg>${to_msg}</arg>
</arguments>
<assign>
<var>${to}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${to_msg}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.314" starttime="20210313 17:07:17.313"></status>
</kw>
<msg timestamp="20210313 17:07:17.314" level="INFO">${to} = ['tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:17.314" starttime="20210313 17:07:17.311"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:17.315" level="INFO">${status_msg} = [u'seen']</msg>
<status status="PASS" endtime="20210313 17:07:17.315" starttime="20210313 17:07:17.314"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:17.316" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:07:17.317" level="INFO">${len_msg_status} = 1</msg>
<status status="PASS" endtime="20210313 17:07:17.317" starttime="20210313 17:07:17.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${UID}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.318" level="INFO">51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:17.318" starttime="20210313 17:07:17.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.320" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:16 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:kGSqQY7iZyp2plBjGZcsZjsZhWKPAxjj-slot:1-instId:2-subOid:25-time:2021-03-14T00:01:16Z-localFqdn:10.10.219.141', 'content-length': '1510', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:17.320" starttime="20210313 17:07:17.319"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:17.322" level="INFO">${data} = {u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5...</msg>
<status status="PASS" endtime="20210313 17:07:17.323" starttime="20210313 17:07:17.321"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.324" level="INFO">{u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'flags': {u'flag': [u'\\Seen', u'\\Delivered'], u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags'}, u'path': u'/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'attributes': {u'attribute': [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}, {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}, {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}, {u'name': u'Direction', u'value': [u'In']}, {u'name': u'from', u'value': [u'tel:+9999999990']}, {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}, {u'name': u'message-context', u'value': [u'X-RCS-PM']}, {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}, {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}, {u'name': u'to', u'value': [u'tel:+8888888880']}]}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}]}}</msg>
<status status="PASS" endtime="20210313 17:07:17.324" starttime="20210313 17:07:17.323"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data['objectList']['object']}</arg>
</arguments>
<assign>
<var>${list_of_objects}</var>
</assign>
<msg timestamp="20210313 17:07:17.326" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:07:17.326" level="INFO">${list_of_objects} = 1</msg>
<status status="PASS" endtime="20210313 17:07:17.326" starttime="20210313 17:07:17.325"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.331" starttime="20210313 17:07:17.329"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.331" starttime="20210313 17:07:17.327"></status>
</kw>
<kw type="for" name="${index} IN RANGE [ 0 | ${list_of_objects} ]">
<kw type="foritem" name="${index} = 0">
<kw name="Get_FolderSearch_AttributesPair" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${data['objectList']['object'][${index}]['attributes']['attribute']}</arg>
</arguments>
<assign>
<var>${Attributes_pair}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${attributes}</var>
</assign>
<msg timestamp="20210313 17:07:17.338" level="INFO">${attributes} = [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be'...</msg>
<status status="PASS" endtime="20210313 17:07:17.338" starttime="20210313 17:07:17.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${Attributes_pair}</var>
</assign>
<msg timestamp="20210313 17:07:17.340" level="INFO">${Attributes_pair} = {}</msg>
<status status="PASS" endtime="20210313 17:07:17.340" starttime="20210313 17:07:17.339"></status>
</kw>
<kw type="for" name="${pair} IN [ @{attributes} ]">
<kw type="foritem" name="${pair} = {u'name': u'Charset', u'value': [u'UTF-8']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.342" level="INFO">Charset</msg>
<status status="PASS" endtime="20210313 17:07:17.343" starttime="20210313 17:07:17.341"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.345" level="INFO">[u'UTF-8']</msg>
<status status="PASS" endtime="20210313 17:07:17.345" starttime="20210313 17:07:17.343"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.348" starttime="20210313 17:07:17.346"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.348" starttime="20210313 17:07:17.341"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.350" level="INFO">Content-Transfer-Encoding</msg>
<status status="PASS" endtime="20210313 17:07:17.351" starttime="20210313 17:07:17.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.353" level="INFO">[u'quoted-printable']</msg>
<status status="PASS" endtime="20210313 17:07:17.353" starttime="20210313 17:07:17.351"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.355" starttime="20210313 17:07:17.354"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.356" starttime="20210313 17:07:17.348"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.357" level="INFO">Contribution-ID</msg>
<status status="PASS" endtime="20210313 17:07:17.357" starttime="20210313 17:07:17.356"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.358" level="INFO">[u'e0a1029e-a48b-4ca6-b185-299dada439be']</msg>
<status status="PASS" endtime="20210313 17:07:17.359" starttime="20210313 17:07:17.358"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.361" starttime="20210313 17:07:17.359"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.361" starttime="20210313 17:07:17.356"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.363" level="INFO">Conversation-ID</msg>
<status status="PASS" endtime="20210313 17:07:17.363" starttime="20210313 17:07:17.362"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.364" level="INFO">[u'2dbc584e-fc46-4a37-9a56-c2b93246d788']</msg>
<status status="PASS" endtime="20210313 17:07:17.365" starttime="20210313 17:07:17.364"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.367" starttime="20210313 17:07:17.365"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.367" starttime="20210313 17:07:17.362"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.368" level="INFO">date</msg>
<status status="PASS" endtime="20210313 17:07:17.369" starttime="20210313 17:07:17.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.370" level="INFO">[u'2021-03-13T17:06:25Z']</msg>
<status status="PASS" endtime="20210313 17:07:17.371" starttime="20210313 17:07:17.369"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.372" starttime="20210313 17:07:17.371"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.373" starttime="20210313 17:07:17.367"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Direction', u'value': [u'In']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.374" level="INFO">Direction</msg>
<status status="PASS" endtime="20210313 17:07:17.374" starttime="20210313 17:07:17.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.375" level="INFO">[u'In']</msg>
<status status="PASS" endtime="20210313 17:07:17.376" starttime="20210313 17:07:17.375"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.378" starttime="20210313 17:07:17.376"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.378" starttime="20210313 17:07:17.373"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'from', u'value': [u'tel:+9999999990']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.379" level="INFO">from</msg>
<status status="PASS" endtime="20210313 17:07:17.379" starttime="20210313 17:07:17.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.380" level="INFO">[u'tel:+9999999990']</msg>
<status status="PASS" endtime="20210313 17:07:17.381" starttime="20210313 17:07:17.380"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.384" starttime="20210313 17:07:17.381"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.385" starttime="20210313 17:07:17.378"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.386" level="INFO">IMDN-Message-ID</msg>
<status status="PASS" endtime="20210313 17:07:17.387" starttime="20210313 17:07:17.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.389" level="INFO">[u'37857c02-005f-9b17-9322-b8423992923a']</msg>
<status status="PASS" endtime="20210313 17:07:17.389" starttime="20210313 17:07:17.387"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.391" starttime="20210313 17:07:17.390"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.392" starttime="20210313 17:07:17.385"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'message-context', u'value': [u'X-RCS-PM']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.394" level="INFO">message-context</msg>
<status status="PASS" endtime="20210313 17:07:17.394" starttime="20210313 17:07:17.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.396" level="INFO">[u'X-RCS-PM']</msg>
<status status="PASS" endtime="20210313 17:07:17.397" starttime="20210313 17:07:17.395"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.399" starttime="20210313 17:07:17.397"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.399" starttime="20210313 17:07:17.392"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.401" level="INFO">P-Asserted-Service</msg>
<status status="PASS" endtime="20210313 17:07:17.401" starttime="20210313 17:07:17.400"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.403" level="INFO">[u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']</msg>
<status status="PASS" endtime="20210313 17:07:17.403" starttime="20210313 17:07:17.402"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.405" starttime="20210313 17:07:17.403"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.405" starttime="20210313 17:07:17.399"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.407" level="INFO">textcontent</msg>
<status status="PASS" endtime="20210313 17:07:17.408" starttime="20210313 17:07:17.407"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.409" level="INFO">[u'This is the new message we are depositing to test $@#^&amp;*!0123456789']</msg>
<status status="PASS" endtime="20210313 17:07:17.410" starttime="20210313 17:07:17.408"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.412" starttime="20210313 17:07:17.410"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.412" starttime="20210313 17:07:17.405"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'to', u'value': [u'tel:+8888888880']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.414" level="INFO">to</msg>
<status status="PASS" endtime="20210313 17:07:17.414" starttime="20210313 17:07:17.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.416" level="INFO">[u'tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:17.417" starttime="20210313 17:07:17.415"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.419" starttime="20210313 17:07:17.417"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.419" starttime="20210313 17:07:17.413"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.419" starttime="20210313 17:07:17.340"></status>
</kw>
<msg timestamp="20210313 17:07:17.420" level="INFO">${Attributes_pair} = {u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788...</msg>
<status status="PASS" endtime="20210313 17:07:17.420" starttime="20210313 17:07:17.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.422" level="INFO">{u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788'], u'date': [u'2021-03-13T17:06:25Z'], u'Direction': [u'In'], u'from': [u'tel:+9999999990'], u'IMDN-Message-ID': [u'37857c02-005f-9b17-9322-b8423992923a'], u'message-context': [u'X-RCS-PM'], u'P-Asserted-Service': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg'], u'textcontent': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789'], u'to': [u'tel:+8888888880']}</msg>
<status status="PASS" endtime="20210313 17:07:17.423" starttime="20210313 17:07:17.421"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${obj_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:17.425" level="INFO">${obj_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:17.426" starttime="20210313 17:07:17.424"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey1}%3d%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_resourceURL}</var>
</assign>
<msg timestamp="20210313 17:07:17.428" level="INFO">${obj_resourceURL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:17.428" starttime="20210313 17:07:17.426"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/${RCS_PARENT_PATH}/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_Folderpath}</var>
</assign>
<msg timestamp="20210313 17:07:17.430" level="INFO">${obj_Folderpath} = /RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:17.431" starttime="20210313 17:07:17.429"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.434" starttime="20210313 17:07:17.433"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.434" starttime="20210313 17:07:17.431"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.438" starttime="20210313 17:07:17.436"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.438" starttime="20210313 17:07:17.435"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.442" starttime="20210313 17:07:17.440"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.442" starttime="20210313 17:07:17.439"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.446" starttime="20210313 17:07:17.444"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.446" starttime="20210313 17:07:17.443"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.544" starttime="20210313 17:07:17.449"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.544" starttime="20210313 17:07:17.447"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.547" starttime="20210313 17:07:17.546"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.548" starttime="20210313 17:07:17.545"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.551" starttime="20210313 17:07:17.549"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.551" starttime="20210313 17:07:17.548"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.554" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.554" starttime="20210313 17:07:17.553"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.554" starttime="20210313 17:07:17.552"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.557" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.557" starttime="20210313 17:07:17.556"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.557" starttime="20210313 17:07:17.555"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.560" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.560" starttime="20210313 17:07:17.559"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.560" starttime="20210313 17:07:17.558"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.563" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.563" starttime="20210313 17:07:17.562"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.563" starttime="20210313 17:07:17.561"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.566" starttime="20210313 17:07:17.565"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.566" starttime="20210313 17:07:17.564"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.568" starttime="20210313 17:07:17.567"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.569" starttime="20210313 17:07:17.566"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.571" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.571" starttime="20210313 17:07:17.570"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.571" starttime="20210313 17:07:17.569"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.573" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.574" starttime="20210313 17:07:17.572"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.574" starttime="20210313 17:07:17.572"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.577" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.577" starttime="20210313 17:07:17.575"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.577" starttime="20210313 17:07:17.574"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.580" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.580" starttime="20210313 17:07:17.579"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.580" starttime="20210313 17:07:17.578"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.584" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:17.585" starttime="20210313 17:07:17.584"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.585" starttime="20210313 17:07:17.582"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.585" starttime="20210313 17:07:17.581"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.589" starttime="20210313 17:07:17.588"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.589" starttime="20210313 17:07:17.587"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.590" starttime="20210313 17:07:17.586"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:17.591" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:17.591" starttime="20210313 17:07:17.590"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:17.592" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:17.593" starttime="20210313 17:07:17.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${delivered_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:17.594" level="INFO">${delivered_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:17.595" starttime="20210313 17:07:17.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${read_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${read_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:17.596" level="INFO">${read_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:17.596" starttime="20210313 17:07:17.595"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.597" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:17.597" starttime="20210313 17:07:17.596"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.598" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:17.599" starttime="20210313 17:07:17.598"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.600" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:17.600" starttime="20210313 17:07:17.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.601" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:17.601" starttime="20210313 17:07:17.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.602" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:17.602" starttime="20210313 17:07:17.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:17.603" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:17.604" starttime="20210313 17:07:17.603"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.606" starttime="20210313 17:07:17.605"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.607" starttime="20210313 17:07:17.604"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.610" starttime="20210313 17:07:17.608"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.610" starttime="20210313 17:07:17.607"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.613" starttime="20210313 17:07:17.612"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.613" starttime="20210313 17:07:17.611"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.614" starttime="20210313 17:07:17.333"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.614" starttime="20210313 17:07:17.332"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.614" starttime="20210313 17:07:17.307"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.614" starttime="20210313 17:07:17.306"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.618" starttime="20210313 17:07:17.617"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:17.619" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:17.690" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:17.691" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:17.691" starttime="20210313 17:07:17.619"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:17.696" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:17.697" starttime="20210313 17:07:17.692"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:17.746" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:17.747" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:17.747" starttime="20210313 17:07:17.697"></status>
</kw>
<msg timestamp="20210313 17:07:17.748" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:17.748" starttime="20210313 17:07:17.616"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.750" starttime="20210313 17:07:17.750"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:17.751" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:17.829" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:17.830" starttime="20210313 17:07:17.751"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:17.830" starttime="20210313 17:07:17.748"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:17.832" starttime="20210313 17:07:17.832"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:17.833" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:17.985" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:17.986" starttime="20210313 17:07:17.833"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:17.989" level="INFO">5961 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:17.989" starttime="20210313 17:07:17.986"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:18.046" level="INFO">12076 packets received by filter
298 packets dropped by kernel
date
Sun Mar 14 00:01:17 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterIMDNArchival"/"FolderSearchAfterIMDNArchival".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterIMDNArchival"/"FolderSearchAfterIMDNArchival".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.046" starttime="20210313 17:07:17.990"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:18.047" starttime="20210313 17:07:17.831"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:18.051" starttime="20210313 17:07:18.050"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:18.051" starttime="20210313 17:07:18.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:18.082" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:07:18.082" starttime="20210313 17:07:18.053"></status>
</kw>
<msg timestamp="20210313 17:07:18.082" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:07:18.082" starttime="20210313 17:07:18.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:18.085" starttime="20210313 17:07:18.083"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:18.086" starttime="20210313 17:07:17.615"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:18.086" critical="yes" starttime="20210313 17:07:15.152"></status>
</test>
<test id="s1-t9" name="Fetch_PM_Message">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:18.094" starttime="20210313 17:07:18.093"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:18.095" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:18.153" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:18.154" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:18.154" starttime="20210313 17:07:18.094"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:18.194" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:18.195" starttime="20210313 17:07:18.155"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:18.212" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:18.213" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.213" starttime="20210313 17:07:18.195"></status>
</kw>
<msg timestamp="20210313 17:07:18.214" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:18.214" starttime="20210313 17:07:18.091"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:18.216" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:18.216" starttime="20210313 17:07:18.215"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:18.220" starttime="20210313 17:07:18.219"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:18.221" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:18.307" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:18.308" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:18.308" starttime="20210313 17:07:18.220"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:18.311" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:18.394" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:18.395" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:18.395" starttime="20210313 17:07:18.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:18.397" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:18.398" starttime="20210313 17:07:18.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:18.399" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:18.399" starttime="20210313 17:07:18.398"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:18.401" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:18.402" starttime="20210313 17:07:18.400"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:18.403" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:18.404" starttime="20210313 17:07:18.402"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:18.434" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:18.434" starttime="20210313 17:07:18.404"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:18.451" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.451" starttime="20210313 17:07:18.435"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:18.462" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:18.463" starttime="20210313 17:07:18.452"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:18.478" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.478" starttime="20210313 17:07:18.463"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:18.479" starttime="20210313 17:07:18.217"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:18.483" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:18.483" starttime="20210313 17:07:18.481"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:18.484" starttime="20210313 17:07:18.483"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:18.485" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:18.566" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:18.566" starttime="20210313 17:07:18.485"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:18.615" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Fetch_P M_Message"</msg>
<status status="PASS" endtime="20210313 17:07:18.615" starttime="20210313 17:07:18.567"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:18.630" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.631" starttime="20210313 17:07:18.616"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:18.646" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Fetch_PM_Message"/"Fetch_PM_Message".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:18.646" starttime="20210313 17:07:18.631"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:18.655" level="INFO">[1] 4847
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.655" starttime="20210313 17:07:18.647"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:18.656" starttime="20210313 17:07:18.479"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:18.670" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:18.670" starttime="20210313 17:07:18.667"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:18.672" starttime="20210313 17:07:18.671"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:18.674" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:18.756" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:18.757" starttime="20210313 17:07:18.672"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:18.804" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Fetch_P M_Message"</msg>
<status status="PASS" endtime="20210313 17:07:18.804" starttime="20210313 17:07:18.758"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:18.821" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.822" starttime="20210313 17:07:18.805"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:18.838" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Fetch_PM_Message"/"Fetch_PM_Message".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:18.839" starttime="20210313 17:07:18.823"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:18.850" level="INFO">[2] 4875
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:18.850" starttime="20210313 17:07:18.840"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:18.851" starttime="20210313 17:07:18.656"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:18.851" starttime="20210313 17:07:18.090"></status>
</kw>
<kw name="FetchMessageObject" library="mStore_Digits_TMO_resources">
<arguments>
<arg>ResourceURI=${OBJECT_URL}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${ResourceURI}</arg>
<arg>https://${service_root_path}/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:18.858" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:18.858" starttime="20210313 17:07:18.855"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:19.905" level="INFO">Get Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf, headers={'User-Agent': ''} json=None</msg>
<msg timestamp="20210313 17:07:19.905" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:19.906" starttime="20210313 17:07:18.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.907" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:07:19.908" starttime="20210313 17:07:19.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.911" level="INFO">{"object":{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","attributes":{"attribute":[{"name":"Charset","value":["UTF-8"]},{"name":"Content-Transfer-Encoding","value":["quoted-printable"]},{"name":"Contribution-ID","value":["e0a1029e-a48b-4ca6-b185-299dada439be"]},{"name":"Conversation-ID","value":["2dbc584e-fc46-4a37-9a56-c2b93246d788"]},{"name":"date","value":["2021-03-13T17:06:25Z"]},{"name":"Direction","value":["In"]},{"name":"from","value":["tel:+9999999990"]},{"name":"IMDN-Message-ID","value":["37857c02-005f-9b17-9322-b8423992923a"]},{"name":"message-context","value":["X-RCS-PM"]},{"name":"P-Asserted-Service","value":["urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"]},{"name":"textcontent","value":["This is the new message we are depositing to test $@#^&amp;*!0123456789"]},{"name":"to","value":["tel:+8888888880"]}]},"flags":{"flag":["\\Seen","\\Delivered"],"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags"},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","path":"/RCSMessageStore/Chat/8888888880//UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a"}}</msg>
<status status="PASS" endtime="20210313 17:07:19.911" starttime="20210313 17:07:19.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.913" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:18 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:otxwmRGharikYCNk2v6v4uaMuxV6WqYF-slot:1-instId:1-subOid:26-time:2021-03-14T00:01:18Z-localFqdn:10.10.219.141', 'content-length': '1510', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:19.913" starttime="20210313 17:07:19.912"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:19.915" level="INFO">${response_status_code} = 200</msg>
<status status="PASS" endtime="20210313 17:07:19.915" starttime="20210313 17:07:19.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>200</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.916" starttime="20210313 17:07:19.915"></status>
</kw>
<msg timestamp="20210313 17:07:19.917" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:19.917" starttime="20210313 17:07:18.852"></status>
</kw>
<kw name="ValidateChatFetchResponse" library="mStore_Digits_TMO_resources">
<arguments>
<arg>response=${response}</arg>
<arg>msgStatus=seen,delivered</arg>
<arg>direction=${DIRECTION}</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Create List</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>Copy List</arg>
<arg>${to_msg}</arg>
</arguments>
<assign>
<var>${to}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${to_msg}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.925" starttime="20210313 17:07:19.924"></status>
</kw>
<msg timestamp="20210313 17:07:19.925" level="INFO">${to} = ['tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:19.926" starttime="20210313 17:07:19.923"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey1}%3d%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_resourceURL}</var>
</assign>
<msg timestamp="20210313 17:07:19.928" level="INFO">${obj_resourceURL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:19.928" starttime="20210313 17:07:19.926"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_objectUrl}</var>
</assign>
<msg timestamp="20210313 17:07:19.930" level="INFO">${obj_objectUrl} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:19.931" starttime="20210313 17:07:19.929"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${obj_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:19.932" level="INFO">${obj_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:19.933" starttime="20210313 17:07:19.931"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/${folder_Path}/${FROM_MSISDN}//${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_Folderpath}</var>
</assign>
<msg timestamp="20210313 17:07:19.935" level="INFO">${obj_Folderpath} = /RCSMessageStore/Chat/8888888880//UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:19.935" starttime="20210313 17:07:19.933"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:19.937" level="INFO">${status_msg} = [u'seen', u'delivered']</msg>
<status status="PASS" endtime="20210313 17:07:19.937" starttime="20210313 17:07:19.936"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:19.939" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:07:19.939" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:07:19.939" starttime="20210313 17:07:19.938"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:19.942" level="INFO">${data} = {u'object': {u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'p...</msg>
<status status="PASS" endtime="20210313 17:07:19.942" starttime="20210313 17:07:19.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.943" level="INFO">{u'object': {u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'flags': {u'flag': [u'\\Seen', u'\\Delivered'], u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags'}, u'path': u'/RCSMessageStore/Chat/8888888880//UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'attributes': {u'attribute': [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}, {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}, {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}, {u'name': u'Direction', u'value': [u'In']}, {u'name': u'from', u'value': [u'tel:+9999999990']}, {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}, {u'name': u'message-context', u'value': [u'X-RCS-PM']}, {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}, {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}, {u'name': u'to', u'value': [u'tel:+8888888880']}]}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}}</msg>
<status status="PASS" endtime="20210313 17:07:19.944" starttime="20210313 17:07:19.942"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${data['object']['attributes']['attribute']}</arg>
</arguments>
<assign>
<var>${attributes}</var>
</assign>
<msg timestamp="20210313 17:07:19.946" level="INFO">${attributes} = [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be'...</msg>
<status status="PASS" endtime="20210313 17:07:19.946" starttime="20210313 17:07:19.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${Attributes_pair}</var>
</assign>
<msg timestamp="20210313 17:07:19.947" level="INFO">${Attributes_pair} = {}</msg>
<status status="PASS" endtime="20210313 17:07:19.947" starttime="20210313 17:07:19.946"></status>
</kw>
<kw type="for" name="${pair} IN [ @{attributes} ]">
<kw type="foritem" name="${pair} = {u'name': u'Charset', u'value': [u'UTF-8']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.950" level="INFO">Charset</msg>
<status status="PASS" endtime="20210313 17:07:19.950" starttime="20210313 17:07:19.949"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.952" level="INFO">[u'UTF-8']</msg>
<status status="PASS" endtime="20210313 17:07:19.952" starttime="20210313 17:07:19.951"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.955" starttime="20210313 17:07:19.953"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:19.955" starttime="20210313 17:07:19.948"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.957" level="INFO">Content-Transfer-Encoding</msg>
<status status="PASS" endtime="20210313 17:07:19.957" starttime="20210313 17:07:19.956"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.959" level="INFO">[u'quoted-printable']</msg>
<status status="PASS" endtime="20210313 17:07:19.960" starttime="20210313 17:07:19.958"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.963" starttime="20210313 17:07:19.960"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:19.963" starttime="20210313 17:07:19.955"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.966" level="INFO">Contribution-ID</msg>
<status status="PASS" endtime="20210313 17:07:19.966" starttime="20210313 17:07:19.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.967" level="INFO">[u'e0a1029e-a48b-4ca6-b185-299dada439be']</msg>
<status status="PASS" endtime="20210313 17:07:19.967" starttime="20210313 17:07:19.966"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.969" starttime="20210313 17:07:19.968"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:19.969" starttime="20210313 17:07:19.964"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.974" level="INFO">Conversation-ID</msg>
<status status="PASS" endtime="20210313 17:07:19.974" starttime="20210313 17:07:19.973"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.976" level="INFO">[u'2dbc584e-fc46-4a37-9a56-c2b93246d788']</msg>
<status status="PASS" endtime="20210313 17:07:19.976" starttime="20210313 17:07:19.975"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.978" starttime="20210313 17:07:19.976"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:19.978" starttime="20210313 17:07:19.970"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.980" level="INFO">date</msg>
<status status="PASS" endtime="20210313 17:07:19.981" starttime="20210313 17:07:19.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.983" level="INFO">[u'2021-03-13T17:06:25Z']</msg>
<status status="PASS" endtime="20210313 17:07:19.983" starttime="20210313 17:07:19.982"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.986" starttime="20210313 17:07:19.984"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:19.986" starttime="20210313 17:07:19.979"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Direction', u'value': [u'In']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.988" level="INFO">Direction</msg>
<status status="PASS" endtime="20210313 17:07:19.988" starttime="20210313 17:07:19.987"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.991" level="INFO">[u'In']</msg>
<status status="PASS" endtime="20210313 17:07:19.991" starttime="20210313 17:07:19.989"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:19.994" starttime="20210313 17:07:19.992"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:19.994" starttime="20210313 17:07:19.986"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'from', u'value': [u'tel:+9999999990']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.997" level="INFO">from</msg>
<status status="PASS" endtime="20210313 17:07:19.997" starttime="20210313 17:07:19.995"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:19.999" level="INFO">[u'tel:+9999999990']</msg>
<status status="PASS" endtime="20210313 17:07:19.999" starttime="20210313 17:07:19.998"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.002" starttime="20210313 17:07:19.999"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.002" starttime="20210313 17:07:19.994"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.004" level="INFO">IMDN-Message-ID</msg>
<status status="PASS" endtime="20210313 17:07:20.004" starttime="20210313 17:07:20.003"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.006" level="INFO">[u'37857c02-005f-9b17-9322-b8423992923a']</msg>
<status status="PASS" endtime="20210313 17:07:20.006" starttime="20210313 17:07:20.005"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.008" starttime="20210313 17:07:20.007"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.008" starttime="20210313 17:07:20.003"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'message-context', u'value': [u'X-RCS-PM']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.010" level="INFO">message-context</msg>
<status status="PASS" endtime="20210313 17:07:20.010" starttime="20210313 17:07:20.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.012" level="INFO">[u'X-RCS-PM']</msg>
<status status="PASS" endtime="20210313 17:07:20.012" starttime="20210313 17:07:20.011"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.014" starttime="20210313 17:07:20.012"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.014" starttime="20210313 17:07:20.009"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.016" level="INFO">P-Asserted-Service</msg>
<status status="PASS" endtime="20210313 17:07:20.016" starttime="20210313 17:07:20.015"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.018" level="INFO">[u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']</msg>
<status status="PASS" endtime="20210313 17:07:20.018" starttime="20210313 17:07:20.017"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.020" starttime="20210313 17:07:20.018"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.020" starttime="20210313 17:07:20.014"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.021" level="INFO">textcontent</msg>
<status status="PASS" endtime="20210313 17:07:20.021" starttime="20210313 17:07:20.020"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.023" level="INFO">[u'This is the new message we are depositing to test $@#^&amp;*!0123456789']</msg>
<status status="PASS" endtime="20210313 17:07:20.023" starttime="20210313 17:07:20.022"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.025" starttime="20210313 17:07:20.023"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.025" starttime="20210313 17:07:20.020"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'to', u'value': [u'tel:+8888888880']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.027" level="INFO">to</msg>
<status status="PASS" endtime="20210313 17:07:20.027" starttime="20210313 17:07:20.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.028" level="INFO">[u'tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:20.029" starttime="20210313 17:07:20.028"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.031" starttime="20210313 17:07:20.029"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.031" starttime="20210313 17:07:20.026"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.031" starttime="20210313 17:07:19.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.033" level="INFO">{u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788'], u'date': [u'2021-03-13T17:06:25Z'], u'Direction': [u'In'], u'from': [u'tel:+9999999990'], u'IMDN-Message-ID': [u'37857c02-005f-9b17-9322-b8423992923a'], u'message-context': [u'X-RCS-PM'], u'P-Asserted-Service': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg'], u'textcontent': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789'], u'to': [u'tel:+8888888880']}</msg>
<status status="PASS" endtime="20210313 17:07:20.033" starttime="20210313 17:07:20.032"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['object']['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['object']['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.035" starttime="20210313 17:07:20.034"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.036" starttime="20210313 17:07:20.033"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['object']['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['object']['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.038" starttime="20210313 17:07:20.037"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.038" starttime="20210313 17:07:20.036"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['object']['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['object']['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.041" starttime="20210313 17:07:20.040"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.041" starttime="20210313 17:07:20.039"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['object']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['object']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.044" starttime="20210313 17:07:20.043"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.044" starttime="20210313 17:07:20.042"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['object']['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['object']['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.047" starttime="20210313 17:07:20.046"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.048" starttime="20210313 17:07:20.045"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['object']['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['object']['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['object']['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.053" starttime="20210313 17:07:20.050"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.053" starttime="20210313 17:07:20.049"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.054" starttime="20210313 17:07:20.048"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['object']['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['object']['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.056" starttime="20210313 17:07:20.055"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.057" starttime="20210313 17:07:20.054"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.059" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.060" starttime="20210313 17:07:20.058"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.060" starttime="20210313 17:07:20.057"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.063" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.063" starttime="20210313 17:07:20.062"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.063" starttime="20210313 17:07:20.061"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.067" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.067" starttime="20210313 17:07:20.066"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.067" starttime="20210313 17:07:20.064"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.070" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.070" starttime="20210313 17:07:20.069"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.070" starttime="20210313 17:07:20.068"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.074" starttime="20210313 17:07:20.072"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.074" starttime="20210313 17:07:20.071"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.077" starttime="20210313 17:07:20.075"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.077" starttime="20210313 17:07:20.075"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${From}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${From}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.080" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.080" starttime="20210313 17:07:20.078"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.080" starttime="20210313 17:07:20.078"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${msg_context}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${msg_context}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.083" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.083" starttime="20210313 17:07:20.082"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.083" starttime="20210313 17:07:20.081"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.086" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.086" starttime="20210313 17:07:20.085"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.086" starttime="20210313 17:07:20.084"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.089" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.089" starttime="20210313 17:07:20.088"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.090" starttime="20210313 17:07:20.087"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.095" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:20.095" starttime="20210313 17:07:20.094"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.095" starttime="20210313 17:07:20.092"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.095" starttime="20210313 17:07:20.090"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.096" starttime="20210313 17:07:19.917"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.099" starttime="20210313 17:07:20.099"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:20.100" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:20.164" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:20.165" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:20.165" starttime="20210313 17:07:20.100"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:20.169" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:20.170" starttime="20210313 17:07:20.166"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:20.233" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:20.234" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:20.234" starttime="20210313 17:07:20.170"></status>
</kw>
<msg timestamp="20210313 17:07:20.235" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:20.235" starttime="20210313 17:07:20.097"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.238" starttime="20210313 17:07:20.237"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:20.240" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:20.319" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:20.319" starttime="20210313 17:07:20.238"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.320" starttime="20210313 17:07:20.235"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.322" starttime="20210313 17:07:20.322"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:20.324" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:20.478" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:20.478" starttime="20210313 17:07:20.323"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:20.482" level="INFO">4839 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:20.482" starttime="20210313 17:07:20.480"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:20.551" level="INFO">9948 packets received by filter
351 packets dropped by kernel
date
Sun Mar 14 00:01:19 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Fetch_PM_Message"/"Fetch_PM_Message".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Fetch_PM_Message"/"Fetch_PM_Message".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:20.552" starttime="20210313 17:07:20.483"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.552" starttime="20210313 17:07:20.320"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.555" starttime="20210313 17:07:20.554"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.555" starttime="20210313 17:07:20.553"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.582" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:07:20.583" starttime="20210313 17:07:20.556"></status>
</kw>
<msg timestamp="20210313 17:07:20.583" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:07:20.583" starttime="20210313 17:07:20.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.585" starttime="20210313 17:07:20.584"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:20.586" starttime="20210313 17:07:20.096"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:20.586" critical="yes" starttime="20210313 17:07:18.087"></status>
</test>
<test id="s1-t10" name="Update_Msg_from_Seen_to_Recent">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.592" starttime="20210313 17:07:20.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:20.594" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:20.662" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:20.663" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:20.663" starttime="20210313 17:07:20.593"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:20.705" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:20.705" starttime="20210313 17:07:20.663"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:20.729" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:20.730" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:20.731" starttime="20210313 17:07:20.706"></status>
</kw>
<msg timestamp="20210313 17:07:20.732" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:20.732" starttime="20210313 17:07:20.590"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.734" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:20.735" starttime="20210313 17:07:20.733"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:20.738" starttime="20210313 17:07:20.737"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:20.739" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:20.808" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:20.809" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:20.809" starttime="20210313 17:07:20.739"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:20.812" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:20.912" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:20.912" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:20.912" starttime="20210313 17:07:20.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.914" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:20.914" starttime="20210313 17:07:20.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:20.915" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:20.915" starttime="20210313 17:07:20.915"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:20.917" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:20.917" starttime="20210313 17:07:20.916"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:20.918" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:20.918" starttime="20210313 17:07:20.917"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:20.957" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:20.958" starttime="20210313 17:07:20.919"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:20.978" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:20.978" starttime="20210313 17:07:20.959"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:20.986" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:20.987" starttime="20210313 17:07:20.979"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:21.008" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:21.009" starttime="20210313 17:07:20.988"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:21.010" starttime="20210313 17:07:20.735"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:21.016" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:21.016" starttime="20210313 17:07:21.014"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:21.020" starttime="20210313 17:07:21.017"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:21.021" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:21.092" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:21.092" starttime="20210313 17:07:21.020"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:21.143" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_ Msg_from_Seen_to_Recent"</msg>
<status status="PASS" endtime="20210313 17:07:21.144" starttime="20210313 17:07:21.093"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:21.161" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:21.161" starttime="20210313 17:07:21.144"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:21.178" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Update_Msg_from_Seen_to_Recent"/"Update_Msg_from_Seen_t o_Recent".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:21.178" starttime="20210313 17:07:21.162"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:21.186" level="INFO">[1] 5012
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:21.186" starttime="20210313 17:07:21.179"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:21.186" starttime="20210313 17:07:21.010"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:21.190" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:21.190" starttime="20210313 17:07:21.189"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:21.192" starttime="20210313 17:07:21.191"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:21.193" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:21.274" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:21.275" starttime="20210313 17:07:21.192"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:21.319" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_ Msg_from_Seen_to_Recent"</msg>
<status status="PASS" endtime="20210313 17:07:21.320" starttime="20210313 17:07:21.276"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:21.335" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:21.336" starttime="20210313 17:07:21.320"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:21.350" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Update_Msg_from_Seen_to_Recent"/"Update_Msg_from_Seen_to_Recent".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:21.350" starttime="20210313 17:07:21.336"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:21.361" level="INFO">[2] 5040
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:21.362" starttime="20210313 17:07:21.351"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:21.363" starttime="20210313 17:07:21.187"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:21.363" starttime="20210313 17:07:20.589"></status>
</kw>
<kw name="UpdateFlagToMessage" library="mStore_Digits_TMO_resources">
<arguments>
<arg>flag=Recent</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ResourceURI}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:21.369" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:21.369" starttime="20210313 17:07:21.367"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}/flags/%5C${flag}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:22.165" level="INFO">Put Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags/%5CRecent, data=None,                     headers={'User-Agent': ''}, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:22.166" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.166" starttime="20210313 17:07:21.371"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.167" level="INFO">201</msg>
<status status="PASS" endtime="20210313 17:07:22.168" starttime="20210313 17:07:22.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.169" level="INFO"></msg>
<status status="PASS" endtime="20210313 17:07:22.169" starttime="20210313 17:07:22.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.170" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:20 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:SbbZCtclmdYWAoUuLiUX4mN0D6TIcddt-slot:1-instId:2-subOid:26-time:2021-03-14T00:01:21Z-localFqdn:10.10.219.141', 'content-length': '0', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:22.171" starttime="20210313 17:07:22.169"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:22.173" level="INFO">${response_status_code} = 201</msg>
<status status="PASS" endtime="20210313 17:07:22.173" starttime="20210313 17:07:22.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>201</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.174" starttime="20210313 17:07:22.173"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.174" starttime="20210313 17:07:21.364"></status>
</kw>
<kw name="GetServicerequest" library="mStore_Generic_resources">
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<kw name="Get One Request" library="Socket_PNS_NMS">
<arguments>
<arg>${service}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<msg timestamp="20210313 17:07:22.679" level="INFO">${request} = &lt;socket._socketobject object at 0x2e7a830&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.679" starttime="20210313 17:07:22.176"></status>
</kw>
<msg timestamp="20210313 17:07:22.680" level="INFO">${request} = &lt;socket._socketobject object at 0x2e7a830&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.680" starttime="20210313 17:07:22.175"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.682" level="INFO">${request} = &lt;socket._socketobject object at 0x2e7a830&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.682" starttime="20210313 17:07:22.681"></status>
</kw>
<kw name="GetRequestData" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${headers}</var>
<var>${req_body}</var>
<var>${version}</var>
</assign>
<kw name="Read Request Body" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:22.686" level="INFO">${data} = (&lt;mimetools.Message instance at 0x31d9248&gt;, '{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Ch...</msg>
<status status="PASS" endtime="20210313 17:07:22.686" starttime="20210313 17:07:22.684"></status>
</kw>
<msg timestamp="20210313 17:07:22.687" level="INFO">${headers} = Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-slot:0-instId:2-subOid:65657-time:2021-03-14...</msg>
<msg timestamp="20210313 17:07:22.687" level="INFO">${req_body} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:21.731","nm...</msg>
<msg timestamp="20210313 17:07:22.687" level="INFO">${version} = HTTP/1.1</msg>
<status status="PASS" endtime="20210313 17:07:22.687" starttime="20210313 17:07:22.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ValidateChatPNSNotfn</arg>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>direction=${DIRECTION}</arg>
<arg>msgStatus=RECENT,DELIVERED</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
<arg>uid=${UID}</arg>
</arguments>
<assign>
<var>${pns_status}</var>
<var>${value}</var>
</assign>
<kw name="ValidateChatPNSNotfn" library="mStore_Digits_TMO_resources">
<arguments>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>direction=${DIRECTION}</arg>
<arg>msgStatus=RECENT,DELIVERED</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
<arg>uid=${UID}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.694" level="INFO">Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-slot:0-instId:2-subOid:65657-time:2021-03-14T00:01:21.000-localFqdn:10.10.219.141
Host: pns.server.mavenir1.com:8060
Content-Length: 1625
</msg>
<status status="PASS" endtime="20210313 17:07:22.694" starttime="20210313 17:07:22.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.695" level="INFO">{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:21.731","nmsEventList":{"nmsEvent":[{"changedObject":{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","flags":{"flag":["\\DELIVERED"]},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a","message":{"store":"RCSMessageStore/Chat/8888888880/","objectURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","direction":"In","message-time":"2021-03-13T09:06:25.000-08:00","status":"RECENT,DELIVERED","sender":"tel:+9999999990","recipients":[{"uri":"tel:+8888888880"}],"imdn-message-id":"37857c02-005f-9b17-9322-b8423992923a","content":[{"content-type":"text/plain","content-size":"67","charset":"UTF-8","content-transfer-encoding":"quoted-printable","content":"This is the new message we are depositing to test $@#^&amp;*!0123456789","rcs-data":{"sip-call-id":"005056884776-4d72-eb161700-1e2-571fa736-a0e46","feature-tag":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","p-asserted-service":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","contribution-id":"e0a1029e-a48b-4ca6-b185-299dada439be","conversation-id":"2dbc584e-fc46-4a37-9a56-c2b93246d788"}}]}}}]}}}</msg>
<status status="PASS" endtime="20210313 17:07:22.695" starttime="20210313 17:07:22.695"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_resource_url}</var>
</assign>
<msg timestamp="20210313 17:07:22.697" level="INFO">${pns_resource_url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:22.697" starttime="20210313 17:07:22.696"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_object_Url}</var>
</assign>
<msg timestamp="20210313 17:07:22.699" level="INFO">${pns_object_Url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:22.699" starttime="20210313 17:07:22.697"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${pns_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:22.700" level="INFO">${pns_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:22.700" starttime="20210313 17:07:22.699"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:22.701" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:21.731","nm...</msg>
<status status="PASS" endtime="20210313 17:07:22.702" starttime="20210313 17:07:22.701"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>\\</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:22.703" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:21.731","nm...</msg>
<status status="PASS" endtime="20210313 17:07:22.703" starttime="20210313 17:07:22.702"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''',strict=False)</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_out}</var>
</assign>
<msg timestamp="20210313 17:07:22.705" level="INFO">${json_out} = {u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4...</msg>
<status status="PASS" endtime="20210313 17:07:22.705" starttime="20210313 17:07:22.703"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_out}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.706" level="INFO">{u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'message': {u'status': u'RECENT,DELIVERED', u'message-time': u'2021-03-13T09:06:25.000-08:00', u'direction': u'In', u'sender': u'tel:+9999999990', u'recipients': [{u'uri': u'tel:+8888888880'}], u'imdn-message-id': u'37857c02-005f-9b17-9322-b8423992923a', u'objectURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'content': [{u'content-transfer-encoding': u'quoted-printable', u'rcs-data': {u'sip-call-id': u'005056884776-4d72-eb161700-1e2-571fa736-a0e46', u'p-asserted-service': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'conversation-id': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'feature-tag': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'contribution-id': u'e0a1029e-a48b-4ca6-b185-299dada439be'}, u'charset': u'UTF-8', u'content-size': u'67', u'content': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'content-type': u'text/plain'}], u'store': u'RCSMessageStore/Chat/8888888880/'}, u'flags': {u'flag': [u'DELIVERED']}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}}]}, u'pns-subtype': u'ChatS', u'recipients': [{u'uri': u'tel:+8888888880'}], u'pns-time': u'2021-03-14T00:01:21.731', u'pns-type': u'RCSPage', u'serviceName': u'SyncApp', u'TTL': u'600', u'channel': u'pns_channe'}}</msg>
<status status="PASS" endtime="20210313 17:07:22.707" starttime="20210313 17:07:22.706"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PNS_OBJECT_URL}</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.709" level="INFO">${PNS_OBJECT_URL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:22.709" starttime="20210313 17:07:22.707"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>https://${service_root_path}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${OBJECT_URL}</var>
</assign>
<msg timestamp="20210313 17:07:22.711" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:22.711" starttime="20210313 17:07:22.710"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OBJECT_URL}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.712" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:22.713" starttime="20210313 17:07:22.712"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:22.714" level="INFO">${status_msg} = [u'RECENT', u'DELIVERED']</msg>
<status status="PASS" endtime="20210313 17:07:22.714" starttime="20210313 17:07:22.713"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:22.715" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:07:22.715" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:07:22.715" starttime="20210313 17:07:22.714"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${len_response_body}</var>
</assign>
<msg timestamp="20210313 17:07:22.716" level="INFO">Length is 1625</msg>
<msg timestamp="20210313 17:07:22.717" level="INFO">${len_response_body} = 1625</msg>
<status status="PASS" endtime="20210313 17:07:22.717" starttime="20210313 17:07:22.716"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.721" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.721" starttime="20210313 17:07:22.720"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.721" starttime="20210313 17:07:22.718"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.721" starttime="20210313 17:07:22.717"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.723" starttime="20210313 17:07:22.723"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.724" starttime="20210313 17:07:22.722"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.726" starttime="20210313 17:07:22.725"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.726" starttime="20210313 17:07:22.724"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.730" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.730" starttime="20210313 17:07:22.728"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.730" starttime="20210313 17:07:22.727"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.730" starttime="20210313 17:07:22.726"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.734" starttime="20210313 17:07:22.732"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.734" starttime="20210313 17:07:22.731"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword and Continue on Failure</arg>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.749" level="FAIL">Resolving variable '${headers['X-mStoreFE-Addr']}' failed: Variable '${headers}' not found. Did you mean:
    ${pns_headers}</msg>
<status status="FAIL" endtime="20210313 17:07:22.750" starttime="20210313 17:07:22.737"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:22.750" starttime="20210313 17:07:22.736"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.750" starttime="20210313 17:07:22.735"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.753" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.753" starttime="20210313 17:07:22.752"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.754" starttime="20210313 17:07:22.751"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.756" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.756" starttime="20210313 17:07:22.755"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.756" starttime="20210313 17:07:22.754"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.759" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.759" starttime="20210313 17:07:22.758"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.759" starttime="20210313 17:07:22.757"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.762" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.762" starttime="20210313 17:07:22.761"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.762" starttime="20210313 17:07:22.760"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.765" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.765" starttime="20210313 17:07:22.764"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.765" starttime="20210313 17:07:22.763"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.768" starttime="20210313 17:07:22.767"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.768" starttime="20210313 17:07:22.766"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.771" starttime="20210313 17:07:22.769"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.771" starttime="20210313 17:07:22.769"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20210313 17:07:22.774" level="FAIL">delivered != recent</msg>
<status status="FAIL" endtime="20210313 17:07:22.774" starttime="20210313 17:07:22.772"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:22.774" starttime="20210313 17:07:22.771"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20210313 17:07:22.778" level="FAIL">Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:07:22.778" starttime="20210313 17:07:22.777"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:22.778" starttime="20210313 17:07:22.776"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:22.778" starttime="20210313 17:07:22.775"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.780" starttime="20210313 17:07:22.779"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.781" starttime="20210313 17:07:22.778"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.783" starttime="20210313 17:07:22.782"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.783" starttime="20210313 17:07:22.781"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.786" starttime="20210313 17:07:22.785"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.786" starttime="20210313 17:07:22.784"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.789" starttime="20210313 17:07:22.788"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.789" starttime="20210313 17:07:22.787"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.792" starttime="20210313 17:07:22.790"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.792" starttime="20210313 17:07:22.790"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.794" starttime="20210313 17:07:22.793"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.794" starttime="20210313 17:07:22.792"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.797" starttime="20210313 17:07:22.795"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.797" starttime="20210313 17:07:22.795"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.800" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.800" starttime="20210313 17:07:22.799"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.800" starttime="20210313 17:07:22.798"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.804" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.805" starttime="20210313 17:07:22.803"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.805" starttime="20210313 17:07:22.802"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.805" starttime="20210313 17:07:22.801"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.808" starttime="20210313 17:07:22.806"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.808" starttime="20210313 17:07:22.805"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' != 'deposit'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:22.810" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:22.811" starttime="20210313 17:07:22.809"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:22.812" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:22.812" starttime="20210313 17:07:22.811"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.815" starttime="20210313 17:07:22.814"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.816" starttime="20210313 17:07:22.813"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.819" starttime="20210313 17:07:22.817"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.819" starttime="20210313 17:07:22.816"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.822" starttime="20210313 17:07:22.820"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.822" starttime="20210313 17:07:22.819"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.824" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.825" starttime="20210313 17:07:22.823"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.825" starttime="20210313 17:07:22.822"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.827" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.827" starttime="20210313 17:07:22.826"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.828" starttime="20210313 17:07:22.825"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.830" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.830" starttime="20210313 17:07:22.829"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.830" starttime="20210313 17:07:22.828"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.833" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.833" starttime="20210313 17:07:22.831"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.833" starttime="20210313 17:07:22.831"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.836" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.836" starttime="20210313 17:07:22.835"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.837" starttime="20210313 17:07:22.834"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.840" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.840" starttime="20210313 17:07:22.839"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.841" starttime="20210313 17:07:22.838"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.844" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.844" starttime="20210313 17:07:22.842"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.844" starttime="20210313 17:07:22.841"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.847" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.847" starttime="20210313 17:07:22.845"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.847" starttime="20210313 17:07:22.845"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.849" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.850" starttime="20210313 17:07:22.848"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.850" starttime="20210313 17:07:22.847"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<msg timestamp="20210313 17:07:22.852" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:22.852" starttime="20210313 17:07:22.851"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.853" starttime="20210313 17:07:22.850"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:22.853" starttime="20210313 17:07:22.689"></status>
</kw>
<msg timestamp="20210313 17:07:22.853" level="INFO">${pns_status} = FAIL</msg>
<msg timestamp="20210313 17:07:22.854" level="INFO">${value} = Several failures occurred:

1) delivered != recent

2) Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list ind...</msg>
<status status="PASS" endtime="20210313 17:07:22.854" starttime="20210313 17:07:22.688"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="SendResponse" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Sendresponse Code" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
<arg>${response_code}</arg>
<arg>${message}</arg>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.862" starttime="20210313 17:07:22.858"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.862" starttime="20210313 17:07:22.857"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.862" starttime="20210313 17:07:22.856"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:22.863" starttime="20210313 17:07:22.855"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_original_folder_timestamp_CHAT</arg>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>delivered=1</arg>
</arguments>
<assign>
<var>${creation_tuid}</var>
<var>${modification_tuid}</var>
</assign>
<kw name="ValidateCassandra_messages_by_original_folder_timestamp_CHAT" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:22.868" starttime="20210313 17:07:22.867"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_original_folder_timestamp where userid='${userId}' AND folderkey='${folderkey}' AND creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:23.549" level="INFO">SELECT json * from messages_by_original_folder_timestam p where userid='4feb706c-8458-11eb-b7ec-005056ae42da' AND folderkey='UkNTTWVzc2F nZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' AND creation_tuid=51b3d2e1-8458-11eb-83b6-5d6 742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:07:23.550" starttime="20210313 17:07:22.868"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:23.842" level="INFO">[json]

 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": null, "bcc": null, "blockedmsgreasoncode": "", "bodyoctets": 67, "bucketkey": null, "bulletinid": null, "cc": null, "chunksize": null, "cnsbulletinon": null, "cnsgreetingon": 0, "contentdisposition": null, "contentencoding": "quoted-printable", "contenttype": "text/plain", "contributionid": "e0a1029e-a48b-4ca6-b185-299dada439be", "conversationid": "2dbc584e-fc46-4a37-9a56-c2b93246d788", "cpim": null, "creation_ts": "2021-03-14T00:01:20.958000", "creationdate": null, "deleted": 0, "delivered": 1, "deliveredimdnlist": null, "direction": null, "draft": 0, "expirytimestamp": null, "flagged": 0, "fromheader": "tel:+9999999990", "geolocation": null, "greetingname": "Greeting", "greetingtelnumber": null, "imapmsgheaders": "Content-type: text/plain;charset=UTF-8\\r\\nDate: Sat, 13 Mar 2021 17:06:25 +0000\\r\\nMessage-Context: X-RCS-PM\\r\\nDirection: In\\r\\nTo: tel:+8888888880\\r\\nFrom: tel:+9999999990\\r\\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\\r\\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\\r\\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\\r\\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\\r\\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\\r\\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\\r\\n\\r\\n", "imdn_disposition_data": null, "imdnmessageid": "37857c02-005f-9b17-9322-b8423992923a", "inprocess": null, "internaldate": "2021-03-13T17:06:25Z", "ismodifiedevent": null, "lastmodseq": null, "mdnflag": null, "message": "This is the new message we are depositing to test $@#^&amp;*!0123456789", "messageaction": null, "messagecontext": "X-RCS-PM", "messageid": "", "messagetype": "", "messageversion": null, "mimeversion": "", "modification_tuid": "687775e0-8458-11eb-83b6-5d6742a1b2bf", "mstore_version": "vm_2_1", "nscorrelationid": null, "numberofchunks": null, "objheaders": null, "originalfolderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "payloadheaders": "", "priority": -1, "protection": null, "purgenotify": null, "purgeuuid": null, "readimdnlist": null, "recent": 1, "recordlen": null, "replytonumber": null, "requestjson": null, "returnreceiptflag": null, "rfc2822size": 1401, "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "saved": null, "seen": 0, "sensitivity": null, "smscallbacknum": null, "sourcenode": null, "storageobjtype": "", "subject": "", "swiftobjurl": "/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "swiftpointer": 0, "thumbnailcontent": null, "timezone": null, "toheader": "tel:+8888888880", "tpdata": "", "tpdatatype": "", "transcriptresult": null, "transcriptstates": null, "uid": 0, "user": null, "useractivity": null, "userdefinedflagname": "$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,", "userdefinedflagvalue": "0,0,0,0,0,0,0,", "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "xcontentpages": null, "xfuturedeliverytimestamp": null, "xorgvmuid": null}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:23.843" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:23.843" starttime="20210313 17:07:23.550"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:23.846" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:23.846" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": n...</msg>
<status status="PASS" endtime="20210313 17:07:23.847" starttime="20210313 17:07:23.844"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mboft_data}</var>
</assign>
<msg timestamp="20210313 17:07:23.850" level="INFO">${mboft_data} = {u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid...</msg>
<status status="PASS" endtime="20210313 17:07:23.850" starttime="20210313 17:07:23.847"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mboft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.852" level="INFO">{u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid': u'687775e0-8458-11eb-83b6-5d6742a1b2bf', u'cpim': None, u'sensitivity': None, u'smscallbacknum': None, u'contentdisposition': None, u'internaldate': u'2021-03-13T17:06:25Z', u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'flagged': 0, u'bucketkey': None, u'imdn_disposition_data': None, u'contributionid': u'e0a1029e-a48b-4ca6-b185-299dada439be', u'requestjson': None, u'xorgvmuid': None, u'bodyoctets': 67, u'userdefinedflagname': u'$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,', u'subject': u'', u'delivered': 1, u'useractivity': None, u'contenttype': u'text/plain', u'mstore_version': u'vm_2_1', u'messageaction': None, u'chunksize': None, u'deleted': 0, u'contentencoding': u'quoted-printable', u'protection': None, u'cnsgreetingon': 0, u'mdnflag': None, u'xfuturedeliverytimestamp': None, u'uuid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'toheader': u'tel:+8888888880', u'nscorrelationid': None, u'readimdnlist': None, u'purgenotify': None, u'conversationid': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'objheaders': None, u'geolocation': None, u'sourcenode': None, u'cc': None, u'cnsbulletinon': None, u'imapmsgheaders': u'Content-type: text/plain;charset=UTF-8\r\nDate: Sat, 13 Mar 2021 17:06:25 +0000\r\nMessage-Context: X-RCS-PM\r\nDirection: In\r\nTo: tel:+8888888880\r\nFrom: tel:+9999999990\r\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\r\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\r\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\r\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\r\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\r\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\r\n\r\n', u'message': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'creation_ts': u'2021-03-14T00:01:20.958000', u'uid': 0, u'blockedmsgreasoncode': u'', u'lastmodseq': None, u'inprocess': None, u'priority': -1, u'draft': 0, u'purgeuuid': None, u'fromheader': u'tel:+9999999990', u'direction': None, u'storageobjtype': u'', u'deliveredimdnlist': None, u'messagecontext': u'X-RCS-PM', u'tpdatatype': u'', u'ismodifiedevent': None, u'returnreceiptflag': None, u'originalfolderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'messageversion': None, u'replytonumber': None, u'bulletinid': None, u'mimeversion': u'', u'timezone': None, u'seen': 0, u'recordlen': None, u'swiftobjurl': u'/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'imdnmessageid': u'37857c02-005f-9b17-9322-b8423992923a', u'messagetype': u'', u'thumbnailcontent': None, u'swiftpointer': 0, u'tpdata': u'', u'numberofchunks': None, u'userdefinedflagvalue': u'0,0,0,0,0,0,0,', u'user': None, u'attributes': None, u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'transcriptresult': None, u'recent': 1, u'xcontentpages': None, u'greetingtelnumber': None, u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'bcc': None, u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'creationdate': None}</msg>
<status status="PASS" endtime="20210313 17:07:23.853" starttime="20210313 17:07:23.851"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:23.857" starttime="20210313 17:07:23.855"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.857" starttime="20210313 17:07:23.853"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.861" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.861" starttime="20210313 17:07:23.859"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.862" starttime="20210313 17:07:23.858"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.865" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.865" starttime="20210313 17:07:23.863"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.865" starttime="20210313 17:07:23.862"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.871" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.871" starttime="20210313 17:07:23.870"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.872" starttime="20210313 17:07:23.868"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.872" starttime="20210313 17:07:23.866"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:23.876" starttime="20210313 17:07:23.875"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.877" starttime="20210313 17:07:23.873"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.880" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.881" starttime="20210313 17:07:23.879"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.881" starttime="20210313 17:07:23.877"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.885" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.885" starttime="20210313 17:07:23.883"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.885" starttime="20210313 17:07:23.882"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.889" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.889" starttime="20210313 17:07:23.887"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.889" starttime="20210313 17:07:23.886"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:23.892" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.897" starttime="20210313 17:07:23.891"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.898" starttime="20210313 17:07:23.890"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:23.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.902" starttime="20210313 17:07:23.899"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.902" starttime="20210313 17:07:23.898"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:23.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.906" starttime="20210313 17:07:23.904"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.906" starttime="20210313 17:07:23.903"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:23.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.909" starttime="20210313 17:07:23.908"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.909" starttime="20210313 17:07:23.907"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<msg timestamp="20210313 17:07:23.912" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.913" starttime="20210313 17:07:23.911"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.913" starttime="20210313 17:07:23.910"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:23.918" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.919" starttime="20210313 17:07:23.916"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.919" starttime="20210313 17:07:23.914"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:23.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.925" starttime="20210313 17:07:23.922"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.926" starttime="20210313 17:07:23.921"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:23.929" starttime="20210313 17:07:23.928"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.929" starttime="20210313 17:07:23.927"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:23.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:23.935" starttime="20210313 17:07:23.931"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.936" starttime="20210313 17:07:23.930"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:23.937" starttime="20210313 17:07:22.864"></status>
</kw>
<msg timestamp="20210313 17:07:23.937" level="INFO">${creation_tuid} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<msg timestamp="20210313 17:07:23.938" level="INFO">${modification_tuid} = 687775e0-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:23.938" starttime="20210313 17:07:22.863"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_root_folder_timestamp</arg>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="ValidateCassandra_messages_by_root_folder_timestamp" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=1</arg>
<arg>seen=0</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:23.943" starttime="20210313 17:07:23.942"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_root_folder_timestamp where userid='${userId}' and rootfolderkey='${rootfolderkey}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:24.678" level="INFO">SELECT json * from messages_by_root_folder_timestamp wh ere userid='4feb706c-8458-11eb-b7ec-005056ae42da' and rootfolderkey='fb830d1d-a4 a5-4f58-a3ad-740be2fd2fc6' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6742a1b2b f;</msg>
<status status="PASS" endtime="20210313 17:07:24.679" starttime="20210313 17:07:23.943"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:24.709" level="INFO">[json]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "imdn_disposition_data": null, "modification_tuid": "687775e0-8458-11eb-83b6-5d6742a1b2bf", "recent": 1, "saved": null, "seen": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:24.709" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:24.709" starttime="20210313 17:07:24.679"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:24.711" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:24.711" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "fol...</msg>
<status status="PASS" endtime="20210313 17:07:24.711" starttime="20210313 17:07:24.710"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mbrft_data}</var>
</assign>
<msg timestamp="20210313 17:07:24.713" level="INFO">${mbrft_data} = {u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'...</msg>
<status status="PASS" endtime="20210313 17:07:24.713" starttime="20210313 17:07:24.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mbrft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:24.715" level="INFO">{u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'687775e0-8458-11eb-83b6-5d6742a1b2bf', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'seen': 0, u'saved': None, u'recent': 1}</msg>
<status status="PASS" endtime="20210313 17:07:24.715" starttime="20210313 17:07:24.714"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:24.717" starttime="20210313 17:07:24.716"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.718" starttime="20210313 17:07:24.715"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:24.720" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:24.720" starttime="20210313 17:07:24.719"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.720" starttime="20210313 17:07:24.718"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:24.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:24.723" starttime="20210313 17:07:24.722"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.723" starttime="20210313 17:07:24.721"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:24.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:24.726" starttime="20210313 17:07:24.725"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.726" starttime="20210313 17:07:24.724"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:24.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:24.729" starttime="20210313 17:07:24.727"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.729" starttime="20210313 17:07:24.727"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:24.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:24.732" starttime="20210313 17:07:24.730"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.732" starttime="20210313 17:07:24.730"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:24.736" starttime="20210313 17:07:24.734"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.736" starttime="20210313 17:07:24.733"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:24.739" starttime="20210313 17:07:24.737"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.739" starttime="20210313 17:07:24.737"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.739" starttime="20210313 17:07:23.939"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:24.740" starttime="20210313 17:07:23.938"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraIMDNMapping</arg>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="ValidateCassandraIMDNMapping" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${SUBSCRIBER_ID}_${imdn_msg_id}</arg>
</arguments>
<assign>
<var>${imdncorrelator}</var>
</assign>
<msg timestamp="20210313 17:07:24.745" level="INFO">${imdncorrelator} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:07:24.745" starttime="20210313 17:07:24.744"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:24.746" starttime="20210313 17:07:24.746"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from imdnmsgidmapping where userid='${userId}' and creation_tuid=${uid} LIMIT 1 ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:07:25.358" level="INFO">select json * from imdnmsgidmapping where userid='4feb7 06c-8458-11eb-b7ec-005056ae42da' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d674 2a1b2bf LIMIT 1 ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:07:25.358" starttime="20210313 17:07:24.747"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:07:25.390" level="INFO">[json]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "foldername": "RCSMessageStore/Chat/8888888880/", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "uid": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:25.391" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:25.391" starttime="20210313 17:07:25.359"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.394" starttime="20210313 17:07:25.393"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.395" starttime="20210313 17:07:25.391"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${cnt} == 0</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.396" starttime="20210313 17:07:25.395"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:07:25.398" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:07:25.398" starttime="20210313 17:07:25.397"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:07:25.401" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:25.402" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folder...</msg>
<status status="PASS" endtime="20210313 17:07:25.402" starttime="20210313 17:07:25.400"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${imdn_mapping}</var>
</assign>
<msg timestamp="20210313 17:07:25.405" level="INFO">${imdn_mapping} = {u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830...</msg>
<status status="PASS" endtime="20210313 17:07:25.405" starttime="20210313 17:07:25.403"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${imdn_mapping}</arg>
</arguments>
<msg timestamp="20210313 17:07:25.407" level="INFO">{u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'imdncorrelator': u'8888888880_37857c02-005f-9b17-9322-b8423992923a', u'cosid': u'10'}</msg>
<status status="PASS" endtime="20210313 17:07:25.407" starttime="20210313 17:07:25.405"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.411" starttime="20210313 17:07:25.409"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.411" starttime="20210313 17:07:25.408"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.415" starttime="20210313 17:07:25.413"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.415" starttime="20210313 17:07:25.412"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:25.417" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:25.418" starttime="20210313 17:07:25.416"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.418" starttime="20210313 17:07:25.415"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.421" starttime="20210313 17:07:25.420"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.422" starttime="20210313 17:07:25.419"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<msg timestamp="20210313 17:07:25.425" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:25.425" starttime="20210313 17:07:25.423"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.425" starttime="20210313 17:07:25.422"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.428" starttime="20210313 17:07:25.427"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.429" starttime="20210313 17:07:25.426"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.432" starttime="20210313 17:07:25.430"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.432" starttime="20210313 17:07:25.429"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.432" starttime="20210313 17:07:24.741"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.433" starttime="20210313 17:07:24.741"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<msg timestamp="20210313 17:07:25.439" level="FAIL">PNS notification verification failed 
Several failures occurred:

1) delivered != recent

2) Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:07:25.439" starttime="20210313 17:07:25.437"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:25.439" starttime="20210313 17:07:25.435"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:25.439" starttime="20210313 17:07:25.433"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.444" starttime="20210313 17:07:25.443"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:25.445" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:25.504" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:25.505" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:25.505" starttime="20210313 17:07:25.445"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:25.509" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:25.509" starttime="20210313 17:07:25.505"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:25.569" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:25.569" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:25.570" starttime="20210313 17:07:25.510"></status>
</kw>
<msg timestamp="20210313 17:07:25.570" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:25.571" starttime="20210313 17:07:25.442"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.574" starttime="20210313 17:07:25.573"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:25.575" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:25.642" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:25.643" starttime="20210313 17:07:25.575"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.644" starttime="20210313 17:07:25.571"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.647" starttime="20210313 17:07:25.647"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:25.649" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:25.793" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:25.793" starttime="20210313 17:07:25.649"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:25.795" level="INFO">12759 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:25.795" starttime="20210313 17:07:25.794"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:25.858" level="INFO">25496 packets received by filter
166 packets dropped by kernel
date
Sun Mar 14 00:01:24 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_Msg_from_Seen_to_Recent"/"Update_Msg_from_Seen_to_Recent".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_Msg_from_Seen_to_Recent"/"Update_Msg_from_Seen_to_Recent".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:25.859" starttime="20210313 17:07:25.796"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.859" starttime="20210313 17:07:25.645"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.863" starttime="20210313 17:07:25.862"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.863" starttime="20210313 17:07:25.860"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.866" starttime="20210313 17:07:25.865"></status>
</kw>
<msg timestamp="20210313 17:07:25.866" level="INFO">${status} = ('PASS', None)</msg>
<status status="PASS" endtime="20210313 17:07:25.866" starttime="20210313 17:07:25.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<kw name="CloseRequest" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<kw name="Close Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.871" starttime="20210313 17:07:25.869"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.871" starttime="20210313 17:07:25.868"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.872" starttime="20210313 17:07:25.867"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:25.872" starttime="20210313 17:07:25.441"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="FAIL" endtime="20210313 17:07:25.872" critical="yes" starttime="20210313 17:07:20.587">PNS notification verification failed 
Several failures occurred:

1) delivered != recent

2) Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</status>
</test>
<test id="s1-t11" name="FolderSearchAfterUpdatingtheFlagtoRecent">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:25.877" starttime="20210313 17:07:25.877"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:25.879" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:25.947" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:25.947" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:25.947" starttime="20210313 17:07:25.878"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:25.985" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:25.986" starttime="20210313 17:07:25.948"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:26.003" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:26.003" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:26.003" starttime="20210313 17:07:25.986"></status>
</kw>
<msg timestamp="20210313 17:07:26.004" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:26.004" starttime="20210313 17:07:25.876"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:26.006" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:26.006" starttime="20210313 17:07:26.005"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:26.011" starttime="20210313 17:07:26.009"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:26.013" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:26.070" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:26.071" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:26.072" starttime="20210313 17:07:26.012"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:26.074" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:26.196" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:26.197" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:26.198" starttime="20210313 17:07:26.073"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:26.199" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:26.200" starttime="20210313 17:07:26.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:26.201" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:26.202" starttime="20210313 17:07:26.200"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:26.204" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:26.204" starttime="20210313 17:07:26.202"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:26.206" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:26.207" starttime="20210313 17:07:26.205"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:26.244" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:26.245" starttime="20210313 17:07:26.208"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:26.259" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:26.259" starttime="20210313 17:07:26.245"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:26.266" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:26.267" starttime="20210313 17:07:26.260"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:26.282" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:26.283" starttime="20210313 17:07:26.267"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:26.283" starttime="20210313 17:07:26.007"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:26.287" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:26.287" starttime="20210313 17:07:26.286"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:26.289" starttime="20210313 17:07:26.288"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:26.290" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:26.368" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:26.368" starttime="20210313 17:07:26.289"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:26.406" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterUpdatingtheFlagtoRecent"</msg>
<status status="PASS" endtime="20210313 17:07:26.407" starttime="20210313 17:07:26.369"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:26.425" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:26.425" starttime="20210313 17:07:26.407"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:26.442" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterUpdatingtheFlagtoRecent"/"FolderSearch AfterUpdatingtheFlagtoRecent".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:26.442" starttime="20210313 17:07:26.426"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:26.453" level="INFO">[1] 5208
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:26.454" starttime="20210313 17:07:26.443"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:26.454" starttime="20210313 17:07:26.284"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:26.458" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:26.458" starttime="20210313 17:07:26.457"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:26.459" starttime="20210313 17:07:26.458"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:26.461" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:26.548" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:26.549" starttime="20210313 17:07:26.460"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:26.630" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterUpdatingtheFlagtoRecent"</msg>
<status status="PASS" endtime="20210313 17:07:26.631" starttime="20210313 17:07:26.549"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:26.636" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:26.636" starttime="20210313 17:07:26.632"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:26.650" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"FolderSearchAfterUpdatingtheFlagtoRecent"/"FolderSearchAfterUpdatingtheFl agtoRecent".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:26.651" starttime="20210313 17:07:26.636"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:26.660" level="INFO">[2] 5235
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:26.661" starttime="20210313 17:07:26.652"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:26.662" starttime="20210313 17:07:26.454"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:26.662" starttime="20210313 17:07:25.875"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Folder search after depositing the message"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:26.665" starttime="20210313 17:07:26.663"></status>
</kw>
<kw name="FolderSearch" library="mStore_Digits_TMO_resources">
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>http://${server_root_path}${oem_host}${userId}/folders/${folderkey}</arg>
</arguments>
<assign>
<var>${FOLDER_SEARCH_RESOURCE_URL}</var>
</assign>
<msg timestamp="20210313 17:07:26.671" level="INFO">${FOLDER_SEARCH_RESOURCE_URL} = http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:07:26.671" starttime="20210313 17:07:26.669"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${obj_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:26.676" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:07:26.677" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"${FOLDER_SEARCH_RESOURCE_URL}"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
    ...</msg>
<status status="PASS" endtime="20210313 17:07:26.678" starttime="20210313 17:07:26.672"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:26.680" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"...</msg>
<status status="PASS" endtime="20210313 17:07:26.681" starttime="20210313 17:07:26.679"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${oem_host}${userId}/objects/operations/search</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:26.683" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search</msg>
<status status="PASS" endtime="20210313 17:07:26.683" starttime="20210313 17:07:26.681"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:27.986" level="INFO">Post Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search, data={
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
       "order": "Ascending"
       }
      ]
   }
  }
}

, headers={'Content-Type': 'application/json;', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:27.987" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:27.987" starttime="20210313 17:07:26.683"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:27.989" level="INFO">${response_status_code} = 200</msg>
<status status="PASS" endtime="20210313 17:07:27.989" starttime="20210313 17:07:27.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:27.991" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:07:27.991" starttime="20210313 17:07:27.990"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:27.992" level="INFO">{"objectList":{"object":[{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","attributes":{"attribute":[{"name":"Charset","value":["UTF-8"]},{"name":"Content-Transfer-Encoding","value":["quoted-printable"]},{"name":"Contribution-ID","value":["e0a1029e-a48b-4ca6-b185-299dada439be"]},{"name":"Conversation-ID","value":["2dbc584e-fc46-4a37-9a56-c2b93246d788"]},{"name":"date","value":["2021-03-13T17:06:25Z"]},{"name":"Direction","value":["In"]},{"name":"from","value":["tel:+9999999990"]},{"name":"IMDN-Message-ID","value":["37857c02-005f-9b17-9322-b8423992923a"]},{"name":"message-context","value":["X-RCS-PM"]},{"name":"P-Asserted-Service","value":["urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"]},{"name":"textcontent","value":["This is the new message we are depositing to test $@#^&amp;*!0123456789"]},{"name":"to","value":["tel:+8888888880"]}]},"flags":{"flag":["\\Recent","\\Delivered"],"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags"},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","path":"/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a"}]}}</msg>
<status status="PASS" endtime="20210313 17:07:27.993" starttime="20210313 17:07:27.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:27.995" level="INFO">{'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:hxqSFTL2T0piGY64vjjqmhEtKhX7N3lt-slot:1-instId:1-subOid:27-time:2021-03-14T00:01:27Z-localFqdn:10.10.219.141', 'content-length': '1512', 'server': 'Mavenir Web Application Server', 'connection': 'close', 'date': 'Sun, 14 Mar 2021 00:01:26 GMT', 'content-type': 'application/json'}</msg>
<status status="PASS" endtime="20210313 17:07:27.995" starttime="20210313 17:07:27.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>${response_code}</arg>
<arg>msg="folder search is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:27.997" starttime="20210313 17:07:27.996"></status>
</kw>
<msg timestamp="20210313 17:07:27.998" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:27.998" starttime="20210313 17:07:26.665"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateChatFolderSearchResponse</arg>
<arg>response=${response}</arg>
<arg>msgStatus=recent,delivered</arg>
<arg>direction=${DIRECTION}</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="ValidateChatFolderSearchResponse" library="mStore_Digits_TMO_resources">
<arguments>
<arg>response=${response}</arg>
<arg>msgStatus=recent,delivered</arg>
<arg>direction=${DIRECTION}</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Create List</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>Copy List</arg>
<arg>${to_msg}</arg>
</arguments>
<assign>
<var>${to}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${to_msg}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.005" starttime="20210313 17:07:28.004"></status>
</kw>
<msg timestamp="20210313 17:07:28.005" level="INFO">${to} = ['tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:28.006" starttime="20210313 17:07:28.003"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:28.007" level="INFO">${status_msg} = [u'recent', u'delivered']</msg>
<status status="PASS" endtime="20210313 17:07:28.007" starttime="20210313 17:07:28.006"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:28.008" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:07:28.008" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:07:28.009" starttime="20210313 17:07:28.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${UID}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.010" level="INFO">51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:28.010" starttime="20210313 17:07:28.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.012" level="INFO">{'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:hxqSFTL2T0piGY64vjjqmhEtKhX7N3lt-slot:1-instId:1-subOid:27-time:2021-03-14T00:01:27Z-localFqdn:10.10.219.141', 'content-length': '1512', 'server': 'Mavenir Web Application Server', 'connection': 'close', 'date': 'Sun, 14 Mar 2021 00:01:26 GMT', 'content-type': 'application/json'}</msg>
<status status="PASS" endtime="20210313 17:07:28.012" starttime="20210313 17:07:28.011"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:28.014" level="INFO">${data} = {u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5...</msg>
<status status="PASS" endtime="20210313 17:07:28.014" starttime="20210313 17:07:28.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.015" level="INFO">{u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'flags': {u'flag': [u'\\Recent', u'\\Delivered'], u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags'}, u'path': u'/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'attributes': {u'attribute': [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}, {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}, {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}, {u'name': u'Direction', u'value': [u'In']}, {u'name': u'from', u'value': [u'tel:+9999999990']}, {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}, {u'name': u'message-context', u'value': [u'X-RCS-PM']}, {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}, {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}, {u'name': u'to', u'value': [u'tel:+8888888880']}]}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}]}}</msg>
<status status="PASS" endtime="20210313 17:07:28.016" starttime="20210313 17:07:28.015"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data['objectList']['object']}</arg>
</arguments>
<assign>
<var>${list_of_objects}</var>
</assign>
<msg timestamp="20210313 17:07:28.017" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:07:28.018" level="INFO">${list_of_objects} = 1</msg>
<status status="PASS" endtime="20210313 17:07:28.018" starttime="20210313 17:07:28.016"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.021" starttime="20210313 17:07:28.019"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.021" starttime="20210313 17:07:28.018"></status>
</kw>
<kw type="for" name="${index} IN RANGE [ 0 | ${list_of_objects} ]">
<kw type="foritem" name="${index} = 0">
<kw name="Get_FolderSearch_AttributesPair" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${data['objectList']['object'][${index}]['attributes']['attribute']}</arg>
</arguments>
<assign>
<var>${Attributes_pair}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${attributes}</var>
</assign>
<msg timestamp="20210313 17:07:28.025" level="INFO">${attributes} = [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be'...</msg>
<status status="PASS" endtime="20210313 17:07:28.025" starttime="20210313 17:07:28.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${Attributes_pair}</var>
</assign>
<msg timestamp="20210313 17:07:28.027" level="INFO">${Attributes_pair} = {}</msg>
<status status="PASS" endtime="20210313 17:07:28.027" starttime="20210313 17:07:28.026"></status>
</kw>
<kw type="for" name="${pair} IN [ @{attributes} ]">
<kw type="foritem" name="${pair} = {u'name': u'Charset', u'value': [u'UTF-8']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.030" level="INFO">Charset</msg>
<status status="PASS" endtime="20210313 17:07:28.031" starttime="20210313 17:07:28.028"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.032" level="INFO">[u'UTF-8']</msg>
<status status="PASS" endtime="20210313 17:07:28.033" starttime="20210313 17:07:28.031"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.035" starttime="20210313 17:07:28.033"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.035" starttime="20210313 17:07:28.028"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.037" level="INFO">Content-Transfer-Encoding</msg>
<status status="PASS" endtime="20210313 17:07:28.037" starttime="20210313 17:07:28.036"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.039" level="INFO">[u'quoted-printable']</msg>
<status status="PASS" endtime="20210313 17:07:28.039" starttime="20210313 17:07:28.038"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.042" starttime="20210313 17:07:28.040"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.042" starttime="20210313 17:07:28.035"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.044" level="INFO">Contribution-ID</msg>
<status status="PASS" endtime="20210313 17:07:28.044" starttime="20210313 17:07:28.043"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.046" level="INFO">[u'e0a1029e-a48b-4ca6-b185-299dada439be']</msg>
<status status="PASS" endtime="20210313 17:07:28.046" starttime="20210313 17:07:28.045"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.048" starttime="20210313 17:07:28.047"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.048" starttime="20210313 17:07:28.042"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.050" level="INFO">Conversation-ID</msg>
<status status="PASS" endtime="20210313 17:07:28.050" starttime="20210313 17:07:28.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.052" level="INFO">[u'2dbc584e-fc46-4a37-9a56-c2b93246d788']</msg>
<status status="PASS" endtime="20210313 17:07:28.052" starttime="20210313 17:07:28.051"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.054" starttime="20210313 17:07:28.052"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.054" starttime="20210313 17:07:28.049"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.055" level="INFO">date</msg>
<status status="PASS" endtime="20210313 17:07:28.055" starttime="20210313 17:07:28.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.057" level="INFO">[u'2021-03-13T17:06:25Z']</msg>
<status status="PASS" endtime="20210313 17:07:28.057" starttime="20210313 17:07:28.056"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.059" starttime="20210313 17:07:28.058"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.059" starttime="20210313 17:07:28.054"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Direction', u'value': [u'In']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.061" level="INFO">Direction</msg>
<status status="PASS" endtime="20210313 17:07:28.061" starttime="20210313 17:07:28.060"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.063" level="INFO">[u'In']</msg>
<status status="PASS" endtime="20210313 17:07:28.063" starttime="20210313 17:07:28.062"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.065" starttime="20210313 17:07:28.063"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.065" starttime="20210313 17:07:28.059"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'from', u'value': [u'tel:+9999999990']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.067" level="INFO">from</msg>
<status status="PASS" endtime="20210313 17:07:28.067" starttime="20210313 17:07:28.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.068" level="INFO">[u'tel:+9999999990']</msg>
<status status="PASS" endtime="20210313 17:07:28.068" starttime="20210313 17:07:28.067"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.070" starttime="20210313 17:07:28.069"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.071" starttime="20210313 17:07:28.065"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.072" level="INFO">IMDN-Message-ID</msg>
<status status="PASS" endtime="20210313 17:07:28.072" starttime="20210313 17:07:28.071"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.073" level="INFO">[u'37857c02-005f-9b17-9322-b8423992923a']</msg>
<status status="PASS" endtime="20210313 17:07:28.074" starttime="20210313 17:07:28.073"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.076" starttime="20210313 17:07:28.074"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.076" starttime="20210313 17:07:28.071"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'message-context', u'value': [u'X-RCS-PM']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.077" level="INFO">message-context</msg>
<status status="PASS" endtime="20210313 17:07:28.077" starttime="20210313 17:07:28.076"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.079" level="INFO">[u'X-RCS-PM']</msg>
<status status="PASS" endtime="20210313 17:07:28.079" starttime="20210313 17:07:28.078"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.082" starttime="20210313 17:07:28.080"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.082" starttime="20210313 17:07:28.076"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.084" level="INFO">P-Asserted-Service</msg>
<status status="PASS" endtime="20210313 17:07:28.085" starttime="20210313 17:07:28.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.086" level="INFO">[u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']</msg>
<status status="PASS" endtime="20210313 17:07:28.086" starttime="20210313 17:07:28.085"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.088" starttime="20210313 17:07:28.087"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.089" starttime="20210313 17:07:28.082"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.090" level="INFO">textcontent</msg>
<status status="PASS" endtime="20210313 17:07:28.090" starttime="20210313 17:07:28.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.091" level="INFO">[u'This is the new message we are depositing to test $@#^&amp;*!0123456789']</msg>
<status status="PASS" endtime="20210313 17:07:28.092" starttime="20210313 17:07:28.091"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.094" starttime="20210313 17:07:28.092"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.094" starttime="20210313 17:07:28.089"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'to', u'value': [u'tel:+8888888880']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.096" level="INFO">to</msg>
<status status="PASS" endtime="20210313 17:07:28.096" starttime="20210313 17:07:28.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.097" level="INFO">[u'tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:28.097" starttime="20210313 17:07:28.096"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.099" starttime="20210313 17:07:28.098"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.099" starttime="20210313 17:07:28.095"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.099" starttime="20210313 17:07:28.027"></status>
</kw>
<msg timestamp="20210313 17:07:28.100" level="INFO">${Attributes_pair} = {u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788...</msg>
<status status="PASS" endtime="20210313 17:07:28.101" starttime="20210313 17:07:28.022"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.102" level="INFO">{u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788'], u'date': [u'2021-03-13T17:06:25Z'], u'Direction': [u'In'], u'from': [u'tel:+9999999990'], u'IMDN-Message-ID': [u'37857c02-005f-9b17-9322-b8423992923a'], u'message-context': [u'X-RCS-PM'], u'P-Asserted-Service': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg'], u'textcontent': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789'], u'to': [u'tel:+8888888880']}</msg>
<status status="PASS" endtime="20210313 17:07:28.102" starttime="20210313 17:07:28.101"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${obj_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:28.104" level="INFO">${obj_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:28.104" starttime="20210313 17:07:28.103"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey1}%3d%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_resourceURL}</var>
</assign>
<msg timestamp="20210313 17:07:28.106" level="INFO">${obj_resourceURL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:28.106" starttime="20210313 17:07:28.105"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/${RCS_PARENT_PATH}/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_Folderpath}</var>
</assign>
<msg timestamp="20210313 17:07:28.108" level="INFO">${obj_Folderpath} = /RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:28.108" starttime="20210313 17:07:28.107"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.111" starttime="20210313 17:07:28.109"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.111" starttime="20210313 17:07:28.108"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.115" starttime="20210313 17:07:28.113"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.115" starttime="20210313 17:07:28.112"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.118" starttime="20210313 17:07:28.116"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.118" starttime="20210313 17:07:28.115"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.120" starttime="20210313 17:07:28.119"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.121" starttime="20210313 17:07:28.118"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.124" starttime="20210313 17:07:28.122"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.124" starttime="20210313 17:07:28.121"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.129" starttime="20210313 17:07:28.127"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.129" starttime="20210313 17:07:28.125"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.130" starttime="20210313 17:07:28.124"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.133" starttime="20210313 17:07:28.131"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.133" starttime="20210313 17:07:28.130"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.135" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.136" starttime="20210313 17:07:28.135"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.136" starttime="20210313 17:07:28.134"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.139" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.139" starttime="20210313 17:07:28.137"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.139" starttime="20210313 17:07:28.137"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.142" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.143" starttime="20210313 17:07:28.140"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.143" starttime="20210313 17:07:28.139"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.145" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.145" starttime="20210313 17:07:28.144"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.145" starttime="20210313 17:07:28.143"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.148" starttime="20210313 17:07:28.147"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.148" starttime="20210313 17:07:28.146"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.151" starttime="20210313 17:07:28.149"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.151" starttime="20210313 17:07:28.149"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.153" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.153" starttime="20210313 17:07:28.152"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.154" starttime="20210313 17:07:28.151"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.156" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.156" starttime="20210313 17:07:28.155"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.156" starttime="20210313 17:07:28.154"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.159" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.159" starttime="20210313 17:07:28.158"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.159" starttime="20210313 17:07:28.157"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.162" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.162" starttime="20210313 17:07:28.161"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.162" starttime="20210313 17:07:28.160"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.167" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:28.167" starttime="20210313 17:07:28.166"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.167" starttime="20210313 17:07:28.165"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.168" starttime="20210313 17:07:28.163"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.171" starttime="20210313 17:07:28.170"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.172" starttime="20210313 17:07:28.169"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.172" starttime="20210313 17:07:28.168"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:28.173" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:28.173" starttime="20210313 17:07:28.172"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:28.175" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:28.175" starttime="20210313 17:07:28.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${delivered_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:28.177" level="INFO">${delivered_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:28.177" starttime="20210313 17:07:28.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${read_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${read_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:28.179" level="INFO">${read_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:28.179" starttime="20210313 17:07:28.177"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.180" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:28.180" starttime="20210313 17:07:28.179"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.181" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:28.182" starttime="20210313 17:07:28.181"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.183" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:28.183" starttime="20210313 17:07:28.182"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.184" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:28.184" starttime="20210313 17:07:28.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.185" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:28.186" starttime="20210313 17:07:28.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.187" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:28.187" starttime="20210313 17:07:28.186"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.190" starttime="20210313 17:07:28.189"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.191" starttime="20210313 17:07:28.187"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.194" starttime="20210313 17:07:28.192"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.194" starttime="20210313 17:07:28.191"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.197" starttime="20210313 17:07:28.196"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.198" starttime="20210313 17:07:28.195"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.198" starttime="20210313 17:07:28.021"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.198" starttime="20210313 17:07:28.021"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.198" starttime="20210313 17:07:28.000"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.198" starttime="20210313 17:07:27.999"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.203" starttime="20210313 17:07:28.201"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:28.205" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:28.273" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:28.274" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:28.274" starttime="20210313 17:07:28.204"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:28.280" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:28.281" starttime="20210313 17:07:28.275"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:28.328" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:28.328" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:28.329" starttime="20210313 17:07:28.282"></status>
</kw>
<msg timestamp="20210313 17:07:28.329" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:28.330" starttime="20210313 17:07:28.200"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.333" starttime="20210313 17:07:28.332"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:28.334" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:28.404" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:28.404" starttime="20210313 17:07:28.333"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.404" starttime="20210313 17:07:28.330"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.407" starttime="20210313 17:07:28.406"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:28.408" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:28.548" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:28.549" starttime="20210313 17:07:28.407"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:28.551" level="INFO">5626 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:28.551" starttime="20210313 17:07:28.549"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:28.610" level="INFO">11266 packets received by filter
136 packets dropped by kernel
date
Sun Mar 14 00:01:27 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterUpdatingtheFlagtoRecent"/"FolderSearchAfterUpdatingtheFlagtoRecent".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterUpdatingtheFlagtoRecent"/"FolderSearchAfterUpdatingtheFlagtoRecent".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:28.611" starttime="20210313 17:07:28.552"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.611" starttime="20210313 17:07:28.405"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.614" starttime="20210313 17:07:28.613"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.614" starttime="20210313 17:07:28.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.644" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:07:28.644" starttime="20210313 17:07:28.616"></status>
</kw>
<msg timestamp="20210313 17:07:28.645" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:07:28.645" starttime="20210313 17:07:28.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.647" starttime="20210313 17:07:28.646"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:28.647" starttime="20210313 17:07:28.199"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:28.647" critical="yes" starttime="20210313 17:07:25.873"></status>
</test>
<test id="s1-t12" name="Update_Msg_from_Recent_to_Seen">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.654" starttime="20210313 17:07:28.653"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:28.655" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:28.713" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:28.714" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:28.714" starttime="20210313 17:07:28.654"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:28.758" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:28.759" starttime="20210313 17:07:28.715"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:28.776" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:28.777" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:28.777" starttime="20210313 17:07:28.759"></status>
</kw>
<msg timestamp="20210313 17:07:28.778" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:28.778" starttime="20210313 17:07:28.652"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.779" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:28.779" starttime="20210313 17:07:28.778"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:28.782" starttime="20210313 17:07:28.781"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:28.783" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:28.840" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:28.840" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:28.841" starttime="20210313 17:07:28.782"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:28.843" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:28.972" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:28.973" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:28.973" starttime="20210313 17:07:28.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.976" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:28.976" starttime="20210313 17:07:28.974"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:28.977" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:28.978" starttime="20210313 17:07:28.977"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:28.979" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:28.979" starttime="20210313 17:07:28.978"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:28.980" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:28.981" starttime="20210313 17:07:28.980"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:29.015" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:29.016" starttime="20210313 17:07:28.981"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:29.037" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:29.037" starttime="20210313 17:07:29.016"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:29.044" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:29.044" starttime="20210313 17:07:29.038"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:29.060" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:29.061" starttime="20210313 17:07:29.044"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:29.062" starttime="20210313 17:07:28.780"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:29.067" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:29.067" starttime="20210313 17:07:29.065"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:29.069" starttime="20210313 17:07:29.068"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:29.071" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:29.153" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:29.153" starttime="20210313 17:07:29.070"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:29.232" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_ Msg_from_Recent_to_Seen"</msg>
<status status="PASS" endtime="20210313 17:07:29.233" starttime="20210313 17:07:29.154"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:29.235" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:29.235" starttime="20210313 17:07:29.233"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:29.253" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Update_Msg_from_Recent_to_Seen"/"Update_Msg_from_Recent _to_Seen".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:29.254" starttime="20210313 17:07:29.236"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:29.261" level="INFO">[1] 5395
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:29.262" starttime="20210313 17:07:29.255"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:29.263" starttime="20210313 17:07:29.063"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:29.269" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:29.269" starttime="20210313 17:07:29.266"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:29.271" starttime="20210313 17:07:29.269"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:29.272" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:29.349" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:29.349" starttime="20210313 17:07:29.271"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:29.396" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_ Msg_from_Recent_to_Seen"</msg>
<status status="PASS" endtime="20210313 17:07:29.397" starttime="20210313 17:07:29.350"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:29.415" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:29.416" starttime="20210313 17:07:29.398"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:29.429" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Update_Msg_from_Recent_to_Seen"/"Update_Msg_from_Recent_to_Seen".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:29.430" starttime="20210313 17:07:29.416"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:29.440" level="INFO">[2] 5422
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:29.440" starttime="20210313 17:07:29.430"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:29.441" starttime="20210313 17:07:29.263"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:29.441" starttime="20210313 17:07:28.651"></status>
</kw>
<kw name="UpdateFlagToMessage" library="mStore_Digits_TMO_resources">
<arguments>
<arg>flag=Seen</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ResourceURI}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:29.444" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:29.444" starttime="20210313 17:07:29.443"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}/flags/%5C${flag}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:29.448" level="INFO">Resetting dropped connection: 10.10.219.141</msg>
<msg timestamp="20210313 17:07:30.237" level="INFO">Put Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags/%5CSeen, data=None,                     headers={'User-Agent': ''}, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:30.238" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:30.238" starttime="20210313 17:07:29.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:30.239" level="INFO">201</msg>
<status status="PASS" endtime="20210313 17:07:30.240" starttime="20210313 17:07:30.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:30.241" level="INFO"></msg>
<status status="PASS" endtime="20210313 17:07:30.241" starttime="20210313 17:07:30.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:30.243" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:28 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:yPRtdLDLQ3INRSwb96ftHmkFyGqMzmrS-slot:1-instId:2-subOid:27-time:2021-03-14T00:01:29Z-localFqdn:10.10.219.141', 'content-length': '0', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:30.243" starttime="20210313 17:07:30.242"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:30.245" level="INFO">${response_status_code} = 201</msg>
<status status="PASS" endtime="20210313 17:07:30.245" starttime="20210313 17:07:30.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>201</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:30.246" starttime="20210313 17:07:30.245"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:30.246" starttime="20210313 17:07:29.442"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20210313 17:07:31.248" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20210313 17:07:31.249" starttime="20210313 17:07:30.247"></status>
</kw>
<kw name="GetServicerequest" library="mStore_Generic_resources">
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<kw name="Get One Request" library="Socket_PNS_NMS">
<arguments>
<arg>${service}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<msg timestamp="20210313 17:07:31.253" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c29a6e0&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.253" starttime="20210313 17:07:31.252"></status>
</kw>
<msg timestamp="20210313 17:07:31.254" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c29a6e0&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.254" starttime="20210313 17:07:31.249"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.255" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c29a6e0&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.255" starttime="20210313 17:07:31.254"></status>
</kw>
<kw name="GetRequestData" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${headers}</var>
<var>${req_body}</var>
<var>${version}</var>
</assign>
<kw name="Read Request Body" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:31.259" level="INFO">${data} = (&lt;mimetools.Message instance at 0x7fa45c29e5a8&gt;, '{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype...</msg>
<status status="PASS" endtime="20210313 17:07:31.259" starttime="20210313 17:07:31.257"></status>
</kw>
<msg timestamp="20210313 17:07:31.259" level="INFO">${headers} = Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-slot:0-instId:1-subOid:65658-time:2021-03-14...</msg>
<msg timestamp="20210313 17:07:31.260" level="INFO">${req_body} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:29.801","nm...</msg>
<msg timestamp="20210313 17:07:31.260" level="INFO">${version} = HTTP/1.1</msg>
<status status="PASS" endtime="20210313 17:07:31.260" starttime="20210313 17:07:31.256"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ValidateChatPNSNotfn</arg>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=SEEN,DELIVERED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
<arg>uid=${UID}</arg>
</arguments>
<assign>
<var>${pns_status}</var>
<var>${value}</var>
</assign>
<kw name="ValidateChatPNSNotfn" library="mStore_Digits_TMO_resources">
<arguments>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=SEEN,DELIVERED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>pns_subtype=ChatS</arg>
<arg>folder_path=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
<arg>uid=${UID}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.266" level="INFO">Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-slot:0-instId:1-subOid:65658-time:2021-03-14T00:01:29.000-localFqdn:10.10.219.141
Host: pns.server.mavenir1.com:8060
Content-Length: 1618
</msg>
<status status="PASS" endtime="20210313 17:07:31.266" starttime="20210313 17:07:31.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.267" level="INFO">{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:29.801","nmsEventList":{"nmsEvent":[{"changedObject":{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","flags":{"flag":["\\SEEN"]},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a","message":{"store":"RCSMessageStore/Chat/8888888880/","objectURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","direction":"In","message-time":"2021-03-13T09:06:25.000-08:00","status":"SEEN,DELIVERED","sender":"tel:+9999999990","recipients":[{"uri":"tel:+8888888880"}],"imdn-message-id":"37857c02-005f-9b17-9322-b8423992923a","content":[{"content-type":"text/plain","content-size":"67","charset":"UTF-8","content-transfer-encoding":"quoted-printable","content":"This is the new message we are depositing to test $@#^&amp;*!0123456789","rcs-data":{"sip-call-id":"005056884776-4d72-eb161700-1e2-571fa736-a0e46","feature-tag":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","p-asserted-service":"urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg","contribution-id":"e0a1029e-a48b-4ca6-b185-299dada439be","conversation-id":"2dbc584e-fc46-4a37-9a56-c2b93246d788"}}]}}}]}}}</msg>
<status status="PASS" endtime="20210313 17:07:31.268" starttime="20210313 17:07:31.267"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_resource_url}</var>
</assign>
<msg timestamp="20210313 17:07:31.269" level="INFO">${pns_resource_url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:31.270" starttime="20210313 17:07:31.268"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_object_Url}</var>
</assign>
<msg timestamp="20210313 17:07:31.271" level="INFO">${pns_object_Url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:31.271" starttime="20210313 17:07:31.270"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${pns_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:31.273" level="INFO">${pns_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:31.273" starttime="20210313 17:07:31.272"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:31.274" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:29.801","nm...</msg>
<status status="PASS" endtime="20210313 17:07:31.274" starttime="20210313 17:07:31.273"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>\\</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:31.276" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatS","pns-time":"2021-03-14T00:01:29.801","nm...</msg>
<status status="PASS" endtime="20210313 17:07:31.276" starttime="20210313 17:07:31.275"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''',strict=False)</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_out}</var>
</assign>
<msg timestamp="20210313 17:07:31.278" level="INFO">${json_out} = {u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4...</msg>
<status status="PASS" endtime="20210313 17:07:31.278" starttime="20210313 17:07:31.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_out}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.279" level="INFO">{u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'changedObject': {u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'message': {u'status': u'SEEN,DELIVERED', u'message-time': u'2021-03-13T09:06:25.000-08:00', u'direction': u'In', u'sender': u'tel:+9999999990', u'recipients': [{u'uri': u'tel:+8888888880'}], u'imdn-message-id': u'37857c02-005f-9b17-9322-b8423992923a', u'objectURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'content': [{u'content-transfer-encoding': u'quoted-printable', u'rcs-data': {u'sip-call-id': u'005056884776-4d72-eb161700-1e2-571fa736-a0e46', u'p-asserted-service': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'conversation-id': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'feature-tag': u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg', u'contribution-id': u'e0a1029e-a48b-4ca6-b185-299dada439be'}, u'charset': u'UTF-8', u'content-size': u'67', u'content': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'content-type': u'text/plain'}], u'store': u'RCSMessageStore/Chat/8888888880/'}, u'flags': {u'flag': [u'SEEN']}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}}]}, u'pns-subtype': u'ChatS', u'recipients': [{u'uri': u'tel:+8888888880'}], u'pns-time': u'2021-03-14T00:01:29.801', u'pns-type': u'RCSPage', u'serviceName': u'SyncApp', u'TTL': u'600', u'channel': u'pns_channe'}}</msg>
<status status="PASS" endtime="20210313 17:07:31.280" starttime="20210313 17:07:31.279"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PNS_OBJECT_URL}</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.282" level="INFO">${PNS_OBJECT_URL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:31.282" starttime="20210313 17:07:31.280"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>https://${service_root_path}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${OBJECT_URL}</var>
</assign>
<msg timestamp="20210313 17:07:31.284" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:31.284" starttime="20210313 17:07:31.282"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${OBJECT_URL}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.285" level="INFO">${OBJECT_URL} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:31.285" starttime="20210313 17:07:31.284"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:31.286" level="INFO">${status_msg} = [u'SEEN', u'DELIVERED']</msg>
<status status="PASS" endtime="20210313 17:07:31.286" starttime="20210313 17:07:31.286"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:31.288" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:07:31.288" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:07:31.288" starttime="20210313 17:07:31.287"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${len_response_body}</var>
</assign>
<msg timestamp="20210313 17:07:31.289" level="INFO">Length is 1618</msg>
<msg timestamp="20210313 17:07:31.289" level="INFO">${len_response_body} = 1618</msg>
<status status="PASS" endtime="20210313 17:07:31.289" starttime="20210313 17:07:31.288"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.293" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.293" starttime="20210313 17:07:31.291"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.293" starttime="20210313 17:07:31.290"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.293" starttime="20210313 17:07:31.290"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.295" starttime="20210313 17:07:31.295"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.296" starttime="20210313 17:07:31.294"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.300" starttime="20210313 17:07:31.297"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.301" starttime="20210313 17:07:31.296"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.305" starttime="20210313 17:07:31.303"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.305" starttime="20210313 17:07:31.302"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.305" starttime="20210313 17:07:31.301"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.307" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.307" starttime="20210313 17:07:31.306"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.307" starttime="20210313 17:07:31.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword and Continue on Failure</arg>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.323" level="FAIL">Resolving variable '${headers['X-mStoreFE-Addr']}' failed: Variable '${headers}' not found. Did you mean:
    ${pns_headers}</msg>
<status status="FAIL" endtime="20210313 17:07:31.323" starttime="20210313 17:07:31.310"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:31.324" starttime="20210313 17:07:31.309"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.324" starttime="20210313 17:07:31.308"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.327" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.327" starttime="20210313 17:07:31.325"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.327" starttime="20210313 17:07:31.324"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.329" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.330" starttime="20210313 17:07:31.328"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.330" starttime="20210313 17:07:31.327"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.332" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.332" starttime="20210313 17:07:31.331"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.332" starttime="20210313 17:07:31.330"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.335" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.335" starttime="20210313 17:07:31.334"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.335" starttime="20210313 17:07:31.333"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.337" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.337" starttime="20210313 17:07:31.336"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.337" starttime="20210313 17:07:31.335"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.340" starttime="20210313 17:07:31.339"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.340" starttime="20210313 17:07:31.338"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['parentFolder']}</arg>
<arg>${pns_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.342" starttime="20210313 17:07:31.341"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.342" starttime="20210313 17:07:31.340"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][0]}</arg>
<arg>${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.346" starttime="20210313 17:07:31.344"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.346" starttime="20210313 17:07:31.343"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}</arg>
<arg>${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20210313 17:07:31.350" level="FAIL">Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:07:31.350" starttime="20210313 17:07:31.349"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:31.351" starttime="20210313 17:07:31.348"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:31.351" starttime="20210313 17:07:31.346"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.354" starttime="20210313 17:07:31.352"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.354" starttime="20210313 17:07:31.351"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.357" starttime="20210313 17:07:31.356"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.358" starttime="20210313 17:07:31.355"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['store']}</arg>
<arg>${folder_path}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.361" starttime="20210313 17:07:31.359"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.361" starttime="20210313 17:07:31.358"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.364" starttime="20210313 17:07:31.362"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.364" starttime="20210313 17:07:31.362"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.368" starttime="20210313 17:07:31.366"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.368" starttime="20210313 17:07:31.365"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.372" starttime="20210313 17:07:31.370"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.372" starttime="20210313 17:07:31.369"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.375" starttime="20210313 17:07:31.373"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.376" starttime="20210313 17:07:31.372"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.379" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.379" starttime="20210313 17:07:31.377"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.379" starttime="20210313 17:07:31.376"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.383" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.384" starttime="20210313 17:07:31.382"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.384" starttime="20210313 17:07:31.381"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.384" starttime="20210313 17:07:31.380"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.386" starttime="20210313 17:07:31.385"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.387" starttime="20210313 17:07:31.384"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' != 'deposit'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:31.388" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:31.388" starttime="20210313 17:07:31.387"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:31.390" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:31.390" starttime="20210313 17:07:31.389"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'delivered'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.393" starttime="20210313 17:07:31.391"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.393" starttime="20210313 17:07:31.390"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.395" starttime="20210313 17:07:31.394"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.396" starttime="20210313 17:07:31.393"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_pns}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_pns}' == 'displayed'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.399" starttime="20210313 17:07:31.397"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.399" starttime="20210313 17:07:31.396"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-type']}</arg>
<arg>${CHAT_CONTENT_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.402" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.402" starttime="20210313 17:07:31.400"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.402" starttime="20210313 17:07:31.399"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-size']}</arg>
<arg>${CHAT_CONTENT_LENGTH}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.405" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.405" starttime="20210313 17:07:31.403"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.405" starttime="20210313 17:07:31.403"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content']}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.408" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.408" starttime="20210313 17:07:31.406"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.408" starttime="20210313 17:07:31.406"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['content-transfer-encoding']}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.411" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.411" starttime="20210313 17:07:31.409"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.411" starttime="20210313 17:07:31.409"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['charset']}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.414" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.415" starttime="20210313 17:07:31.413"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.415" starttime="20210313 17:07:31.412"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['contribution-id']}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.419" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.419" starttime="20210313 17:07:31.417"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.419" starttime="20210313 17:07:31.416"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['conversation-id']}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.422" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.423" starttime="20210313 17:07:31.421"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.423" starttime="20210313 17:07:31.420"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['p-asserted-service']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.426" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.427" starttime="20210313 17:07:31.425"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.427" starttime="20210313 17:07:31.424"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['feature-tag']}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.430" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.431" starttime="20210313 17:07:31.428"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.431" starttime="20210313 17:07:31.427"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['message']['content'][0]['rcs-data']['sip-call-id']}</arg>
<arg>${X_SIP_CALLID}</arg>
</arguments>
<msg timestamp="20210313 17:07:31.434" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:31.434" starttime="20210313 17:07:31.432"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.434" starttime="20210313 17:07:31.431"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:31.435" starttime="20210313 17:07:31.262"></status>
</kw>
<msg timestamp="20210313 17:07:31.435" level="INFO">${pns_status} = FAIL</msg>
<msg timestamp="20210313 17:07:31.435" level="INFO">${value} = Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="PASS" endtime="20210313 17:07:31.435" starttime="20210313 17:07:31.261"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="SendResponse" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Sendresponse Code" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
<arg>${response_code}</arg>
<arg>${message}</arg>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.442" starttime="20210313 17:07:31.440"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.442" starttime="20210313 17:07:31.439"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.443" starttime="20210313 17:07:31.437"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:31.443" starttime="20210313 17:07:31.436"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_original_folder_timestamp_CHAT</arg>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>delivered=1</arg>
</arguments>
<assign>
<var>${creation_tuid}</var>
<var>${modification_tuid}</var>
</assign>
<kw name="ValidateCassandra_messages_by_original_folder_timestamp_CHAT" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:31.448" starttime="20210313 17:07:31.447"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_original_folder_timestamp where userid='${userId}' AND folderkey='${folderkey}' AND creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:32.103" level="INFO">SELECT json * from messages_by_original_folder_timestam p where userid='4feb706c-8458-11eb-b7ec-005056ae42da' AND folderkey='UkNTTWVzc2F nZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' AND creation_tuid=51b3d2e1-8458-11eb-83b6-5d6 742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:07:32.103" starttime="20210313 17:07:31.449"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:32.324" level="INFO">[json]

 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": null, "bcc": null, "blockedmsgreasoncode": "", "bodyoctets": 67, "bucketkey": null, "bulletinid": null, "cc": null, "chunksize": null, "cnsbulletinon": null, "cnsgreetingon": 0, "contentdisposition": null, "contentencoding": "quoted-printable", "contenttype": "text/plain", "contributionid": "e0a1029e-a48b-4ca6-b185-299dada439be", "conversationid": "2dbc584e-fc46-4a37-9a56-c2b93246d788", "cpim": null, "creation_ts": "2021-03-14T00:01:29.029000", "creationdate": null, "deleted": 0, "delivered": 1, "deliveredimdnlist": null, "direction": null, "draft": 0, "expirytimestamp": null, "flagged": 0, "fromheader": "tel:+9999999990", "geolocation": null, "greetingname": "Greeting", "greetingtelnumber": null, "imapmsgheaders": "Content-type: text/plain;charset=UTF-8\\r\\nDate: Sat, 13 Mar 2021 17:06:25 +0000\\r\\nMessage-Context: X-RCS-PM\\r\\nDirection: In\\r\\nTo: tel:+8888888880\\r\\nFrom: tel:+9999999990\\r\\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\\r\\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\\r\\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\\r\\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\\r\\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\\r\\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\\r\\n\\r\\n", "imdn_disposition_data": null, "imdnmessageid": "37857c02-005f-9b17-9322-b8423992923a", "inprocess": null, "internaldate": "2021-03-13T17:06:25Z", "ismodifiedevent": null, "lastmodseq": null, "mdnflag": null, "message": "This is the new message we are depositing to test $@#^&amp;*!0123456789", "messageaction": null, "messagecontext": "X-RCS-PM", "messageid": "", "messagetype": "", "messageversion": null, "mimeversion": "", "modification_tuid": "6d472660-8458-11eb-83b6-5d6742a1b2bf", "mstore_version": "vm_2_1", "nscorrelationid": null, "numberofchunks": null, "objheaders": null, "originalfolderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "payloadheaders": "", "priority": -1, "protection": null, "purgenotify": null, "purgeuuid": null, "readimdnlist": null, "recent": 0, "recordlen": null, "replytonumber": null, "requestjson": null, "returnreceiptflag": null, "rfc2822size": 1401, "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "saved": null, "seen": 1, "sensitivity": null, "smscallbacknum": null, "sourcenode": null, "storageobjtype": "", "subject": "", "swiftobjurl": "/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "swiftpointer": 0, "thumbnailcontent": null, "timezone": null, "toheader": "tel:+8888888880", "tpdata": "", "tpdatatype": "", "transcriptresult": null, "transcriptstates": null, "uid": 0, "user": null, "useractivity": null, "userdefinedflagname": "$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,", "userdefinedflagvalue": "0,0,0,0,0,0,0,", "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "xcontentpages": null, "xfuturedeliverytimestamp": null, "xorgvmuid": null}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:32.325" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:32.325" starttime="20210313 17:07:32.105"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:32.327" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:32.327" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": n...</msg>
<status status="PASS" endtime="20210313 17:07:32.327" starttime="20210313 17:07:32.326"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mboft_data}</var>
</assign>
<msg timestamp="20210313 17:07:32.329" level="INFO">${mboft_data} = {u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid...</msg>
<status status="PASS" endtime="20210313 17:07:32.330" starttime="20210313 17:07:32.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mboft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.331" level="INFO">{u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid': u'6d472660-8458-11eb-83b6-5d6742a1b2bf', u'cpim': None, u'sensitivity': None, u'smscallbacknum': None, u'contentdisposition': None, u'internaldate': u'2021-03-13T17:06:25Z', u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'flagged': 0, u'bucketkey': None, u'imdn_disposition_data': None, u'contributionid': u'e0a1029e-a48b-4ca6-b185-299dada439be', u'requestjson': None, u'xorgvmuid': None, u'bodyoctets': 67, u'userdefinedflagname': u'$DELIVERED,FAILED,SENT,MISSED,MarkNotToDelete,CNS-Greeting-On,$CPM_CallLog_EnCall,', u'subject': u'', u'delivered': 1, u'useractivity': None, u'contenttype': u'text/plain', u'mstore_version': u'vm_2_1', u'messageaction': None, u'chunksize': None, u'deleted': 0, u'contentencoding': u'quoted-printable', u'protection': None, u'cnsgreetingon': 0, u'mdnflag': None, u'xfuturedeliverytimestamp': None, u'uuid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'toheader': u'tel:+8888888880', u'nscorrelationid': None, u'readimdnlist': None, u'purgenotify': None, u'conversationid': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'objheaders': None, u'geolocation': None, u'sourcenode': None, u'cc': None, u'cnsbulletinon': None, u'imapmsgheaders': u'Content-type: text/plain;charset=UTF-8\r\nDate: Sat, 13 Mar 2021 17:06:25 +0000\r\nMessage-Context: X-RCS-PM\r\nDirection: In\r\nTo: tel:+8888888880\r\nFrom: tel:+9999999990\r\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\r\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\r\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\r\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\r\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\r\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\r\n\r\n', u'message': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'creation_ts': u'2021-03-14T00:01:29.029000', u'uid': 0, u'blockedmsgreasoncode': u'', u'lastmodseq': None, u'inprocess': None, u'priority': -1, u'draft': 0, u'purgeuuid': None, u'fromheader': u'tel:+9999999990', u'direction': None, u'storageobjtype': u'', u'deliveredimdnlist': None, u'messagecontext': u'X-RCS-PM', u'tpdatatype': u'', u'ismodifiedevent': None, u'returnreceiptflag': None, u'originalfolderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'messageversion': None, u'replytonumber': None, u'bulletinid': None, u'mimeversion': u'', u'timezone': None, u'seen': 1, u'recordlen': None, u'swiftobjurl': u'/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'imdnmessageid': u'37857c02-005f-9b17-9322-b8423992923a', u'messagetype': u'', u'thumbnailcontent': None, u'swiftpointer': 0, u'tpdata': u'', u'numberofchunks': None, u'userdefinedflagvalue': u'0,0,0,0,0,0,0,', u'user': None, u'attributes': None, u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'transcriptresult': None, u'recent': 0, u'xcontentpages': None, u'greetingtelnumber': None, u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'bcc': None, u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'creationdate': None}</msg>
<status status="PASS" endtime="20210313 17:07:32.331" starttime="20210313 17:07:32.330"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:32.334" starttime="20210313 17:07:32.333"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.334" starttime="20210313 17:07:32.332"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.338" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.339" starttime="20210313 17:07:32.336"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.339" starttime="20210313 17:07:32.335"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.342" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.342" starttime="20210313 17:07:32.340"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.342" starttime="20210313 17:07:32.340"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.347" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.347" starttime="20210313 17:07:32.345"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.347" starttime="20210313 17:07:32.344"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.347" starttime="20210313 17:07:32.343"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:32.351" starttime="20210313 17:07:32.349"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.351" starttime="20210313 17:07:32.348"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.355" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.355" starttime="20210313 17:07:32.353"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.355" starttime="20210313 17:07:32.352"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.358" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.358" starttime="20210313 17:07:32.357"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.358" starttime="20210313 17:07:32.356"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.361" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.361" starttime="20210313 17:07:32.360"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.362" starttime="20210313 17:07:32.359"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:32.366" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.367" starttime="20210313 17:07:32.363"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.367" starttime="20210313 17:07:32.362"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:32.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.370" starttime="20210313 17:07:32.369"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.371" starttime="20210313 17:07:32.368"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:32.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.373" starttime="20210313 17:07:32.372"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.373" starttime="20210313 17:07:32.371"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:32.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.376" starttime="20210313 17:07:32.375"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.376" starttime="20210313 17:07:32.374"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<msg timestamp="20210313 17:07:32.379" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.380" starttime="20210313 17:07:32.378"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.380" starttime="20210313 17:07:32.377"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:32.382" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.383" starttime="20210313 17:07:32.381"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.383" starttime="20210313 17:07:32.380"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:32.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.386" starttime="20210313 17:07:32.384"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.386" starttime="20210313 17:07:32.383"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:32.388" starttime="20210313 17:07:32.387"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.388" starttime="20210313 17:07:32.386"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:32.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:32.393" starttime="20210313 17:07:32.391"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.393" starttime="20210313 17:07:32.389"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:32.395" starttime="20210313 17:07:31.444"></status>
</kw>
<msg timestamp="20210313 17:07:32.395" level="INFO">${creation_tuid} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<msg timestamp="20210313 17:07:32.395" level="INFO">${modification_tuid} = 6d472660-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:32.395" starttime="20210313 17:07:31.443"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_root_folder_timestamp</arg>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="ValidateCassandra_messages_by_root_folder_timestamp" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=0</arg>
<arg>seen=1</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:32.402" starttime="20210313 17:07:32.401"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_root_folder_timestamp where userid='${userId}' and rootfolderkey='${rootfolderkey}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:33.038" level="INFO">SELECT json * from messages_by_root_folder_timestamp wh ere userid='4feb706c-8458-11eb-b7ec-005056ae42da' and rootfolderkey='fb830d1d-a4 a5-4f58-a3ad-740be2fd2fc6' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6742a1b2b f;</msg>
<status status="PASS" endtime="20210313 17:07:33.039" starttime="20210313 17:07:32.403"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:33.068" level="INFO">[json]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "imdn_disposition_data": null, "modification_tuid": "6d472660-8458-11eb-83b6-5d6742a1b2bf", "recent": 0, "saved": null, "seen": 1}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:33.069" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:33.069" starttime="20210313 17:07:33.040"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:33.071" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:33.071" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 0, "delivered": 1, "fol...</msg>
<status status="PASS" endtime="20210313 17:07:33.071" starttime="20210313 17:07:33.069"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mbrft_data}</var>
</assign>
<msg timestamp="20210313 17:07:33.073" level="INFO">${mbrft_data} = {u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'...</msg>
<status status="PASS" endtime="20210313 17:07:33.073" starttime="20210313 17:07:33.072"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mbrft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:33.075" level="INFO">{u'delivered': 1, u'deleted': 0, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'6d472660-8458-11eb-83b6-5d6742a1b2bf', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'seen': 1, u'saved': None, u'recent': 0}</msg>
<status status="PASS" endtime="20210313 17:07:33.075" starttime="20210313 17:07:33.074"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.078" starttime="20210313 17:07:33.077"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.078" starttime="20210313 17:07:33.075"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:33.081" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:33.081" starttime="20210313 17:07:33.079"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.082" starttime="20210313 17:07:33.079"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:33.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:33.084" starttime="20210313 17:07:33.083"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.084" starttime="20210313 17:07:33.082"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:33.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:33.087" starttime="20210313 17:07:33.086"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.087" starttime="20210313 17:07:33.085"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:33.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:33.093" starttime="20210313 17:07:33.088"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.093" starttime="20210313 17:07:33.088"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:33.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:33.099" starttime="20210313 17:07:33.096"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.099" starttime="20210313 17:07:33.094"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.105" starttime="20210313 17:07:33.101"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.105" starttime="20210313 17:07:33.100"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.110" starttime="20210313 17:07:33.108"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.111" starttime="20210313 17:07:33.107"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.111" starttime="20210313 17:07:32.397"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.112" starttime="20210313 17:07:32.396"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraIMDNMapping</arg>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="ValidateCassandraIMDNMapping" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${UID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${SUBSCRIBER_ID}_${imdn_msg_id}</arg>
</arguments>
<assign>
<var>${imdncorrelator}</var>
</assign>
<msg timestamp="20210313 17:07:33.118" level="INFO">${imdncorrelator} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:07:33.118" starttime="20210313 17:07:33.117"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.120" starttime="20210313 17:07:33.119"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from imdnmsgidmapping where userid='${userId}' and creation_tuid=${uid} LIMIT 1 ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:07:33.710" level="INFO">select json * from imdnmsgidmapping where userid='4feb7 06c-8458-11eb-b7ec-005056ae42da' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d674 2a1b2bf LIMIT 1 ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:07:33.711" starttime="20210313 17:07:33.120"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:07:33.743" level="INFO">[json]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "foldername": "RCSMessageStore/Chat/8888888880/", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "uid": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:33.743" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:33.743" starttime="20210313 17:07:33.712"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.747" starttime="20210313 17:07:33.746"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.747" starttime="20210313 17:07:33.745"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${cnt} == 0</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.748" starttime="20210313 17:07:33.747"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:07:33.750" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:07:33.750" starttime="20210313 17:07:33.749"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:07:33.752" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:33.752" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folder...</msg>
<status status="PASS" endtime="20210313 17:07:33.752" starttime="20210313 17:07:33.751"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${imdn_mapping}</var>
</assign>
<msg timestamp="20210313 17:07:33.754" level="INFO">${imdn_mapping} = {u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830...</msg>
<status status="PASS" endtime="20210313 17:07:33.754" starttime="20210313 17:07:33.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${imdn_mapping}</arg>
</arguments>
<msg timestamp="20210313 17:07:33.755" level="INFO">{u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'imdncorrelator': u'8888888880_37857c02-005f-9b17-9322-b8423992923a', u'cosid': u'10'}</msg>
<status status="PASS" endtime="20210313 17:07:33.755" starttime="20210313 17:07:33.754"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.758" starttime="20210313 17:07:33.757"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.758" starttime="20210313 17:07:33.756"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.761" starttime="20210313 17:07:33.760"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.761" starttime="20210313 17:07:33.759"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:33.764" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:33.764" starttime="20210313 17:07:33.763"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.764" starttime="20210313 17:07:33.762"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.767" starttime="20210313 17:07:33.766"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.768" starttime="20210313 17:07:33.765"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<msg timestamp="20210313 17:07:33.770" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:33.771" starttime="20210313 17:07:33.769"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.771" starttime="20210313 17:07:33.768"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.774" starttime="20210313 17:07:33.772"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.774" starttime="20210313 17:07:33.771"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.778" starttime="20210313 17:07:33.775"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.778" starttime="20210313 17:07:33.775"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.778" starttime="20210313 17:07:33.113"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.778" starttime="20210313 17:07:33.113"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<msg timestamp="20210313 17:07:33.782" level="FAIL">PNS notification verification failed 
Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" endtime="20210313 17:07:33.782" starttime="20210313 17:07:33.781"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:33.782" starttime="20210313 17:07:33.780"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:33.783" starttime="20210313 17:07:33.779"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.786" starttime="20210313 17:07:33.786"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:33.787" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:33.844" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:33.845" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:33.845" starttime="20210313 17:07:33.787"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:33.849" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:33.850" starttime="20210313 17:07:33.845"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:33.908" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:33.908" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:33.909" starttime="20210313 17:07:33.851"></status>
</kw>
<msg timestamp="20210313 17:07:33.909" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:33.909" starttime="20210313 17:07:33.785"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.912" starttime="20210313 17:07:33.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:33.913" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:33.982" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:33.983" starttime="20210313 17:07:33.913"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:33.984" starttime="20210313 17:07:33.910"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:33.989" starttime="20210313 17:07:33.988"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:33.991" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:34.143" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:34.143" starttime="20210313 17:07:33.990"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:34.145" level="INFO">16235 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:34.146" starttime="20210313 17:07:34.144"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:34.205" level="INFO">32482 packets received by filter
204 packets dropped by kernel
date
Sun Mar 14 00:01:33 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_Msg_from_Recent_to_Seen"/"Update_Msg_from_Recent_to_Seen".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Update_Msg_from_Recent_to_Seen"/"Update_Msg_from_Recent_to_Seen".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:34.206" starttime="20210313 17:07:34.147"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:34.206" starttime="20210313 17:07:33.985"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:34.210" starttime="20210313 17:07:34.208"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:34.210" starttime="20210313 17:07:34.207"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:34.213" starttime="20210313 17:07:34.212"></status>
</kw>
<msg timestamp="20210313 17:07:34.214" level="INFO">${status} = ('PASS', None)</msg>
<status status="PASS" endtime="20210313 17:07:34.214" starttime="20210313 17:07:34.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<kw name="CloseRequest" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<kw name="Close Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:34.219" starttime="20210313 17:07:34.218"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:34.220" starttime="20210313 17:07:34.216"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:34.220" starttime="20210313 17:07:34.215"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:34.221" starttime="20210313 17:07:33.783"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="FAIL" endtime="20210313 17:07:34.222" critical="yes" starttime="20210313 17:07:28.649">PNS notification verification failed 
Resolving variable '${json_out['push-message']['nmsEventList']['nmsEvent'][0]['changedObject']['flags']['flag'][1]}' failed: IndexError: list index out of range</status>
</test>
<test id="s1-t13" name="FolderSearchAfterUpdatingtheFlagtoSeen">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:34.235" starttime="20210313 17:07:34.233"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:34.237" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:34.316" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:34.317" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:34.318" starttime="20210313 17:07:34.236"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:34.362" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:34.363" starttime="20210313 17:07:34.318"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:34.381" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:34.382" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:34.382" starttime="20210313 17:07:34.364"></status>
</kw>
<msg timestamp="20210313 17:07:34.382" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:34.383" starttime="20210313 17:07:34.232"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:34.384" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:34.384" starttime="20210313 17:07:34.383"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:34.387" starttime="20210313 17:07:34.386"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:34.389" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:34.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:34.448" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:34.448" starttime="20210313 17:07:34.388"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:34.450" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:34.571" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:34.572" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:34.574" starttime="20210313 17:07:34.449"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:34.575" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:34.576" starttime="20210313 17:07:34.574"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:34.577" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:34.577" starttime="20210313 17:07:34.576"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:34.578" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:34.579" starttime="20210313 17:07:34.578"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:34.580" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:34.581" starttime="20210313 17:07:34.579"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:34.615" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:34.616" starttime="20210313 17:07:34.581"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:34.640" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:34.640" starttime="20210313 17:07:34.617"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:34.648" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:34.649" starttime="20210313 17:07:34.642"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:34.666" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:34.666" starttime="20210313 17:07:34.649"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:34.667" starttime="20210313 17:07:34.385"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:34.671" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:34.671" starttime="20210313 17:07:34.670"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:34.673" starttime="20210313 17:07:34.672"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:34.674" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:34.751" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:34.751" starttime="20210313 17:07:34.674"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:34.789" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterUpdatingtheFlagtoSeen"</msg>
<status status="PASS" endtime="20210313 17:07:34.789" starttime="20210313 17:07:34.752"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:34.809" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:34.809" starttime="20210313 17:07:34.790"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:34.824" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterUpdatingtheFlagtoSeen"/"FolderSearchAf terUpdatingtheFlagtoSeen".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:34.825" starttime="20210313 17:07:34.810"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:34.835" level="INFO">[1] 5585
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:34.835" starttime="20210313 17:07:34.826"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:34.835" starttime="20210313 17:07:34.667"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:34.840" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:34.840" starttime="20210313 17:07:34.838"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:34.841" starttime="20210313 17:07:34.840"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:34.842" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:34.920" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:34.920" starttime="20210313 17:07:34.842"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:34.969" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterUpdatingtheFlagtoSeen"</msg>
<status status="PASS" endtime="20210313 17:07:34.970" starttime="20210313 17:07:34.921"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:34.985" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:34.985" starttime="20210313 17:07:34.971"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:34.998" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"FolderSearchAfterUpdatingtheFlagtoSeen"/"FolderSearchAfterUpdatingtheFlag toSeen".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:34.999" starttime="20210313 17:07:34.986"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:35.011" level="INFO">[2] 5613
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:35.011" starttime="20210313 17:07:34.999"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:35.011" starttime="20210313 17:07:34.836"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:35.012" starttime="20210313 17:07:34.228"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Folder search after seeing the message"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:35.014" starttime="20210313 17:07:35.013"></status>
</kw>
<kw name="FolderSearch" library="mStore_Digits_TMO_resources">
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>http://${server_root_path}${oem_host}${userId}/folders/${folderkey}</arg>
</arguments>
<assign>
<var>${FOLDER_SEARCH_RESOURCE_URL}</var>
</assign>
<msg timestamp="20210313 17:07:35.018" level="INFO">${FOLDER_SEARCH_RESOURCE_URL} = http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:07:35.018" starttime="20210313 17:07:35.017"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${obj_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:35.020" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:07:35.021" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"${FOLDER_SEARCH_RESOURCE_URL}"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
    ...</msg>
<status status="PASS" endtime="20210313 17:07:35.021" starttime="20210313 17:07:35.019"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:35.023" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"...</msg>
<status status="PASS" endtime="20210313 17:07:35.023" starttime="20210313 17:07:35.022"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${oem_host}${userId}/objects/operations/search</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:35.025" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search</msg>
<status status="PASS" endtime="20210313 17:07:35.025" starttime="20210313 17:07:35.024"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:36.326" level="INFO">Post Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search, data={
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
       "order": "Ascending"
       }
      ]
   }
  }
}

, headers={'Content-Type': 'application/json;', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:36.326" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.326" starttime="20210313 17:07:35.026"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:36.329" level="INFO">${response_status_code} = 200</msg>
<status status="PASS" endtime="20210313 17:07:36.329" starttime="20210313 17:07:36.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.331" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:07:36.331" starttime="20210313 17:07:36.330"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.333" level="INFO">{"objectList":{"object":[{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","attributes":{"attribute":[{"name":"Charset","value":["UTF-8"]},{"name":"Content-Transfer-Encoding","value":["quoted-printable"]},{"name":"Contribution-ID","value":["e0a1029e-a48b-4ca6-b185-299dada439be"]},{"name":"Conversation-ID","value":["2dbc584e-fc46-4a37-9a56-c2b93246d788"]},{"name":"date","value":["2021-03-13T17:06:25Z"]},{"name":"Direction","value":["In"]},{"name":"from","value":["tel:+9999999990"]},{"name":"IMDN-Message-ID","value":["37857c02-005f-9b17-9322-b8423992923a"]},{"name":"message-context","value":["X-RCS-PM"]},{"name":"P-Asserted-Service","value":["urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"]},{"name":"textcontent","value":["This is the new message we are depositing to test $@#^&amp;*!0123456789"]},{"name":"to","value":["tel:+8888888880"]}]},"flags":{"flag":["\\Seen","\\Delivered"],"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags"},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","path":"/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a"}]}}</msg>
<status status="PASS" endtime="20210313 17:07:36.333" starttime="20210313 17:07:36.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.335" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:35 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:8oJk9erMvecXdB4XHjbMDH3PaJasFeYE-slot:1-instId:1-subOid:28-time:2021-03-14T00:01:35Z-localFqdn:10.10.219.141', 'content-length': '1510', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:36.335" starttime="20210313 17:07:36.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>${response_code}</arg>
<arg>msg="folder search is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.338" starttime="20210313 17:07:36.336"></status>
</kw>
<msg timestamp="20210313 17:07:36.338" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.339" starttime="20210313 17:07:35.015"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateChatFolderSearchResponse</arg>
<arg>response=${response}</arg>
<arg>direction=${DIRECTION}</arg>
<arg>msgStatus=seen,delivered</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="ValidateChatFolderSearchResponse" library="mStore_Digits_TMO_resources">
<arguments>
<arg>response=${response}</arg>
<arg>direction=${DIRECTION}</arg>
<arg>msgStatus=seen,delivered</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Create List</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>Copy List</arg>
<arg>${to_msg}</arg>
</arguments>
<assign>
<var>${to}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${to_msg}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.345" starttime="20210313 17:07:36.345"></status>
</kw>
<msg timestamp="20210313 17:07:36.346" level="INFO">${to} = ['tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:36.346" starttime="20210313 17:07:36.343"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:36.347" level="INFO">${status_msg} = [u'seen', u'delivered']</msg>
<status status="PASS" endtime="20210313 17:07:36.347" starttime="20210313 17:07:36.346"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:36.349" level="INFO">Length is 2</msg>
<msg timestamp="20210313 17:07:36.349" level="INFO">${len_msg_status} = 2</msg>
<status status="PASS" endtime="20210313 17:07:36.349" starttime="20210313 17:07:36.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${UID}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.351" level="INFO">51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:36.351" starttime="20210313 17:07:36.350"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.353" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:35 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:8oJk9erMvecXdB4XHjbMDH3PaJasFeYE-slot:1-instId:1-subOid:28-time:2021-03-14T00:01:35Z-localFqdn:10.10.219.141', 'content-length': '1510', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:36.353" starttime="20210313 17:07:36.351"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:36.355" level="INFO">${data} = {u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5...</msg>
<status status="PASS" endtime="20210313 17:07:36.355" starttime="20210313 17:07:36.354"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.356" level="INFO">{u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'flags': {u'flag': [u'\\Seen', u'\\Delivered'], u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags'}, u'path': u'/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'attributes': {u'attribute': [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}, {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}, {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}, {u'name': u'Direction', u'value': [u'In']}, {u'name': u'from', u'value': [u'tel:+9999999990']}, {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}, {u'name': u'message-context', u'value': [u'X-RCS-PM']}, {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}, {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}, {u'name': u'to', u'value': [u'tel:+8888888880']}]}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}]}}</msg>
<status status="PASS" endtime="20210313 17:07:36.357" starttime="20210313 17:07:36.356"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data['objectList']['object']}</arg>
</arguments>
<assign>
<var>${list_of_objects}</var>
</assign>
<msg timestamp="20210313 17:07:36.359" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:07:36.359" level="INFO">${list_of_objects} = 1</msg>
<status status="PASS" endtime="20210313 17:07:36.360" starttime="20210313 17:07:36.357"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.364" starttime="20210313 17:07:36.361"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.365" starttime="20210313 17:07:36.360"></status>
</kw>
<kw type="for" name="${index} IN RANGE [ 0 | ${list_of_objects} ]">
<kw type="foritem" name="${index} = 0">
<kw name="Get_FolderSearch_AttributesPair" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${data['objectList']['object'][${index}]['attributes']['attribute']}</arg>
</arguments>
<assign>
<var>${Attributes_pair}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${attributes}</var>
</assign>
<msg timestamp="20210313 17:07:36.370" level="INFO">${attributes} = [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be'...</msg>
<status status="PASS" endtime="20210313 17:07:36.370" starttime="20210313 17:07:36.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${Attributes_pair}</var>
</assign>
<msg timestamp="20210313 17:07:36.372" level="INFO">${Attributes_pair} = {}</msg>
<status status="PASS" endtime="20210313 17:07:36.372" starttime="20210313 17:07:36.371"></status>
</kw>
<kw type="for" name="${pair} IN [ @{attributes} ]">
<kw type="foritem" name="${pair} = {u'name': u'Charset', u'value': [u'UTF-8']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.374" level="INFO">Charset</msg>
<status status="PASS" endtime="20210313 17:07:36.374" starttime="20210313 17:07:36.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.376" level="INFO">[u'UTF-8']</msg>
<status status="PASS" endtime="20210313 17:07:36.376" starttime="20210313 17:07:36.375"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.378" starttime="20210313 17:07:36.376"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.378" starttime="20210313 17:07:36.373"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.380" level="INFO">Content-Transfer-Encoding</msg>
<status status="PASS" endtime="20210313 17:07:36.380" starttime="20210313 17:07:36.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.381" level="INFO">[u'quoted-printable']</msg>
<status status="PASS" endtime="20210313 17:07:36.381" starttime="20210313 17:07:36.380"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.383" starttime="20210313 17:07:36.382"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.383" starttime="20210313 17:07:36.378"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.386" level="INFO">Contribution-ID</msg>
<status status="PASS" endtime="20210313 17:07:36.387" starttime="20210313 17:07:36.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.388" level="INFO">[u'e0a1029e-a48b-4ca6-b185-299dada439be']</msg>
<status status="PASS" endtime="20210313 17:07:36.389" starttime="20210313 17:07:36.387"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.391" starttime="20210313 17:07:36.389"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.391" starttime="20210313 17:07:36.384"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.392" level="INFO">Conversation-ID</msg>
<status status="PASS" endtime="20210313 17:07:36.393" starttime="20210313 17:07:36.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.394" level="INFO">[u'2dbc584e-fc46-4a37-9a56-c2b93246d788']</msg>
<status status="PASS" endtime="20210313 17:07:36.394" starttime="20210313 17:07:36.393"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.396" starttime="20210313 17:07:36.395"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.396" starttime="20210313 17:07:36.391"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.398" level="INFO">date</msg>
<status status="PASS" endtime="20210313 17:07:36.398" starttime="20210313 17:07:36.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.399" level="INFO">[u'2021-03-13T17:06:25Z']</msg>
<status status="PASS" endtime="20210313 17:07:36.399" starttime="20210313 17:07:36.398"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.401" starttime="20210313 17:07:36.400"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.402" starttime="20210313 17:07:36.396"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Direction', u'value': [u'In']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.403" level="INFO">Direction</msg>
<status status="PASS" endtime="20210313 17:07:36.403" starttime="20210313 17:07:36.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.405" level="INFO">[u'In']</msg>
<status status="PASS" endtime="20210313 17:07:36.405" starttime="20210313 17:07:36.404"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.407" starttime="20210313 17:07:36.405"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.407" starttime="20210313 17:07:36.402"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'from', u'value': [u'tel:+9999999990']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.409" level="INFO">from</msg>
<status status="PASS" endtime="20210313 17:07:36.409" starttime="20210313 17:07:36.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.410" level="INFO">[u'tel:+9999999990']</msg>
<status status="PASS" endtime="20210313 17:07:36.411" starttime="20210313 17:07:36.410"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.412" starttime="20210313 17:07:36.411"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.413" starttime="20210313 17:07:36.407"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.415" level="INFO">IMDN-Message-ID</msg>
<status status="PASS" endtime="20210313 17:07:36.415" starttime="20210313 17:07:36.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.416" level="INFO">[u'37857c02-005f-9b17-9322-b8423992923a']</msg>
<status status="PASS" endtime="20210313 17:07:36.416" starttime="20210313 17:07:36.415"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.418" starttime="20210313 17:07:36.417"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.418" starttime="20210313 17:07:36.413"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'message-context', u'value': [u'X-RCS-PM']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.420" level="INFO">message-context</msg>
<status status="PASS" endtime="20210313 17:07:36.420" starttime="20210313 17:07:36.419"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.421" level="INFO">[u'X-RCS-PM']</msg>
<status status="PASS" endtime="20210313 17:07:36.422" starttime="20210313 17:07:36.420"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.423" starttime="20210313 17:07:36.422"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.423" starttime="20210313 17:07:36.419"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.425" level="INFO">P-Asserted-Service</msg>
<status status="PASS" endtime="20210313 17:07:36.425" starttime="20210313 17:07:36.424"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.427" level="INFO">[u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']</msg>
<status status="PASS" endtime="20210313 17:07:36.427" starttime="20210313 17:07:36.426"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.429" starttime="20210313 17:07:36.427"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.430" starttime="20210313 17:07:36.424"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.432" level="INFO">textcontent</msg>
<status status="PASS" endtime="20210313 17:07:36.432" starttime="20210313 17:07:36.431"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.433" level="INFO">[u'This is the new message we are depositing to test $@#^&amp;*!0123456789']</msg>
<status status="PASS" endtime="20210313 17:07:36.434" starttime="20210313 17:07:36.433"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.435" starttime="20210313 17:07:36.434"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.436" starttime="20210313 17:07:36.430"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'to', u'value': [u'tel:+8888888880']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.438" level="INFO">to</msg>
<status status="PASS" endtime="20210313 17:07:36.438" starttime="20210313 17:07:36.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.440" level="INFO">[u'tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:36.440" starttime="20210313 17:07:36.439"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.442" starttime="20210313 17:07:36.441"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.443" starttime="20210313 17:07:36.436"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.443" starttime="20210313 17:07:36.372"></status>
</kw>
<msg timestamp="20210313 17:07:36.443" level="INFO">${Attributes_pair} = {u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788...</msg>
<status status="PASS" endtime="20210313 17:07:36.443" starttime="20210313 17:07:36.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.445" level="INFO">{u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788'], u'date': [u'2021-03-13T17:06:25Z'], u'Direction': [u'In'], u'from': [u'tel:+9999999990'], u'IMDN-Message-ID': [u'37857c02-005f-9b17-9322-b8423992923a'], u'message-context': [u'X-RCS-PM'], u'P-Asserted-Service': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg'], u'textcontent': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789'], u'to': [u'tel:+8888888880']}</msg>
<status status="PASS" endtime="20210313 17:07:36.445" starttime="20210313 17:07:36.444"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${obj_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:36.447" level="INFO">${obj_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:36.447" starttime="20210313 17:07:36.446"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey1}%3d%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_resourceURL}</var>
</assign>
<msg timestamp="20210313 17:07:36.449" level="INFO">${obj_resourceURL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:36.449" starttime="20210313 17:07:36.448"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/${RCS_PARENT_PATH}/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_Folderpath}</var>
</assign>
<msg timestamp="20210313 17:07:36.451" level="INFO">${obj_Folderpath} = /RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:36.451" starttime="20210313 17:07:36.450"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.454" starttime="20210313 17:07:36.453"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.454" starttime="20210313 17:07:36.452"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.458" starttime="20210313 17:07:36.456"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.458" starttime="20210313 17:07:36.455"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.461" starttime="20210313 17:07:36.460"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.461" starttime="20210313 17:07:36.459"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.464" starttime="20210313 17:07:36.462"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.464" starttime="20210313 17:07:36.462"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.467" starttime="20210313 17:07:36.465"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.467" starttime="20210313 17:07:36.465"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.473" starttime="20210313 17:07:36.471"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.473" starttime="20210313 17:07:36.468"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.473" starttime="20210313 17:07:36.467"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.477" starttime="20210313 17:07:36.475"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.477" starttime="20210313 17:07:36.474"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.480" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.480" starttime="20210313 17:07:36.479"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.480" starttime="20210313 17:07:36.478"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.483" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.483" starttime="20210313 17:07:36.482"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.483" starttime="20210313 17:07:36.481"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.485" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.486" starttime="20210313 17:07:36.484"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.486" starttime="20210313 17:07:36.484"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.488" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.488" starttime="20210313 17:07:36.487"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.489" starttime="20210313 17:07:36.486"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.491" starttime="20210313 17:07:36.490"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.491" starttime="20210313 17:07:36.489"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.494" starttime="20210313 17:07:36.492"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.494" starttime="20210313 17:07:36.491"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.496" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.496" starttime="20210313 17:07:36.495"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.496" starttime="20210313 17:07:36.494"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.499" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.499" starttime="20210313 17:07:36.498"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.499" starttime="20210313 17:07:36.497"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.501" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.502" starttime="20210313 17:07:36.500"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.502" starttime="20210313 17:07:36.500"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.504" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.504" starttime="20210313 17:07:36.503"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.505" starttime="20210313 17:07:36.502"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.508" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:36.509" starttime="20210313 17:07:36.507"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.509" starttime="20210313 17:07:36.506"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.509" starttime="20210313 17:07:36.505"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.513" starttime="20210313 17:07:36.512"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.513" starttime="20210313 17:07:36.511"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.513" starttime="20210313 17:07:36.509"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:36.514" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:36.514" starttime="20210313 17:07:36.513"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:36.516" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:36.516" starttime="20210313 17:07:36.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${delivered_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:36.517" level="INFO">${delivered_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:36.517" starttime="20210313 17:07:36.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${read_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${read_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:36.519" level="INFO">${read_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:36.519" starttime="20210313 17:07:36.518"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.520" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:36.521" starttime="20210313 17:07:36.520"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.522" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:36.522" starttime="20210313 17:07:36.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.523" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:36.523" starttime="20210313 17:07:36.522"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.525" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:36.525" starttime="20210313 17:07:36.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.526" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:36.527" starttime="20210313 17:07:36.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.531" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:36.532" starttime="20210313 17:07:36.530"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.536" starttime="20210313 17:07:36.534"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.536" starttime="20210313 17:07:36.533"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.540" starttime="20210313 17:07:36.538"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.541" starttime="20210313 17:07:36.537"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.545" starttime="20210313 17:07:36.543"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.545" starttime="20210313 17:07:36.542"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.545" starttime="20210313 17:07:36.366"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.545" starttime="20210313 17:07:36.366"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.546" starttime="20210313 17:07:36.340"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.546" starttime="20210313 17:07:36.339"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.549" starttime="20210313 17:07:36.549"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:36.551" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:36.618" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:36.619" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:36.619" starttime="20210313 17:07:36.550"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:36.623" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:36.623" starttime="20210313 17:07:36.619"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:36.676" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:36.677" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:36.677" starttime="20210313 17:07:36.624"></status>
</kw>
<msg timestamp="20210313 17:07:36.678" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:36.678" starttime="20210313 17:07:36.548"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.680" starttime="20210313 17:07:36.679"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:36.681" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:36.759" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:36.760" starttime="20210313 17:07:36.680"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.762" starttime="20210313 17:07:36.678"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.765" starttime="20210313 17:07:36.764"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:36.769" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:36.890" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:36.890" starttime="20210313 17:07:36.767"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:36.893" level="INFO">5767 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:36.893" starttime="20210313 17:07:36.891"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:36.946" level="INFO">11520 packets received by filter
141 packets dropped by kernel
date
Sun Mar 14 00:01:35 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterUpdatingtheFlagtoSeen"/"FolderSearchAfterUpdatingtheFlagtoSeen".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterUpdatingtheFlagtoSeen"/"FolderSearchAfterUpdatingtheFlagtoSeen".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:36.947" starttime="20210313 17:07:36.894"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.947" starttime="20210313 17:07:36.762"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.951" starttime="20210313 17:07:36.949"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.951" starttime="20210313 17:07:36.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:36.983" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:07:36.983" starttime="20210313 17:07:36.953"></status>
</kw>
<msg timestamp="20210313 17:07:36.983" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:07:36.983" starttime="20210313 17:07:36.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.985" starttime="20210313 17:07:36.984"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:36.986" starttime="20210313 17:07:36.547"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:36.986" critical="yes" starttime="20210313 17:07:34.223"></status>
</test>
<test id="s1-t14" name="Delete_PM_Msg">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:36.993" starttime="20210313 17:07:36.992"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:36.994" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:37.051" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:37.053" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:37.053" starttime="20210313 17:07:36.994"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:37.095" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:37.096" starttime="20210313 17:07:37.054"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:37.114" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:37.114" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:37.115" starttime="20210313 17:07:37.097"></status>
</kw>
<msg timestamp="20210313 17:07:37.115" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:37.115" starttime="20210313 17:07:36.991"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:37.117" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:37.117" starttime="20210313 17:07:37.116"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:37.119" starttime="20210313 17:07:37.119"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:37.120" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:37.177" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:37.177" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:37.178" starttime="20210313 17:07:37.120"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:37.180" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:37.300" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:37.301" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:37.301" starttime="20210313 17:07:37.179"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:37.303" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:37.303" starttime="20210313 17:07:37.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:37.304" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:37.305" starttime="20210313 17:07:37.304"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:37.306" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:37.306" starttime="20210313 17:07:37.305"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:37.307" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:37.307" starttime="20210313 17:07:37.306"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:37.344" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:37.345" starttime="20210313 17:07:37.308"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:37.363" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:37.363" starttime="20210313 17:07:37.345"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:37.371" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:37.371" starttime="20210313 17:07:37.364"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:37.387" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:37.388" starttime="20210313 17:07:37.372"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:37.388" starttime="20210313 17:07:37.117"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:37.392" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:37.392" starttime="20210313 17:07:37.391"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:37.394" starttime="20210313 17:07:37.393"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:37.395" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:37.474" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:37.474" starttime="20210313 17:07:37.394"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:37.516" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Delete_ PM_Msg"</msg>
<status status="PASS" endtime="20210313 17:07:37.517" starttime="20210313 17:07:37.475"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:37.534" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:37.535" starttime="20210313 17:07:37.518"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:37.547" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Delete_PM_Msg"/"Delete_PM_Msg".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:37.548" starttime="20210313 17:07:37.535"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:37.558" level="INFO">[1] 5756
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:37.559" starttime="20210313 17:07:37.549"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:37.561" starttime="20210313 17:07:37.389"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:37.566" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:37.566" starttime="20210313 17:07:37.565"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:37.567" starttime="20210313 17:07:37.567"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:37.568" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:37.646" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:37.646" starttime="20210313 17:07:37.568"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:37.690" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Delete_ PM_Msg"</msg>
<status status="PASS" endtime="20210313 17:07:37.691" starttime="20210313 17:07:37.647"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:37.713" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:37.713" starttime="20210313 17:07:37.691"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:37.726" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Delete_PM_Msg"/"Delete_PM_Msg".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:37.727" starttime="20210313 17:07:37.714"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:37.736" level="INFO">[2] 5783
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:37.736" starttime="20210313 17:07:37.727"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:37.737" starttime="20210313 17:07:37.561"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:37.737" starttime="20210313 17:07:36.989"></status>
</kw>
<kw name="DeleteMsgObject" library="mStore_Digits_TMO_resources">
<arguments>
<arg>response_code=204</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ResourceURI}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:37.741" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:37.741" starttime="20210313 17:07:37.740"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:38.532" level="INFO">Delete Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf, data=(),                     headers={'User-Agent': ''}, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:38.533" level="INFO">${response} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:38.533" starttime="20210313 17:07:37.741"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${status_code}</var>
</assign>
<msg timestamp="20210313 17:07:38.536" level="INFO">${status_code} = 204</msg>
<status status="PASS" endtime="20210313 17:07:38.536" starttime="20210313 17:07:38.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:38.537" level="INFO">204</msg>
<status status="PASS" endtime="20210313 17:07:38.538" starttime="20210313 17:07:38.536"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:38.539" level="INFO"></msg>
<status status="PASS" endtime="20210313 17:07:38.540" starttime="20210313 17:07:38.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:38.541" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:36 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:8888888880Sfb80Fbribo9JXbUZhRIIZi18NsdaTRr-slot:1-instId:2-subOid:28-time:2021-03-14T00:01:37Z-localFqdn:10.10.219.141', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:38.542" starttime="20210313 17:07:38.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_code}</arg>
<arg>${status_code}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:38.543" starttime="20210313 17:07:38.542"></status>
</kw>
<msg timestamp="20210313 17:07:38.544" level="INFO">${response} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:38.544" starttime="20210313 17:07:37.738"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20210313 17:07:39.546" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20210313 17:07:39.547" starttime="20210313 17:07:38.545"></status>
</kw>
<kw name="GetServicerequest" library="mStore_Generic_resources">
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<kw name="Get One Request" library="Socket_PNS_NMS">
<arguments>
<arg>${service}</arg>
</arguments>
<assign>
<var>${request}</var>
</assign>
<msg timestamp="20210313 17:07:39.550" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286a60&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.550" starttime="20210313 17:07:39.548"></status>
</kw>
<msg timestamp="20210313 17:07:39.550" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286a60&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.550" starttime="20210313 17:07:39.547"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.552" level="INFO">${request} = &lt;socket._socketobject object at 0x7fa45c286a60&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.552" starttime="20210313 17:07:39.551"></status>
</kw>
<kw name="GetRequestData" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${headers}</var>
<var>${req_body}</var>
<var>${version}</var>
</assign>
<kw name="Read Request Body" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:39.555" level="INFO">${data} = (&lt;mimetools.Message instance at 0x308ac68&gt;, '{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"Ch...</msg>
<status status="PASS" endtime="20210313 17:07:39.555" starttime="20210313 17:07:39.554"></status>
</kw>
<msg timestamp="20210313 17:07:39.556" level="INFO">${headers} = Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-slot:0-instId:2-subOid:65658-time:2021-03-14...</msg>
<msg timestamp="20210313 17:07:39.556" level="INFO">${req_body} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatD","pns-time":"2021-03-14T00:01:38.351","nm...</msg>
<msg timestamp="20210313 17:07:39.556" level="INFO">${version} = HTTP/1.1</msg>
<status status="PASS" endtime="20210313 17:07:39.556" starttime="20210313 17:07:39.552"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ValidateChatDeletePNSNotfn</arg>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=DELETED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>pns_subtype=ChatD</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
</arguments>
<assign>
<var>${pns_status}</var>
<var>${value}</var>
</assign>
<kw name="ValidateChatDeletePNSNotfn" library="mStore_Digits_TMO_resources">
<arguments>
<arg>pns_headers=${headers}</arg>
<arg>pns_body=${req_body}</arg>
<arg>msgStatus=DELETED</arg>
<arg>direction=${DIRECTION}</arg>
<arg>pns_subtype=ChatD</arg>
<arg>push_recipients_uri=${MSG_TO}</arg>
<arg>uid=${UID}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.563" level="INFO">Accept: */*
Connection: Close
Content-Type: application/json
Authorization: Basic QWxhZGRpbjpraHVsamFzaW1zaW0=
X-mStoreFE-Addr:FEname:mStoreFE-nodeId:0-slot:0-instId:2-subOid:65658-time:2021-03-14T00:01:38.000-localFqdn:10.10.219.141
Host: pns.server.mavenir1.com:8060
Content-Length: 920
</msg>
<status status="PASS" endtime="20210313 17:07:39.563" starttime="20210313 17:07:39.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.565" level="INFO">{"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatD","pns-time":"2021-03-14T00:01:38.351","nmsEventList":{"nmsEvent":[{"deletedObject":{"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a","message":{"store":"RCSMessageStore/Chat/8888888880/","objectURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","direction":"In","message-time":"2021-03-13T09:06:25.000-08:00","status":"DELETED","sender":"tel:+9999999990","recipients":[{"uri":"tel:+8888888880"}],"imdn-message-id":"37857c02-005f-9b17-9322-b8423992923a"}}}]}}}</msg>
<status status="PASS" endtime="20210313 17:07:39.565" starttime="20210313 17:07:39.564"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_resource_url}</var>
</assign>
<msg timestamp="20210313 17:07:39.568" level="INFO">${pns_resource_url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:39.568" starttime="20210313 17:07:39.565"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${pns_object_Url}</var>
</assign>
<msg timestamp="20210313 17:07:39.570" level="INFO">${pns_object_Url} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:39.571" starttime="20210313 17:07:39.569"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${pns_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:39.573" level="INFO">${pns_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:39.573" starttime="20210313 17:07:39.571"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:39.575" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatD","pns-time":"2021-03-14T00:01:38.351","nm...</msg>
<status status="PASS" endtime="20210313 17:07:39.575" starttime="20210313 17:07:39.574"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>\\</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:39.578" level="INFO">${json_data} = {"push-message":{"TTL":"600","recipients":[{"uri":"tel:+8888888880"}],"channel":"pns_channe","serviceName":"SyncApp","pns-type":"RCSPage","pns-subtype":"ChatD","pns-time":"2021-03-14T00:01:38.351","nm...</msg>
<status status="PASS" endtime="20210313 17:07:39.578" starttime="20210313 17:07:39.576"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''',strict=False)</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${json_out}</var>
</assign>
<msg timestamp="20210313 17:07:39.580" level="INFO">${json_out} = {u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'deletedObject': {u'message': {u'status': u'DELETED', u'message-time': u'2021-03-13T09:06:25.000-08:00', u'direction': u'In', u'sender': u'tel:+999...</msg>
<status status="PASS" endtime="20210313 17:07:39.580" starttime="20210313 17:07:39.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_out}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.582" level="INFO">{u'push-message': {u'nmsEventList': {u'nmsEvent': [{u'deletedObject': {u'message': {u'status': u'DELETED', u'message-time': u'2021-03-13T09:06:25.000-08:00', u'direction': u'In', u'sender': u'tel:+9999999990', u'recipients': [{u'uri': u'tel:+8888888880'}], u'imdn-message-id': u'37857c02-005f-9b17-9322-b8423992923a', u'objectURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'store': u'RCSMessageStore/Chat/8888888880/'}, u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}}]}, u'pns-subtype': u'ChatD', u'recipients': [{u'uri': u'tel:+8888888880'}], u'pns-time': u'2021-03-14T00:01:38.351', u'pns-type': u'RCSPage', u'serviceName': u'SyncApp', u'TTL': u'600', u'channel': u'pns_channe'}}</msg>
<status status="PASS" endtime="20210313 17:07:39.582" starttime="20210313 17:07:39.581"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${pns_body}</arg>
</arguments>
<assign>
<var>${len_response_body}</var>
</assign>
<msg timestamp="20210313 17:07:39.584" level="INFO">Length is 920</msg>
<msg timestamp="20210313 17:07:39.584" level="INFO">${len_response_body} = 920</msg>
<status status="PASS" endtime="20210313 17:07:39.584" starttime="20210313 17:07:39.583"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['host']}</arg>
<arg>${PNS_SERVER_NAME}:${PNS_SERVICE_PORT}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.589" starttime="20210313 17:07:39.587"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.589" starttime="20210313 17:07:39.586"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.590" starttime="20210313 17:07:39.585"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'nms'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['host']}</arg>
<arg>${NMS_SERVER_NAME}:${NMS_SERVICE_PORT}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.592" starttime="20210313 17:07:39.591"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.593" starttime="20210313 17:07:39.590"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-type']}</arg>
<arg>${PNS_RESPONSE_CONTENT_TYPE}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.595" starttime="20210313 17:07:39.594"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.595" starttime="20210313 17:07:39.593"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${notification_type}' == 'pns'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['authorization']}</arg>
<arg>Basic ${PNS_AUTHORIZATION}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.600" starttime="20210313 17:07:39.598"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.600" starttime="20210313 17:07:39.597"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.600" starttime="20210313 17:07:39.596"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${pns_headers['content-length']}</arg>
<arg>${len_response_body}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.604" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.604" starttime="20210313 17:07:39.602"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.604" starttime="20210313 17:07:39.601"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword and Continue on Failure</arg>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${headers['X-mStoreFE-Addr']}</arg>
<arg>FEname:${FE_NAME}-nodeId:${NODE_ID}-ConnId:[a-zA-Z0-9]+-slot:${SLOT_ID}-instId:[0-9]+-subOid:[0-9]+-time:[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z-localFqdn:${LOCAL_FQDN}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.619" level="FAIL">Resolving variable '${headers['X-mStoreFE-Addr']}' failed: Variable '${headers}' not found. Did you mean:
    ${pns_headers}</msg>
<status status="FAIL" endtime="20210313 17:07:39.620" starttime="20210313 17:07:39.606"></status>
</kw>
<status status="FAIL" endtime="20210313 17:07:39.620" starttime="20210313 17:07:39.605"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.620" starttime="20210313 17:07:39.605"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['serviceName']}</arg>
<arg>${PNS_SERVICE_NAME}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.622" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.623" starttime="20210313 17:07:39.621"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.623" starttime="20210313 17:07:39.621"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['TTL']}</arg>
<arg>${PNS_TTL}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.625" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.625" starttime="20210313 17:07:39.624"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.625" starttime="20210313 17:07:39.623"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['recipients'][0]['uri']}</arg>
<arg>${push_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.628" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.628" starttime="20210313 17:07:39.627"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.628" starttime="20210313 17:07:39.626"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['channel']}</arg>
<arg>${PNS_CHANNEL}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.631" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.631" starttime="20210313 17:07:39.630"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.631" starttime="20210313 17:07:39.629"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-type']}</arg>
<arg>${PNS_TYPE}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.634" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.634" starttime="20210313 17:07:39.632"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.634" starttime="20210313 17:07:39.631"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['pns-subtype']}</arg>
<arg>${pns_subtype}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.636" starttime="20210313 17:07:39.635"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.637" starttime="20210313 17:07:39.635"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['resourceURL']}</arg>
<arg>${pns_resource_url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.639" starttime="20210313 17:07:39.638"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.639" starttime="20210313 17:07:39.637"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['objectURL']}</arg>
<arg>${pns_object_Url}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.642" starttime="20210313 17:07:39.640"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.642" starttime="20210313 17:07:39.640"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['direction']}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.644" starttime="20210313 17:07:39.643"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.645" starttime="20210313 17:07:39.642"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['message-time']}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-9]{2}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.647" starttime="20210313 17:07:39.646"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.648" starttime="20210313 17:07:39.645"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['status']}</arg>
<arg>${msgStatus}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.650" starttime="20210313 17:07:39.649"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.650" starttime="20210313 17:07:39.648"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['sender']}</arg>
<arg>${sender}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.652" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.653" starttime="20210313 17:07:39.651"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.653" starttime="20210313 17:07:39.651"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'group'</arg>
<arg>ValidateGroupRecepients</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['recipients']}</arg>
<arg>${group_members}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['recipients'][0]['uri']}</arg>
<arg>${recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:39.658" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:39.658" starttime="20210313 17:07:39.656"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.658" starttime="20210313 17:07:39.655"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.658" starttime="20210313 17:07:39.654"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${json_out['push-message']['nmsEventList']['nmsEvent'][0]['deletedObject']['message']['imdn-message-id']}</arg>
<arg>${IMDN_MESSAGE_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.662" starttime="20210313 17:07:39.660"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.662" starttime="20210313 17:07:39.659"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.663" starttime="20210313 17:07:39.558"></status>
</kw>
<msg timestamp="20210313 17:07:39.663" level="INFO">${pns_status} = PASS</msg>
<msg timestamp="20210313 17:07:39.663" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20210313 17:07:39.663" starttime="20210313 17:07:39.557"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "PASS"</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>SendResponse</arg>
<arg>${request}</arg>
<arg>400</arg>
<arg>BadRequest</arg>
<arg>${version}</arg>
</arguments>
<kw name="SendResponse" library="mStore_Generic_resources">
<arguments>
<arg>${request}</arg>
<arg>200</arg>
<arg>OK</arg>
<arg>${version}</arg>
</arguments>
<kw name="Sendresponse Code" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
<arg>${response_code}</arg>
<arg>${message}</arg>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.669" starttime="20210313 17:07:39.668"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.670" starttime="20210313 17:07:39.666"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.670" starttime="20210313 17:07:39.665"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:39.670" starttime="20210313 17:07:39.664"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_original_folder_timestamp_CHAT</arg>
<arg>recent=0</arg>
<arg>seen=0</arg>
<arg>delivered=0</arg>
<arg>deleted=1</arg>
</arguments>
<assign>
<var>${creation_tuid}</var>
<var>${modification_tuid}</var>
</assign>
<kw name="ValidateCassandra_messages_by_original_folder_timestamp_CHAT" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=0</arg>
<arg>seen=0</arg>
<arg>delivered=0</arg>
<arg>deleted=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:39.677" starttime="20210313 17:07:39.676"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_original_folder_timestamp where userid='${userId}' AND folderkey='${folderkey}' AND creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:40.324" level="INFO">SELECT json * from messages_by_original_folder_timestam p where userid='4feb706c-8458-11eb-b7ec-005056ae42da' AND folderkey='UkNTTWVzc2F nZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=' AND creation_tuid=51b3d2e1-8458-11eb-83b6-5d6 742a1b2bf;</msg>
<status status="PASS" endtime="20210313 17:07:40.325" starttime="20210313 17:07:39.677"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:40.550" level="INFO">[json]

 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": null, "bcc": null, "blockedmsgreasoncode": "", "bodyoctets": 67, "bucketkey": null, "bulletinid": null, "cc": null, "chunksize": null, "cnsbulletinon": null, "cnsgreetingon": 0, "contentdisposition": null, "contentencoding": "quoted-printable", "contenttype": "text/plain", "contributionid": "e0a1029e-a48b-4ca6-b185-299dada439be", "conversationid": "2dbc584e-fc46-4a37-9a56-c2b93246d788", "cpim": null, "creation_ts": "2021-03-14T00:01:29.029000", "creationdate": null, "deleted": 1, "delivered": 0, "deliveredimdnlist": null, "direction": null, "draft": 0, "expirytimestamp": null, "flagged": 0, "fromheader": "tel:+9999999990", "geolocation": null, "greetingname": "Greeting", "greetingtelnumber": null, "imapmsgheaders": "Content-type: text/plain;charset=UTF-8\\r\\nDate: Sat, 13 Mar 2021 17:06:25 +0000\\r\\nMessage-Context: X-RCS-PM\\r\\nDirection: In\\r\\nTo: tel:+8888888880\\r\\nFrom: tel:+9999999990\\r\\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\\r\\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\\r\\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\\r\\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\\r\\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\\r\\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\\r\\n\\r\\n", "imdn_disposition_data": null, "imdnmessageid": "37857c02-005f-9b17-9322-b8423992923a", "inprocess": null, "internaldate": "2021-03-13T17:06:25Z", "ismodifiedevent": true, "lastmodseq": null, "mdnflag": null, "message": "This is the new message we are depositing to test $@#^&amp;*!0123456789", "messageaction": null, "messagecontext": "X-RCS-PM", "messageid": "", "messagetype": "", "messageversion": null, "mimeversion": "", "modification_tuid": "723904e0-8458-11eb-83b6-5d6742a1b2bf", "mstore_version": "vm_2_1", "nscorrelationid": null, "numberofchunks": null, "objheaders": null, "originalfolderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "payloadheaders": "", "priority": -1, "protection": null, "purgenotify": null, "purgeuuid": null, "readimdnlist": null, "recent": 0, "recordlen": null, "replytonumber": null, "requestjson": null, "returnreceiptflag": null, "rfc2822size": 1401, "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "saved": null, "seen": 0, "sensitivity": null, "smscallbacknum": null, "sourcenode": null, "storageobjtype": "", "subject": "", "swiftobjurl": "/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "swiftpointer": 0, "thumbnailcontent": "", "timezone": null, "toheader": "tel:+8888888880", "tpdata": "", "tpdatatype": "", "transcriptresult": null, "transcriptstates": null, "uid": 0, "user": null, "useractivity": null, "userdefinedflagname": "", "userdefinedflagvalue": "", "uuid": "4feb706c-8458-11eb-b7ec-005056ae42da", "xcontentpages": null, "xfuturedeliverytimestamp": null, "xorgvmuid": null}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:40.551" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:40.551" starttime="20210313 17:07:40.326"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:40.553" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:40.553" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "answered": 0, "attributes": n...</msg>
<status status="PASS" endtime="20210313 17:07:40.553" starttime="20210313 17:07:40.551"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mboft_data}</var>
</assign>
<msg timestamp="20210313 17:07:40.556" level="INFO">${mboft_data} = {u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid...</msg>
<status status="PASS" endtime="20210313 17:07:40.556" starttime="20210313 17:07:40.554"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mboft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.557" level="INFO">{u'greetingname': u'Greeting', u'transcriptstates': None, u'messageid': u'', u'saved': None, u'rfc2822size': 1401, u'expirytimestamp': None, u'answered': 0, u'payloadheaders': u'', u'modification_tuid': u'723904e0-8458-11eb-83b6-5d6742a1b2bf', u'cpim': None, u'sensitivity': None, u'smscallbacknum': None, u'contentdisposition': None, u'internaldate': u'2021-03-13T17:06:25Z', u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'flagged': 0, u'bucketkey': None, u'imdn_disposition_data': None, u'contributionid': u'e0a1029e-a48b-4ca6-b185-299dada439be', u'requestjson': None, u'xorgvmuid': None, u'bodyoctets': 67, u'userdefinedflagname': u'', u'subject': u'', u'delivered': 0, u'useractivity': None, u'contenttype': u'text/plain', u'mstore_version': u'vm_2_1', u'messageaction': None, u'chunksize': None, u'deleted': 1, u'contentencoding': u'quoted-printable', u'protection': None, u'cnsgreetingon': 0, u'mdnflag': None, u'xfuturedeliverytimestamp': None, u'uuid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'toheader': u'tel:+8888888880', u'nscorrelationid': None, u'readimdnlist': None, u'purgenotify': None, u'conversationid': u'2dbc584e-fc46-4a37-9a56-c2b93246d788', u'objheaders': None, u'geolocation': None, u'sourcenode': None, u'cc': None, u'cnsbulletinon': None, u'imapmsgheaders': u'Content-type: text/plain;charset=UTF-8\r\nDate: Sat, 13 Mar 2021 17:06:25 +0000\r\nMessage-Context: X-RCS-PM\r\nDirection: In\r\nTo: tel:+8888888880\r\nFrom: tel:+9999999990\r\nCONTRIBUTION-ID: e0a1029e-a48b-4ca6-b185-299dada439be\r\nCONVERSATION-ID: 2dbc584e-fc46-4a37-9a56-c2b93246d788\r\nX-SIP-CALLID: 005056884776-4d72-eb161700-1e2-571fa736-a0e46\r\nP-ASSERTED-SERVICE: urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg\r\nIMDN-Message-ID: 37857c02-005f-9b17-9322-b8423992923a\r\nX-IMDN-CORRELATOR: 8888888880_37857c02-005f-9b17-9322-b8423992923a\r\n\r\n', u'message': u'This is the new message we are depositing to test $@#^&amp;*!0123456789', u'creation_ts': u'2021-03-14T00:01:29.029000', u'uid': 0, u'blockedmsgreasoncode': u'', u'lastmodseq': None, u'inprocess': None, u'priority': -1, u'draft': 0, u'purgeuuid': None, u'fromheader': u'tel:+9999999990', u'direction': None, u'storageobjtype': u'', u'deliveredimdnlist': None, u'messagecontext': u'X-RCS-PM', u'tpdatatype': u'', u'ismodifiedevent': True, u'returnreceiptflag': None, u'originalfolderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'messageversion': None, u'replytonumber': None, u'bulletinid': None, u'mimeversion': u'', u'timezone': None, u'seen': 0, u'recordlen': None, u'swiftobjurl': u'/cassandra/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=:51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'imdnmessageid': u'37857c02-005f-9b17-9322-b8423992923a', u'messagetype': u'', u'thumbnailcontent': u'', u'swiftpointer': 0, u'tpdata': u'', u'numberofchunks': None, u'userdefinedflagvalue': u'', u'user': None, u'attributes': None, u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'transcriptresult': None, u'recent': 0, u'xcontentpages': None, u'greetingtelnumber': None, u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'bcc': None, u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'creationdate': None}</msg>
<status status="PASS" endtime="20210313 17:07:40.558" starttime="20210313 17:07:40.556"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:40.560" starttime="20210313 17:07:40.559"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.561" starttime="20210313 17:07:40.558"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contenttype']}</arg>
<arg>${contenttype}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.563" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.564" starttime="20210313 17:07:40.562"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.564" starttime="20210313 17:07:40.561"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['fromheader']}</arg>
<arg>${msg_from}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.568" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.568" starttime="20210313 17:07:40.567"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.569" starttime="20210313 17:07:40.565"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['toheader']}</arg>
<arg>${msg_to}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.572" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.573" starttime="20210313 17:07:40.571"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.573" starttime="20210313 17:07:40.570"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.573" starttime="20210313 17:07:40.569"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['imdnmessageid']}</arg>
<arg>${imdn_msg_id}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:40.576" starttime="20210313 17:07:40.574"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.576" starttime="20210313 17:07:40.574"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['contributionid']}</arg>
<arg>${contributionid}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.579" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.579" starttime="20210313 17:07:40.578"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.579" starttime="20210313 17:07:40.577"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['conversationid']}</arg>
<arg>${conversationid}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.582" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.582" starttime="20210313 17:07:40.581"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.583" starttime="20210313 17:07:40.580"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['messagecontext']}</arg>
<arg>${messagecontext}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.585" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.586" starttime="20210313 17:07:40.584"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.586" starttime="20210313 17:07:40.583"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:40.588" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.589" starttime="20210313 17:07:40.587"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.589" starttime="20210313 17:07:40.586"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:40.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.592" starttime="20210313 17:07:40.590"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.592" starttime="20210313 17:07:40.589"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:40.594" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.595" starttime="20210313 17:07:40.593"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.595" starttime="20210313 17:07:40.593"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:40.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.598" starttime="20210313 17:07:40.597"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.598" starttime="20210313 17:07:40.596"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['readimdnlist']}</arg>
<arg>${readimdnlist}</arg>
<arg>msg="read list mismatch in cassandara"</arg>
</arguments>
<msg timestamp="20210313 17:07:40.601" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.602" starttime="20210313 17:07:40.599"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.602" starttime="20210313 17:07:40.599"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deliveredimdnlist']}</arg>
<arg>${deliveredimdnlist}</arg>
<arg>msg="delivered list mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:40.606" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.607" starttime="20210313 17:07:40.605"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.607" starttime="20210313 17:07:40.603"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:40.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.612" starttime="20210313 17:07:40.610"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.612" starttime="20210313 17:07:40.608"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:40.616" starttime="20210313 17:07:40.614"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.616" starttime="20210313 17:07:40.613"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mboft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:40.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:40.619" starttime="20210313 17:07:40.618"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.620" starttime="20210313 17:07:40.617"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:40.621" starttime="20210313 17:07:39.671"></status>
</kw>
<msg timestamp="20210313 17:07:40.621" level="INFO">${creation_tuid} = 51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<msg timestamp="20210313 17:07:40.621" level="INFO">${modification_tuid} = 723904e0-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:40.621" starttime="20210313 17:07:39.671"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandra_messages_by_root_folder_timestamp</arg>
<arg>recent=0</arg>
<arg>seen=0</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=0</arg>
<arg>deleted=1</arg>
</arguments>
<kw name="ValidateCassandra_messages_by_root_folder_timestamp" library="mStore_Digits_TMO_resources">
<arguments>
<arg>recent=0</arg>
<arg>seen=0</arg>
<arg>modification_tuid=${modification_tuid}</arg>
<arg>delivered=0</arg>
<arg>deleted=1</arg>
</arguments>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:40.626" starttime="20210313 17:07:40.625"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>SELECT json * from messages_by_root_folder_timestamp where userid='${userId}' and rootfolderkey='${rootfolderkey}' and creation_tuid=${creation_tuid};</arg>
</arguments>
<msg timestamp="20210313 17:07:41.346" level="INFO">SELECT json * from messages_by_root_folder_timestamp wh ere userid='4feb706c-8458-11eb-b7ec-005056ae42da' and rootfolderkey='fb830d1d-a4 a5-4f58-a3ad-740be2fd2fc6' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d6742a1b2b f;</msg>
<status status="PASS" endtime="20210313 17:07:41.347" starttime="20210313 17:07:40.626"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\&gt;</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:41.375" level="INFO">[json]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 1, "delivered": 0, "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "imdn_disposition_data": null, "modification_tuid": "723904e0-8458-11eb-83b6-5d6742a1b2bf", "recent": 0, "saved": null, "seen": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:41.376" level="INFO">${data} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:41.376" starttime="20210313 17:07:41.348"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${data}</arg>
<arg>${folderkey}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20210313 17:07:41.377" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:41.378" level="INFO">${json_data} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "deleted": 1, "delivered": 0, "fol...</msg>
<status status="PASS" endtime="20210313 17:07:41.378" starttime="20210313 17:07:41.377"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${json_data}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${mbrft_data}</var>
</assign>
<msg timestamp="20210313 17:07:41.380" level="INFO">${mbrft_data} = {u'delivered': 0, u'deleted': 1, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'...</msg>
<status status="PASS" endtime="20210313 17:07:41.380" starttime="20210313 17:07:41.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${mbrft_data}</arg>
</arguments>
<msg timestamp="20210313 17:07:41.381" level="INFO">{u'delivered': 0, u'deleted': 1, u'imdn_disposition_data': None, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'modification_tuid': u'723904e0-8458-11eb-83b6-5d6742a1b2bf', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'seen': 0, u'saved': None, u'recent': 0}</msg>
<status status="PASS" endtime="20210313 17:07:41.381" starttime="20210313 17:07:41.380"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:41.384" starttime="20210313 17:07:41.382"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.384" starttime="20210313 17:07:41.382"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:41.386" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:41.387" starttime="20210313 17:07:41.385"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.387" starttime="20210313 17:07:41.384"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['deleted']}</arg>
<arg>${deleted}</arg>
<arg>msg="deleted flag mismatch n cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:41.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:41.390" starttime="20210313 17:07:41.388"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.390" starttime="20210313 17:07:41.387"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['delivered']}</arg>
<arg>${delivered}</arg>
<arg>msg="delivered flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:41.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:41.394" starttime="20210313 17:07:41.392"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.394" starttime="20210313 17:07:41.391"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['recent']}</arg>
<arg>${recent}</arg>
<arg>msg="recent flag mismatch in cassandra "</arg>
</arguments>
<msg timestamp="20210313 17:07:41.397" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:41.397" starttime="20210313 17:07:41.396"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.397" starttime="20210313 17:07:41.395"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['seen']}</arg>
<arg>${seen}</arg>
<arg>msg="seen flag mismatch in cassandra"</arg>
</arguments>
<msg timestamp="20210313 17:07:41.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:41.400" starttime="20210313 17:07:41.399"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.401" starttime="20210313 17:07:41.398"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:41.403" starttime="20210313 17:07:41.402"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.404" starttime="20210313 17:07:41.401"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${mbrft_data['modification_tuid']}</arg>
<arg>${modification_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:41.406" starttime="20210313 17:07:41.405"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.406" starttime="20210313 17:07:41.404"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.407" starttime="20210313 17:07:40.623"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:41.407" starttime="20210313 17:07:40.622"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateCassandraIMDNMapping</arg>
<arg>uid=${CREATION_TUID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="ValidateCassandraIMDNMapping" library="mStore_Digits_TMO_resources">
<arguments>
<arg>uid=${CREATION_TUID}</arg>
<arg>foldername=${CHAT_PARENT_FOLDER_PATH}/${SUBSCRIBER_ID}/</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${SUBSCRIBER_ID}_${imdn_msg_id}</arg>
</arguments>
<assign>
<var>${imdncorrelator}</var>
</assign>
<msg timestamp="20210313 17:07:41.413" level="INFO">${imdncorrelator} = 8888888880_37857c02-005f-9b17-9322-b8423992923a</msg>
<status status="PASS" endtime="20210313 17:07:41.414" starttime="20210313 17:07:41.412"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>cass_db</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:41.416" starttime="20210313 17:07:41.414"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>select json * from imdnmsgidmapping where userid='${userId}' and creation_tuid=${uid} LIMIT 1 ALLOW FILTERING;</arg>
</arguments>
<msg timestamp="20210313 17:07:42.001" level="INFO">select json * from imdnmsgidmapping where userid='4feb7 06c-8458-11eb-b7ec-005056ae42da' and creation_tuid=51b3d2e1-8458-11eb-83b6-5d674 2a1b2bf LIMIT 1 ALLOW FILTERING;</msg>
<status status="PASS" endtime="20210313 17:07:42.002" starttime="20210313 17:07:41.416"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>${MSTORE_CASSANDRA_KEYSPACE}\&gt;</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20210313 17:07:42.033" level="INFO">[json]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folderkey": "UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=", "foldername": "RCSMessageStore/Chat/8888888880/", "rootfolderkey": "fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6", "uid": 0}

(1 rows)
cqlsh:rcs_hosted_saurav&gt;</msg>
<msg timestamp="20210313 17:07:42.034" level="INFO">${out} = 
 [json]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20210313 17:07:42.034" starttime="20210313 17:07:42.003"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>(${cnt} rows)</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.036" starttime="20210313 17:07:42.035"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.036" starttime="20210313 17:07:42.034"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${cnt} == 0</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.037" starttime="20210313 17:07:42.037"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${userId}</arg>
</arguments>
<assign>
<var>${user}</var>
</assign>
<msg timestamp="20210313 17:07:42.039" level="INFO">${user} = 4feb706c-8458-11eb-b7ec-005056ae42da</msg>
<status status="PASS" endtime="20210313 17:07:42.039" starttime="20210313 17:07:42.038"></status>
</kw>
<kw name="Get Lines Containing String" library="String">
<doc>Returns lines of the given ``string`` that contain the ``pattern``.</doc>
<arguments>
<arg>${out}</arg>
<arg>${user}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20210313 17:07:42.041" level="INFO">1 out of 7 lines matched</msg>
<msg timestamp="20210313 17:07:42.042" level="INFO">${res} =  {"userid": "4feb706c-8458-11eb-b7ec-005056ae42da", "imdncorrelator": "8888888880_37857c02-005f-9b17-9322-b8423992923a", "cosid": "10", "creation_tuid": "51b3d2e1-8458-11eb-83b6-5d6742a1b2bf", "folder...</msg>
<status status="PASS" endtime="20210313 17:07:42.042" starttime="20210313 17:07:42.040"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>json.loads('''${res}''')</arg>
<arg>json</arg>
</arguments>
<assign>
<var>${imdn_mapping}</var>
</assign>
<msg timestamp="20210313 17:07:42.044" level="INFO">${imdn_mapping} = {u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830...</msg>
<status status="PASS" endtime="20210313 17:07:42.044" starttime="20210313 17:07:42.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${imdn_mapping}</arg>
</arguments>
<msg timestamp="20210313 17:07:42.045" level="INFO">{u'uid': 0, u'userid': u'4feb706c-8458-11eb-b7ec-005056ae42da', u'creation_tuid': u'51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'foldername': u'RCSMessageStore/Chat/8888888880/', u'rootfolderkey': u'fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6', u'folderkey': u'UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'imdncorrelator': u'8888888880_37857c02-005f-9b17-9322-b8423992923a', u'cosid': u'10'}</msg>
<status status="PASS" endtime="20210313 17:07:42.046" starttime="20210313 17:07:42.045"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['creation_tuid']}</arg>
<arg>${creation_tuid}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.049" starttime="20210313 17:07:42.047"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.049" starttime="20210313 17:07:42.046"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['folderkey']}</arg>
<arg>${folderkey}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.052" starttime="20210313 17:07:42.051"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.052" starttime="20210313 17:07:42.049"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['rootfolderkey']}</arg>
<arg>${rootfolderkey}</arg>
</arguments>
<msg timestamp="20210313 17:07:42.055" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:42.055" starttime="20210313 17:07:42.054"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.056" starttime="20210313 17:07:42.053"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['imdncorrelator']}</arg>
<arg>${imdncorrelator}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.058" starttime="20210313 17:07:42.057"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.058" starttime="20210313 17:07:42.056"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['cosid']}</arg>
<arg>${cosid}</arg>
</arguments>
<msg timestamp="20210313 17:07:42.060" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:42.061" starttime="20210313 17:07:42.059"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.061" starttime="20210313 17:07:42.059"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['foldername']}</arg>
<arg>${foldername}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.063" starttime="20210313 17:07:42.062"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.063" starttime="20210313 17:07:42.061"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${imdn_mapping['userid']}</arg>
<arg>${userId}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.066" starttime="20210313 17:07:42.065"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.066" starttime="20210313 17:07:42.064"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.066" starttime="20210313 17:07:41.408"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.067" starttime="20210313 17:07:41.407"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${pns_status}" == "FAIL"</arg>
<arg>FAIL</arg>
<arg>PNS notification verification failed \n ${value}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.069" starttime="20210313 17:07:42.068"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.069" starttime="20210313 17:07:42.067"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.072" starttime="20210313 17:07:42.072"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:42.073" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:42.140" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:42.141" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:42.141" starttime="20210313 17:07:42.073"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:42.147" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:42.147" starttime="20210313 17:07:42.142"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:42.199" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:42.200" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:42.200" starttime="20210313 17:07:42.148"></status>
</kw>
<msg timestamp="20210313 17:07:42.201" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:42.201" starttime="20210313 17:07:42.071"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.206" starttime="20210313 17:07:42.204"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:42.207" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:42.284" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:42.285" starttime="20210313 17:07:42.206"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.286" starttime="20210313 17:07:42.202"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.289" starttime="20210313 17:07:42.288"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:42.290" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:42.412" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:42.413" starttime="20210313 17:07:42.289"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:42.418" level="INFO">16338 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:42.418" starttime="20210313 17:07:42.414"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:42.467" level="INFO">32896 packets received by filter
411 packets dropped by kernel
date
Sun Mar 14 00:01:41 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Delete_PM_Msg"/"Delete_PM_Msg".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Delete_PM_Msg"/"Delete_PM_Msg".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:42.467" starttime="20210313 17:07:42.419"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.468" starttime="20210313 17:07:42.286"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.471" starttime="20210313 17:07:42.470"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.471" starttime="20210313 17:07:42.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.474" starttime="20210313 17:07:42.473"></status>
</kw>
<msg timestamp="20210313 17:07:42.474" level="INFO">${status} = ('PASS', None)</msg>
<status status="PASS" endtime="20210313 17:07:42.474" starttime="20210313 17:07:42.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<kw name="CloseRequest" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${request}</arg>
</arguments>
<kw name="Close Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.480" starttime="20210313 17:07:42.479"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.481" starttime="20210313 17:07:42.477"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.481" starttime="20210313 17:07:42.475"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.482" starttime="20210313 17:07:42.070"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:42.482" critical="yes" starttime="20210313 17:07:36.988"></status>
</test>
<test id="s1-t15" name="Redelete_PM_Msg">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.490" starttime="20210313 17:07:42.489"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:42.491" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:42.548" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:42.549" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:42.549" starttime="20210313 17:07:42.491"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:42.592" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:42.592" starttime="20210313 17:07:42.550"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:42.612" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:42.613" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:42.613" starttime="20210313 17:07:42.593"></status>
</kw>
<msg timestamp="20210313 17:07:42.614" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:42.614" starttime="20210313 17:07:42.487"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:42.616" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:42.617" starttime="20210313 17:07:42.615"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.620" starttime="20210313 17:07:42.619"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:42.621" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:42.678" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:42.679" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:42.679" starttime="20210313 17:07:42.620"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:42.680" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:42.800" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:42.801" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:42.801" starttime="20210313 17:07:42.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:42.803" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:42.803" starttime="20210313 17:07:42.802"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:42.805" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:42.805" starttime="20210313 17:07:42.804"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:42.806" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:42.807" starttime="20210313 17:07:42.806"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:42.808" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:42.808" starttime="20210313 17:07:42.807"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:42.849" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:42.850" starttime="20210313 17:07:42.809"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:42.864" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:42.864" starttime="20210313 17:07:42.850"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:42.872" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:42.872" starttime="20210313 17:07:42.865"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:42.890" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:42.890" starttime="20210313 17:07:42.873"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:42.891" starttime="20210313 17:07:42.617"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:42.895" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:42.895" starttime="20210313 17:07:42.894"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:42.897" starttime="20210313 17:07:42.896"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:42.898" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:42.965" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:42.966" starttime="20210313 17:07:42.897"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:43.010" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Redelet e_PM_Msg"</msg>
<status status="PASS" endtime="20210313 17:07:43.011" starttime="20210313 17:07:42.966"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:43.025" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:43.026" starttime="20210313 17:07:43.011"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:43.038" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"Redelete_PM_Msg"/"Redelete_PM_Msg".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:43.038" starttime="20210313 17:07:43.026"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:43.060" level="INFO">[1] 5945
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:43.061" starttime="20210313 17:07:43.039"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:43.061" starttime="20210313 17:07:42.891"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:43.065" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:43.065" starttime="20210313 17:07:43.064"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:43.067" starttime="20210313 17:07:43.066"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:43.068" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:43.156" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:43.156" starttime="20210313 17:07:43.067"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:43.199" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Redelet e_PM_Msg"</msg>
<status status="PASS" endtime="20210313 17:07:43.200" starttime="20210313 17:07:43.157"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:43.222" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:43.223" starttime="20210313 17:07:43.200"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:43.235" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"Redelete_PM_Msg"/"Redelete_PM_Msg".pcap &amp;</msg>
<status status="PASS" endtime="20210313 17:07:43.235" starttime="20210313 17:07:43.223"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:43.248" level="INFO">[2] 5972
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:43.248" starttime="20210313 17:07:43.236"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:43.249" starttime="20210313 17:07:43.062"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:43.249" starttime="20210313 17:07:42.486"></status>
</kw>
<kw name="DeleteMsgObject" library="mStore_Digits_TMO_resources">
<arguments>
<arg>response_code=204</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ResourceURI}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:43.253" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:43.253" starttime="20210313 17:07:43.252"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:43.786" level="INFO">Delete Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf, data=(),                     headers={'User-Agent': ''}, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:43.786" level="INFO">${response} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:43.786" starttime="20210313 17:07:43.254"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${status_code}</var>
</assign>
<msg timestamp="20210313 17:07:43.789" level="INFO">${status_code} = 204</msg>
<status status="PASS" endtime="20210313 17:07:43.789" starttime="20210313 17:07:43.787"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:43.790" level="INFO">204</msg>
<status status="PASS" endtime="20210313 17:07:43.791" starttime="20210313 17:07:43.789"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:43.792" level="INFO"></msg>
<status status="PASS" endtime="20210313 17:07:43.792" starttime="20210313 17:07:43.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:43.794" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:42 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:8888888880TXRe9TT92KAQEhBLp1tKzC36booThBdz-slot:1-instId:1-subOid:29-time:2021-03-14T00:01:42Z-localFqdn:10.10.219.141', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:43.794" starttime="20210313 17:07:43.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_code}</arg>
<arg>${status_code}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:43.796" starttime="20210313 17:07:43.795"></status>
</kw>
<msg timestamp="20210313 17:07:43.796" level="INFO">${response} = &lt;Response [204]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:43.796" starttime="20210313 17:07:43.250"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:43.801" starttime="20210313 17:07:43.800"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:43.803" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:43.861" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:43.862" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:43.863" starttime="20210313 17:07:43.802"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:43.869" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:43.870" starttime="20210313 17:07:43.864"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:43.931" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:43.931" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:43.932" starttime="20210313 17:07:43.871"></status>
</kw>
<msg timestamp="20210313 17:07:43.933" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:43.933" starttime="20210313 17:07:43.798"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:43.938" starttime="20210313 17:07:43.936"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:43.939" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:44.016" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:44.017" starttime="20210313 17:07:43.938"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.018" starttime="20210313 17:07:43.934"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:44.020" starttime="20210313 17:07:44.019"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:44.021" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:44.130" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:44.131" starttime="20210313 17:07:44.021"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:44.133" level="INFO">2645 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:44.133" starttime="20210313 17:07:44.132"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:44.194" level="INFO">5376 packets received by filter
137 packets dropped by kernel
date
Sun Mar 14 00:01:43 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Redelete_PM_Msg"/"Redelete_PM_Msg".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"Redelete_PM_Msg"/"Redelete_PM_Msg".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.194" starttime="20210313 17:07:44.134"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.195" starttime="20210313 17:07:44.018"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:44.198" starttime="20210313 17:07:44.196"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.198" starttime="20210313 17:07:44.195"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:44.228" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:07:44.228" starttime="20210313 17:07:44.201"></status>
</kw>
<msg timestamp="20210313 17:07:44.229" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:07:44.229" starttime="20210313 17:07:44.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:44.231" starttime="20210313 17:07:44.230"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.232" starttime="20210313 17:07:43.798"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:44.232" critical="yes" starttime="20210313 17:07:42.484"></status>
</test>
<test id="s1-t16" name="FolderSearchAfterDeletingtheMsg">
<kw type="setup" name="prepare_testbed">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_BT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:44.238" starttime="20210313 17:07:44.237"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:44.240" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:44.299" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:44.300" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:44.300" starttime="20210313 17:07:44.239"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:44.342" level="INFO">ls -altr /data/storage/corefiles/core.*</msg>
<status status="PASS" endtime="20210313 17:07:44.343" starttime="20210313 17:07:44.301"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:44.360" level="INFO">ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:44.360" level="INFO">${core} = ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.360" starttime="20210313 17:07:44.344"></status>
</kw>
<msg timestamp="20210313 17:07:44.361" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:44.361" starttime="20210313 17:07:44.236"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
</arguments>
<msg timestamp="20210313 17:07:44.363" level="INFO">${CORE_CNT_BT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:44.363" starttime="20210313 17:07:44.362"></status>
</kw>
<kw name="ClearTRLs_TMMs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:44.366" starttime="20210313 17:07:44.365"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${trl_path}/`date +%Y_%m/%d/%H`</arg>
</arguments>
<assign>
<var>${current_trl_path}</var>
</assign>
<msg timestamp="20210313 17:07:44.367" level="INFO">Executing command 'echo /data/redun/cdr/trl/`date +%Y_%m/%d/%H`'.</msg>
<msg timestamp="20210313 17:07:44.426" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:44.427" level="INFO">${current_trl_path} = /data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:44.427" starttime="20210313 17:07:44.366"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>echo ${tmm_path}/`date +%Y-%m/%d`</arg>
</arguments>
<assign>
<var>${current_tmm_path}</var>
</assign>
<msg timestamp="20210313 17:07:44.429" level="INFO">Executing command 'echo /data/redun/tmm/`date +%Y-%m/%d`'.</msg>
<msg timestamp="20210313 17:07:44.530" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:44.531" level="INFO">${current_tmm_path} = /data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:44.531" starttime="20210313 17:07:44.427"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_trl_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:44.532" level="INFO">/data/redun/cdr/trl/2021_03/14/00</msg>
<status status="PASS" endtime="20210313 17:07:44.533" starttime="20210313 17:07:44.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
</arguments>
<msg timestamp="20210313 17:07:44.534" level="INFO">/data/redun/tmm/2021-03/14</msg>
<status status="PASS" endtime="20210313 17:07:44.534" starttime="20210313 17:07:44.533"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_trl_path}</arg>
<arg>msg="TRL path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:44.536" level="INFO">Length is 33</msg>
<status status="PASS" endtime="20210313 17:07:44.536" starttime="20210313 17:07:44.535"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${current_tmm_path}</arg>
<arg>msg="TMM path is empty"</arg>
</arguments>
<msg timestamp="20210313 17:07:44.537" level="INFO">Length is 26</msg>
<status status="PASS" endtime="20210313 17:07:44.538" starttime="20210313 17:07:44.536"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_trl_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:44.575" level="INFO">rm -rf /data/redun/cdr/trl/2021_03/14/00/*</msg>
<status status="PASS" endtime="20210313 17:07:44.575" starttime="20210313 17:07:44.539"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:44.593" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.594" starttime="20210313 17:07:44.576"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>rm -rf ${current_tmm_path}/*</arg>
</arguments>
<msg timestamp="20210313 17:07:44.600" level="INFO">rm -rf /data/redun/tmm/2021-03/14/*</msg>
<status status="PASS" endtime="20210313 17:07:44.601" starttime="20210313 17:07:44.594"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:44.619" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.619" starttime="20210313 17:07:44.602"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.620" starttime="20210313 17:07:44.363"></status>
</kw>
<kw name="start_capturing_logs" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:44.625" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:44.625" starttime="20210313 17:07:44.623"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:44.627" starttime="20210313 17:07:44.626"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:44.628" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:44.706" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:44.706" starttime="20210313 17:07:44.627"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:44.753" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterDeletingtheMsg"</msg>
<status status="PASS" endtime="20210313 17:07:44.754" starttime="20210313 17:07:44.707"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:44.772" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.772" starttime="20210313 17:07:44.755"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".log &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:44.789" level="INFO">/usr/IMS/current/bin/mlogc -c 127.0.0.1&gt; /data/automation/16156551 85//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterDeletingtheMsg"/"FolderSearchAfterDele tingtheMsg".log &amp;</msg>
<status status="PASS" endtime="20210313 17:07:44.789" starttime="20210313 17:07:44.773"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:44.796" level="INFO">[1] 6132
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.797" starttime="20210313 17:07:44.790"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.800" starttime="20210313 17:07:44.621"></status>
</kw>
<kw name="start_packet_capture" library="mStore_Generic_resources">
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${suite_name}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20210313 17:07:44.804" level="INFO">${suite_name} = Pm_Deposit_Oem_Mt</msg>
<status status="PASS" endtime="20210313 17:07:44.804" starttime="20210313 17:07:44.803"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:44.806" starttime="20210313 17:07:44.805"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:44.807" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:44.894" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20210313 17:07:44.895" starttime="20210313 17:07:44.806"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>mkdir -p ${path}/"${suite_name}"/"${testcase_name}"</arg>
</arguments>
<msg timestamp="20210313 17:07:44.933" level="INFO">mkdir -p /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderS earchAfterDeletingtheMsg"</msg>
<status status="PASS" endtime="20210313 17:07:44.934" starttime="20210313 17:07:44.895"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:44.954" level="INFO">[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.955" starttime="20210313 17:07:44.934"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>tcpdump -i any -s 0 -w ${path}/"${suite_name}"/"${testcase_name}"/"${testcase_name}".pcap &amp;</arg>
</arguments>
<msg timestamp="20210313 17:07:44.969" level="INFO">tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oe m_Mt"/"FolderSearchAfterDeletingtheMsg"/"FolderSearchAfterDeletingtheMsg".pcap &amp; [Am_Mt"/"FolderSearchAfterDeletingtheMsg"/"FolderSearchAfterDeletingtheMsg".pcap [K&amp;</msg>
<status status="PASS" endtime="20210313 17:07:44.970" starttime="20210313 17:07:44.955"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:44.980" level="INFO">[2] 6160
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:44.981" starttime="20210313 17:07:44.971"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.981" starttime="20210313 17:07:44.800"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:44.982" starttime="20210313 17:07:44.235"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${EnableDeltraSync} == True</arg>
<arg>200</arg>
<arg>204</arg>
</arguments>
<assign>
<var>${response_code}</var>
</assign>
<msg timestamp="20210313 17:07:44.984" level="INFO">${response_code} = 200</msg>
<status status="PASS" endtime="20210313 17:07:44.984" starttime="20210313 17:07:44.983"></status>
</kw>
<kw name="FolderSearch" library="mStore_Digits_TMO_resources">
<arguments>
<arg>response_code=${response_code}</arg>
<arg>headers=${OEM_FOLDER_SEARCH_HEADER}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>http://${server_root_path}${oem_host}${userId}/folders/${folderkey}</arg>
</arguments>
<assign>
<var>${FOLDER_SEARCH_RESOURCE_URL}</var>
</assign>
<msg timestamp="20210313 17:07:44.989" level="INFO">${FOLDER_SEARCH_RESOURCE_URL} = http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6</msg>
<status status="PASS" endtime="20210313 17:07:44.989" starttime="20210313 17:07:44.987"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>/root/Sree/Automation_Regression/TMO/Digits/resources/../testfiles/${obj_file}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:44.991" html="yes" level="INFO">Getting file '&lt;a href="file:///root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json"&gt;/root/Sree/Automation_Regression/TMO/Digits/testfiles/FolderSearch.json&lt;/a&gt;'.</msg>
<msg timestamp="20210313 17:07:44.992" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"${FOLDER_SEARCH_RESOURCE_URL}"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
    ...</msg>
<status status="PASS" endtime="20210313 17:07:44.993" starttime="20210313 17:07:44.990"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:44.994" level="INFO">${data} = {
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"...</msg>
<status status="PASS" endtime="20210313 17:07:44.995" starttime="20210313 17:07:44.993"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${oem_host}${userId}/objects/operations/search</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg timestamp="20210313 17:07:44.996" level="INFO">${uri} = /oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search</msg>
<status status="PASS" endtime="20210313 17:07:44.996" starttime="20210313 17:07:44.995"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=${mStore_request_session}</arg>
<arg>uri=${uri}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210313 17:07:46.301" level="INFO">Post Request using : alias=mStoreService, uri=/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/operations/search, data={
"selectionCriteria": {
  "maxEntries": 100,
   "searchScope": {
     "resourceURL":"http://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/fb830d1d-a4a5-4f58-a3ad-740be2fd2fc6"},
     "sortCriteria": {
       "criterion": [
       {
       "type": "Date",
       "order": "Ascending"
       }
      ]
   }
  }
}

, headers={'Content-Type': 'application/json;', 'User-Agent': ''}, files=None, allow_redirects=True </msg>
<msg timestamp="20210313 17:07:46.301" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.301" starttime="20210313 17:07:44.996"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<assign>
<var>${response_status_code}</var>
</assign>
<msg timestamp="20210313 17:07:46.303" level="INFO">${response_status_code} = 200</msg>
<status status="PASS" endtime="20210313 17:07:46.304" starttime="20210313 17:07:46.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.306" level="INFO">200</msg>
<status status="PASS" endtime="20210313 17:07:46.306" starttime="20210313 17:07:46.304"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.307" level="INFO">{"objectList":{"object":[{"parentFolder":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=","attributes":{"attribute":[{"name":"Charset","value":["UTF-8"]},{"name":"Content-Transfer-Encoding","value":["quoted-printable"]},{"name":"Contribution-ID","value":["e0a1029e-a48b-4ca6-b185-299dada439be"]},{"name":"Conversation-ID","value":["2dbc584e-fc46-4a37-9a56-c2b93246d788"]},{"name":"date","value":["2021-03-13T17:06:25Z"]},{"name":"Direction","value":["In"]},{"name":"from","value":["tel:+9999999990"]},{"name":"IMDN-Message-ID","value":["37857c02-005f-9b17-9322-b8423992923a"]},{"name":"message-context","value":["X-RCS-PM"]},{"name":"P-Asserted-Service","value":["urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg"]},{"name":"textcontent","value":["This is the new message we are depositing to test $@#^&amp;*!0123456789"]},{"name":"to","value":["tel:+8888888880"]}]},"flags":{"flag":["\\Deleted"],"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags"},"resourceURL":"https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","path":"/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf","correlationId":"37857c02-005f-9b17-9322-b8423992923a"}]}}</msg>
<status status="PASS" endtime="20210313 17:07:46.308" starttime="20210313 17:07:46.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.309" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:45 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:XhRwd2vT84UKlp7vk9RhABWThwvColBg-slot:1-instId:2-subOid:29-time:2021-03-14T00:01:45Z-localFqdn:10.10.219.141', 'content-length': '1499', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:46.309" starttime="20210313 17:07:46.308"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response_status_code}</arg>
<arg>${response_code}</arg>
<arg>msg="folder search is not success,which has repose ${response.status_code}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.311" starttime="20210313 17:07:46.310"></status>
</kw>
<msg timestamp="20210313 17:07:46.312" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.312" starttime="20210313 17:07:44.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${EnableDeltraSync} == True</arg>
<arg>Run Keyword and Continue on Failure</arg>
<arg>ValidateChatFolderSearchResponse</arg>
<arg>response=${response}</arg>
<arg>msgStatus=Deleted</arg>
<arg>direction=${DIRECTION}</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>ValidateChatFolderSearchResponse</arg>
<arg>response=${response}</arg>
<arg>msgStatus=Deleted</arg>
<arg>direction=${DIRECTION}</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="ValidateChatFolderSearchResponse" library="mStore_Digits_TMO_resources">
<arguments>
<arg>response=${response}</arg>
<arg>msgStatus=Deleted</arg>
<arg>direction=${DIRECTION}</arg>
<arg>uid=${UID}</arg>
<arg>FROM_MSISDN=${TO_MSISDN}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Create List</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>Copy List</arg>
<arg>${to_msg}</arg>
</arguments>
<assign>
<var>${to}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${to_msg}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.321" starttime="20210313 17:07:46.320"></status>
</kw>
<msg timestamp="20210313 17:07:46.321" level="INFO">${to} = ['tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:46.321" starttime="20210313 17:07:46.319"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${msgStatus}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${status_msg}</var>
</assign>
<msg timestamp="20210313 17:07:46.323" level="INFO">${status_msg} = [u'Deleted']</msg>
<status status="PASS" endtime="20210313 17:07:46.323" starttime="20210313 17:07:46.322"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${status_msg}</arg>
</arguments>
<assign>
<var>${len_msg_status}</var>
</assign>
<msg timestamp="20210313 17:07:46.324" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:07:46.324" level="INFO">${len_msg_status} = 1</msg>
<status status="PASS" endtime="20210313 17:07:46.324" starttime="20210313 17:07:46.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${UID}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.326" level="INFO">51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:46.326" starttime="20210313 17:07:46.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.327" level="INFO">{'date': 'Sun, 14 Mar 2021 00:01:45 GMT', 'x-mstorefe-addr': 'FEname:mStoreFE-nodeId:0-ConnId:XhRwd2vT84UKlp7vk9RhABWThwvColBg-slot:1-instId:2-subOid:29-time:2021-03-14T00:01:45Z-localFqdn:10.10.219.141', 'content-length': '1499', 'content-type': 'application/json', 'server': 'Mavenir Web Application Server'}</msg>
<status status="PASS" endtime="20210313 17:07:46.328" starttime="20210313 17:07:46.327"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210313 17:07:46.330" level="INFO">${data} = {u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5...</msg>
<status status="PASS" endtime="20210313 17:07:46.330" starttime="20210313 17:07:46.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.331" level="INFO">{u'objectList': {u'object': [{u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'parentFolder': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=', u'flags': {u'flag': [u'\\Deleted'], u'resourceURL': u'https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf/flags'}, u'path': u'/RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf', u'attributes': {u'attribute': [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}, {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}, {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}, {u'name': u'Direction', u'value': [u'In']}, {u'name': u'from', u'value': [u'tel:+9999999990']}, {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}, {u'name': u'message-context', u'value': [u'X-RCS-PM']}, {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}, {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}, {u'name': u'to', u'value': [u'tel:+8888888880']}]}, u'correlationId': u'37857c02-005f-9b17-9322-b8423992923a'}]}}</msg>
<status status="PASS" endtime="20210313 17:07:46.332" starttime="20210313 17:07:46.330"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${data['objectList']['object']}</arg>
</arguments>
<assign>
<var>${list_of_objects}</var>
</assign>
<msg timestamp="20210313 17:07:46.333" level="INFO">Length is 1</msg>
<msg timestamp="20210313 17:07:46.333" level="INFO">${list_of_objects} = 1</msg>
<status status="PASS" endtime="20210313 17:07:46.333" starttime="20210313 17:07:46.332"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${list_of_objects}</arg>
<arg>${no_of_msgs}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.336" starttime="20210313 17:07:46.335"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.337" starttime="20210313 17:07:46.334"></status>
</kw>
<kw type="for" name="${index} IN RANGE [ 0 | ${list_of_objects} ]">
<kw type="foritem" name="${index} = 0">
<kw name="Get_FolderSearch_AttributesPair" library="mStore_Digits_TMO_resources">
<arguments>
<arg>${data['objectList']['object'][${index}]['attributes']['attribute']}</arg>
</arguments>
<assign>
<var>${Attributes_pair}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${data}</arg>
</arguments>
<assign>
<var>${attributes}</var>
</assign>
<msg timestamp="20210313 17:07:46.341" level="INFO">${attributes} = [{u'name': u'Charset', u'value': [u'UTF-8']}, {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}, {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be'...</msg>
<status status="PASS" endtime="20210313 17:07:46.342" starttime="20210313 17:07:46.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${Attributes_pair}</var>
</assign>
<msg timestamp="20210313 17:07:46.343" level="INFO">${Attributes_pair} = {}</msg>
<status status="PASS" endtime="20210313 17:07:46.343" starttime="20210313 17:07:46.342"></status>
</kw>
<kw type="for" name="${pair} IN [ @{attributes} ]">
<kw type="foritem" name="${pair} = {u'name': u'Charset', u'value': [u'UTF-8']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.345" level="INFO">Charset</msg>
<status status="PASS" endtime="20210313 17:07:46.346" starttime="20210313 17:07:46.344"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.347" level="INFO">[u'UTF-8']</msg>
<status status="PASS" endtime="20210313 17:07:46.347" starttime="20210313 17:07:46.346"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.353" starttime="20210313 17:07:46.348"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.353" starttime="20210313 17:07:46.344"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Content-Transfer-Encoding', u'value': [u'quoted-printable']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.356" level="INFO">Content-Transfer-Encoding</msg>
<status status="PASS" endtime="20210313 17:07:46.356" starttime="20210313 17:07:46.354"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.359" level="INFO">[u'quoted-printable']</msg>
<status status="PASS" endtime="20210313 17:07:46.359" starttime="20210313 17:07:46.357"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.363" starttime="20210313 17:07:46.360"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.363" starttime="20210313 17:07:46.353"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Contribution-ID', u'value': [u'e0a1029e-a48b-4ca6-b185-299dada439be']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.365" level="INFO">Contribution-ID</msg>
<status status="PASS" endtime="20210313 17:07:46.366" starttime="20210313 17:07:46.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.367" level="INFO">[u'e0a1029e-a48b-4ca6-b185-299dada439be']</msg>
<status status="PASS" endtime="20210313 17:07:46.367" starttime="20210313 17:07:46.366"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.369" starttime="20210313 17:07:46.368"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.369" starttime="20210313 17:07:46.363"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Conversation-ID', u'value': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.371" level="INFO">Conversation-ID</msg>
<status status="PASS" endtime="20210313 17:07:46.371" starttime="20210313 17:07:46.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.373" level="INFO">[u'2dbc584e-fc46-4a37-9a56-c2b93246d788']</msg>
<status status="PASS" endtime="20210313 17:07:46.373" starttime="20210313 17:07:46.372"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.375" starttime="20210313 17:07:46.374"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.375" starttime="20210313 17:07:46.370"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'date', u'value': [u'2021-03-13T17:06:25Z']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.376" level="INFO">date</msg>
<status status="PASS" endtime="20210313 17:07:46.377" starttime="20210313 17:07:46.376"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.378" level="INFO">[u'2021-03-13T17:06:25Z']</msg>
<status status="PASS" endtime="20210313 17:07:46.378" starttime="20210313 17:07:46.377"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.380" starttime="20210313 17:07:46.379"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.380" starttime="20210313 17:07:46.375"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'Direction', u'value': [u'In']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.382" level="INFO">Direction</msg>
<status status="PASS" endtime="20210313 17:07:46.382" starttime="20210313 17:07:46.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.383" level="INFO">[u'In']</msg>
<status status="PASS" endtime="20210313 17:07:46.383" starttime="20210313 17:07:46.383"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.385" starttime="20210313 17:07:46.384"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.385" starttime="20210313 17:07:46.380"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'from', u'value': [u'tel:+9999999990']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.387" level="INFO">from</msg>
<status status="PASS" endtime="20210313 17:07:46.387" starttime="20210313 17:07:46.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.389" level="INFO">[u'tel:+9999999990']</msg>
<status status="PASS" endtime="20210313 17:07:46.389" starttime="20210313 17:07:46.388"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.391" starttime="20210313 17:07:46.390"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.391" starttime="20210313 17:07:46.386"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'IMDN-Message-ID', u'value': [u'37857c02-005f-9b17-9322-b8423992923a']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.393" level="INFO">IMDN-Message-ID</msg>
<status status="PASS" endtime="20210313 17:07:46.393" starttime="20210313 17:07:46.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.394" level="INFO">[u'37857c02-005f-9b17-9322-b8423992923a']</msg>
<status status="PASS" endtime="20210313 17:07:46.395" starttime="20210313 17:07:46.394"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.397" starttime="20210313 17:07:46.395"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.397" starttime="20210313 17:07:46.391"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'message-context', u'value': [u'X-RCS-PM']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.399" level="INFO">message-context</msg>
<status status="PASS" endtime="20210313 17:07:46.399" starttime="20210313 17:07:46.398"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.401" level="INFO">[u'X-RCS-PM']</msg>
<status status="PASS" endtime="20210313 17:07:46.401" starttime="20210313 17:07:46.400"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.405" starttime="20210313 17:07:46.403"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.405" starttime="20210313 17:07:46.397"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'P-Asserted-Service', u'value': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.407" level="INFO">P-Asserted-Service</msg>
<status status="PASS" endtime="20210313 17:07:46.407" starttime="20210313 17:07:46.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.408" level="INFO">[u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg']</msg>
<status status="PASS" endtime="20210313 17:07:46.408" starttime="20210313 17:07:46.407"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.411" starttime="20210313 17:07:46.408"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.411" starttime="20210313 17:07:46.405"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'textcontent', u'value': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.413" level="INFO">textcontent</msg>
<status status="PASS" endtime="20210313 17:07:46.413" starttime="20210313 17:07:46.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.415" level="INFO">[u'This is the new message we are depositing to test $@#^&amp;*!0123456789']</msg>
<status status="PASS" endtime="20210313 17:07:46.415" starttime="20210313 17:07:46.414"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.416" starttime="20210313 17:07:46.415"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.417" starttime="20210313 17:07:46.412"></status>
</kw>
<kw type="foritem" name="${pair} = {u'name': u'to', u'value': [u'tel:+8888888880']}">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['name']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.418" level="INFO">to</msg>
<status status="PASS" endtime="20210313 17:07:46.418" starttime="20210313 17:07:46.417"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${pair['value']}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.419" level="INFO">[u'tel:+8888888880']</msg>
<status status="PASS" endtime="20210313 17:07:46.420" starttime="20210313 17:07:46.419"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
<arg>${pair['name']}</arg>
<arg>${pair['value']}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.422" starttime="20210313 17:07:46.420"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.422" starttime="20210313 17:07:46.417"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.422" starttime="20210313 17:07:46.343"></status>
</kw>
<msg timestamp="20210313 17:07:46.423" level="INFO">${Attributes_pair} = {u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788...</msg>
<status status="PASS" endtime="20210313 17:07:46.423" starttime="20210313 17:07:46.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Attributes_pair}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.424" level="INFO">{u'Charset': [u'UTF-8'], u'Content-Transfer-Encoding': [u'quoted-printable'], u'Contribution-ID': [u'e0a1029e-a48b-4ca6-b185-299dada439be'], u'Conversation-ID': [u'2dbc584e-fc46-4a37-9a56-c2b93246d788'], u'date': [u'2021-03-13T17:06:25Z'], u'Direction': [u'In'], u'from': [u'tel:+9999999990'], u'IMDN-Message-ID': [u'37857c02-005f-9b17-9322-b8423992923a'], u'message-context': [u'X-RCS-PM'], u'P-Asserted-Service': [u'urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg'], u'textcontent': [u'This is the new message we are depositing to test $@#^&amp;*!0123456789'], u'to': [u'tel:+8888888880']}</msg>
<status status="PASS" endtime="20210313 17:07:46.425" starttime="20210313 17:07:46.423"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/folders/${msgFolderkey}</arg>
</arguments>
<assign>
<var>${obj_parentFolder}</var>
</assign>
<msg timestamp="20210313 17:07:46.427" level="INFO">${obj_parentFolder} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/folders/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=</msg>
<status status="PASS" endtime="20210313 17:07:46.427" starttime="20210313 17:07:46.425"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>https://${service_root_path}${oem_path}${userId}/objects/${msgFolderkey1}%3d%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_resourceURL}</var>
</assign>
<msg timestamp="20210313 17:07:46.429" level="INFO">${obj_resourceURL} = https://wsg.t-mobile.com:443/oemclient/nms/v1/ums/tel%3a%2b8888888880/objects/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8%3d%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:46.429" starttime="20210313 17:07:46.427"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/${RCS_PARENT_PATH}/${msgFolderkey}%3a${uid}</arg>
</arguments>
<assign>
<var>${obj_Folderpath}</var>
</assign>
<msg timestamp="20210313 17:07:46.431" level="INFO">${obj_Folderpath} = /RCSMessageStore/UkNTTWVzc2FnZVN0b3JlL0NoYXQvODg4ODg4ODg4MC8=%3a51b3d2e1-8458-11eb-83b6-5d6742a1b2bf</msg>
<status status="PASS" endtime="20210313 17:07:46.431" starttime="20210313 17:07:46.430"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['parentFolder']}</arg>
<arg>${obj_parentFolder}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.434" starttime="20210313 17:07:46.432"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.435" starttime="20210313 17:07:46.431"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['resourceURL']}</arg>
<arg>${obj_resourceURL}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.438" starttime="20210313 17:07:46.436"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.438" starttime="20210313 17:07:46.435"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['path']}</arg>
<arg>${obj_Folderpath}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.440" starttime="20210313 17:07:46.439"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.441" starttime="20210313 17:07:46.438"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['correlationId']}</arg>
<arg>${CORRELATION_ID}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.444" starttime="20210313 17:07:46.442"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.444" starttime="20210313 17:07:46.441"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][0]}</arg>
<arg>\\${status_msg[0]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.447" starttime="20210313 17:07:46.445"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.447" starttime="20210313 17:07:46.444"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${len_msg_status} &gt; 1</arg>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['flag'][1]}</arg>
<arg>\\${status_msg[1]}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.449" starttime="20210313 17:07:46.448"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.449" starttime="20210313 17:07:46.447"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]['flags']['resourceURL']}</arg>
<arg>${obj_resourceURL}/flags</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.452" starttime="20210313 17:07:46.450"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.453" starttime="20210313 17:07:46.450"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Charset'][0]}</arg>
<arg>${CHAT_CHARSET}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.455" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.455" starttime="20210313 17:07:46.454"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.455" starttime="20210313 17:07:46.453"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Content-Transfer-Encoding'][0]}</arg>
<arg>${CHAT_CONTENT_TRANSFER_ENCODING}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.458" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.458" starttime="20210313 17:07:46.457"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.459" starttime="20210313 17:07:46.456"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Contribution-ID'][0]}</arg>
<arg>${CONTRIBUTION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.461" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.461" starttime="20210313 17:07:46.460"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.461" starttime="20210313 17:07:46.459"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Conversation-ID'][0]}</arg>
<arg>${CONVERSATION_ID}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.464" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.464" starttime="20210313 17:07:46.463"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.464" starttime="20210313 17:07:46.462"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${Attributes_pair['date'][0]}</arg>
<arg>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.469" starttime="20210313 17:07:46.466"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.469" starttime="20210313 17:07:46.465"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['Direction'][0]}</arg>
<arg>${direction}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.472" starttime="20210313 17:07:46.470"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.472" starttime="20210313 17:07:46.470"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['from'][0]}</arg>
<arg>${from_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.474" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.475" starttime="20210313 17:07:46.473"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.475" starttime="20210313 17:07:46.473"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['message-context'][0]}</arg>
<arg>${message_context}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.477" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.477" starttime="20210313 17:07:46.476"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.477" starttime="20210313 17:07:46.475"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['P-Asserted-Service'][0]}</arg>
<arg>${P_ASSERTED_SERVICE}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.480" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.480" starttime="20210313 17:07:46.479"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.480" starttime="20210313 17:07:46.478"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['textcontent'][0]}</arg>
<arg>${CHAT_CONTENT_DATA}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.482" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.483" starttime="20210313 17:07:46.481"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.483" starttime="20210313 17:07:46.481"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${msg_type}' == 'individual'</arg>
<arg>Should Be Equal</arg>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
<arg>ELSE</arg>
<arg>ValidateGroupToMessages</arg>
<arg>${Attributes_pair['to']}</arg>
<arg>${to_msg}</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${Attributes_pair['to'][0]}</arg>
<arg>${to_msg}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.486" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20210313 17:07:46.487" starttime="20210313 17:07:46.486"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.487" starttime="20210313 17:07:46.484"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.487" starttime="20210313 17:07:46.483"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'deposit'</arg>
<arg>Dictionary Should Not Contain Key</arg>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${data['objectList']['object'][${index}]}</arg>
<arg>imdn</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.491" starttime="20210313 17:07:46.490"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.491" starttime="20210313 17:07:46.489"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.491" starttime="20210313 17:07:46.488"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['delivered']}</arg>
</arguments>
<assign>
<var>${delivered_list}</var>
</assign>
<msg timestamp="20210313 17:07:46.493" level="INFO">${delivered_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:46.493" starttime="20210313 17:07:46.492"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed'</arg>
<arg>${data['objectList']['object'][${index}]['imdn']['read']}</arg>
</arguments>
<assign>
<var>${read_list}</var>
</assign>
<msg timestamp="20210313 17:07:46.494" level="INFO">${read_list} = None</msg>
<status status="PASS" endtime="20210313 17:07:46.494" starttime="20210313 17:07:46.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' != 'deposit' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${delivered_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:46.496" level="INFO">${delivered_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:46.496" starttime="20210313 17:07:46.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>Split String</arg>
<arg>${read_recipients_uri}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>${read_recipients_uri1}</var>
</assign>
<msg timestamp="20210313 17:07:46.497" level="INFO">${read_recipients_uri1} = None</msg>
<status status="PASS" endtime="20210313 17:07:46.497" starttime="20210313 17:07:46.496"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.498" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:46.499" starttime="20210313 17:07:46.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.500" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:46.500" starttime="20210313 17:07:46.499"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.502" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:46.502" starttime="20210313 17:07:46.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_recipients_uri1}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.504" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:46.504" starttime="20210313 17:07:46.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${delivered_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.505" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:46.505" starttime="20210313 17:07:46.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${read_list}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.506" level="INFO">None</msg>
<status status="PASS" endtime="20210313 17:07:46.507" starttime="20210313 17:07:46.506"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'delivered' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.509" starttime="20210313 17:07:46.508"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.510" starttime="20210313 17:07:46.507"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${delivered_recipients_uri}</arg>
<arg>${delivered_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${delivered_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.513" starttime="20210313 17:07:46.511"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.513" starttime="20210313 17:07:46.510"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' == 'group'</arg>
<arg>ValidateImdnDeliveredDisplayed</arg>
<arg>${read_recipients_uri}</arg>
<arg>${read_list}</arg>
<arg>ELSE IF</arg>
<arg>'${imdn_type}' == 'displayed' and '${msg_type}' != 'group'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${read_list[0]}</arg>
<arg>${MSG_TO}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.516" starttime="20210313 17:07:46.514"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.516" starttime="20210313 17:07:46.513"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.516" starttime="20210313 17:07:46.338"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.516" starttime="20210313 17:07:46.337"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.516" starttime="20210313 17:07:46.315"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.517" starttime="20210313 17:07:46.314"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.517" starttime="20210313 17:07:46.313"></status>
</kw>
<kw type="teardown" name="custom_teardown">
<kw name="GetCoresCount" library="mStore_Generic_resources">
<assign>
<var>${CORE_CNT_AT}</var>
</assign>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.520" starttime="20210313 17:07:46.519"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.* |wc -l</arg>
</arguments>
<assign>
<var>${core_cnt}</var>
</assign>
<msg timestamp="20210313 17:07:46.521" level="INFO">Executing command 'ls -altr /data/storage/corefiles/core.* |wc -l'.</msg>
<msg timestamp="20210313 17:07:46.580" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20210313 17:07:46.581" level="INFO">${core_cnt} = 0</msg>
<status status="PASS" endtime="20210313 17:07:46.581" starttime="20210313 17:07:46.520"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>ls -altr /data/storage/corefiles/core.*</arg>
</arguments>
<msg timestamp="20210313 17:07:46.586" level="INFO">tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes</msg>
<status status="PASS" endtime="20210313 17:07:46.587" starttime="20210313 17:07:46.582"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<assign>
<var>${core}</var>
</assign>
<msg timestamp="20210313 17:07:46.638" level="INFO">ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<msg timestamp="20210313 17:07:46.639" level="INFO">${core} = ls -altr /data/storage/corefiles/core.*
ls: cannot access /data/storage/corefiles/core.*: No such file or directory
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:46.639" starttime="20210313 17:07:46.587"></status>
</kw>
<msg timestamp="20210313 17:07:46.640" level="INFO">${CORE_CNT_AT} = 0</msg>
<status status="PASS" endtime="20210313 17:07:46.640" starttime="20210313 17:07:46.518"></status>
</kw>
<kw name="stop_capturing_logs" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.642" starttime="20210313 17:07:46.642"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>killall -10 mlogc &amp;&gt; /dev/null</arg>
</arguments>
<msg timestamp="20210313 17:07:46.643" level="INFO">Executing command 'killall -10 mlogc &amp;&gt; /dev/null'.</msg>
<msg timestamp="20210313 17:07:46.709" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:46.710" starttime="20210313 17:07:46.643"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.710" starttime="20210313 17:07:46.640"></status>
</kw>
<kw name="stop_packet_capture" library="mStore_Generic_resources">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${mStore_session}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.713" starttime="20210313 17:07:46.712"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -f tcpdump</arg>
</arguments>
<msg timestamp="20210313 17:07:46.714" level="INFO">Executing command 'pkill -f tcpdump'.</msg>
<msg timestamp="20210313 17:07:46.865" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20210313 17:07:46.865" starttime="20210313 17:07:46.714"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20210313 17:07:46.868" level="INFO">6047 packets captured</msg>
<status status="PASS" endtime="20210313 17:07:46.868" starttime="20210313 17:07:46.866"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>\#</arg>
</arguments>
<msg timestamp="20210313 17:07:46.947" level="INFO">12070 packets received by filter
98 packets dropped by kernel
date
Sun Mar 14 00:01:45 UTC 2021
[1]-  User defined signal 1   /usr/IMS/current/bin/mlogc -c 127.0.0.1 &gt; /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterDeletingtheMsg"/"FolderSearchAfterDeletingtheMsg".log
[2]+  Done                    tcpdump -i any -s 0 -w /data/automation/1615655185//"Pm_Deposit_Oem_Mt"/"FolderSearchAfterDeletingtheMsg"/"FolderSearchAfterDeletingtheMsg".pcap
[root@1-1 ~]#</msg>
<status status="PASS" endtime="20210313 17:07:46.947" starttime="20210313 17:07:46.868"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.948" starttime="20210313 17:07:46.711"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${CORE_CNT_BT}</arg>
<arg>${CORE_CNT_AT}</arg>
<arg>msg="cores are generated during ${TEST_NAME}"</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.951" starttime="20210313 17:07:46.950"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.951" starttime="20210313 17:07:46.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${request}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${request}</arg>
</arguments>
<msg timestamp="20210313 17:07:46.976" level="FAIL">Variable ${request} does not exist.</msg>
<status status="FAIL" endtime="20210313 17:07:46.976" starttime="20210313 17:07:46.953"></status>
</kw>
<msg timestamp="20210313 17:07:46.977" level="INFO">${status} = ('FAIL', u'Variable ${request} does not exist.')</msg>
<status status="PASS" endtime="20210313 17:07:46.977" starttime="20210313 17:07:46.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status[0]}' == 'PASS'</arg>
<arg>CloseRequest</arg>
<arg>${request}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.979" starttime="20210313 17:07:46.978"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.979" starttime="20210313 17:07:46.517"></status>
</kw>
<tags>
<tag>Critical</tag>
</tags>
<timeout value="2 minutes"></timeout>
<status status="PASS" endtime="20210313 17:07:46.980" critical="yes" starttime="20210313 17:07:44.233"></status>
</test>
<kw type="teardown" name="custom_suite_teardown">
<kw name="stopPNSserver">
<kw name="StopHttpServer" library="mStore_Generic_resources">
<arguments>
<arg>${PNS_SOCKET_SERVICE}</arg>
</arguments>
<kw name="Close Socket" library="Socket_PNS_NMS">
<arguments>
<arg>${service}</arg>
</arguments>
<status status="PASS" endtime="20210313 17:07:46.989" starttime="20210313 17:07:46.988"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.989" starttime="20210313 17:07:46.987"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:46.990" starttime="20210313 17:07:46.987"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20210313 17:07:47.187" starttime="20210313 17:07:46.990"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary">
<doc>Removes all the session objects</doc>
<msg timestamp="20210313 17:07:47.188" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20210313 17:07:47.189" starttime="20210313 17:07:47.188"></status>
</kw>
<status status="PASS" endtime="20210313 17:07:47.189" starttime="20210313 17:07:46.986"></status>
</kw>
<doc>"Digits PM OEM MT Flow"</doc>
<metadata>
<item name="Version">MSTR-P.4.2.14.3</item>
</metadata>
<status status="FAIL" endtime="20210313 17:07:47.189" starttime="20210313 17:06:25.489"></status>
</suite>
<statistics>
<total>
<stat fail="4" pass="12">Critical Tests</stat>
<stat fail="4" pass="12">All Tests</stat>
</total>
<tag>
<stat fail="4" pass="11">Critical</stat>
<stat fail="0" pass="2">Provision</stat>
</tag>
<suite>
<stat fail="4" id="s1" name="Pm Deposit Oem Mt" pass="12">Pm Deposit Oem Mt</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
